/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf/lib/misc.py:46: H5pyDeprecationWarning: Using default_file_mode other than 'r' is deprecated. Pass the mode to h5py.File() instead.
  h5py.get_config().default_file_mode = 'a'
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/qiskit/aqua/__init__.py:86: DeprecationWarning: The package qiskit.aqua is deprecated. It was moved/refactored to qiskit-terra For more information see <https://github.com/Qiskit/qiskit-aqua/blob/main/README.md#migration-guide>
  warn_package('aqua', 'qiskit-terra')
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/qiskit/chemistry/__init__.py:170: DeprecationWarning: The package qiskit.chemistry is deprecated. It was moved/refactored to qiskit_nature (pip install qiskit-nature). For more information see <https://github.com/Qiskit/qiskit-aqua/blob/main/README.md#migration-guide>
  warn_package('chemistry', 'qiskit_nature', 'qiskit-nature')
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/radical/R_1.20/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,1.20)]],basis='aug-cc-pvtz',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
VQE_settings.initial_point = np.load('vqe_su2_output.npy',allow_pickle=True).item()['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Thu Mar 31 13:21:28 2022
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 9
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry True subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   1.200000000000 AA    0.000000000000   0.000000000000   2.267671349478 Bohr

nuclear repulsion = 3.5278480728
point group symmetry = Coov
num. orbitals of irrep A1 = 23
num. orbitals of irrep E1x = 14
num. orbitals of irrep E1y = 14
num. orbitals of irrep E2x = 7
num. orbitals of irrep E2y = 7
num. orbitals of irrep E3x = 2
num. orbitals of irrep E3y = 2
number of shells = 22
number of NR pGTOs = 83
number of NR cGTOs = 69
basis = aug-cc-pvtz
ecp = {}
CPU time:         2.88
Freeze 0 electrons in irreps []
    9 free electrons in irreps A1 E1x E1y E2x E2y E3x E3y




******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> ********
method = SymAdaptedROHF-ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/radical/R_1.20/tmpgk_zhcn0
max_memory 4000 MB (current use 244 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/radical/R_1.20/tmpgk_zhcn0
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 244 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (E1x) = -0.410838955348965  LUMO (A1) = 0.0106559850100998
Initial guess E= -75.3608323985513  |g|= 0.216248
macro= 0  E= -75.3753399669688  delta_E= -0.0145076  |g|= 0.216248  2 KF 5 JK
macro= 1  E= -75.3754865720751  delta_E= -0.000146605  |g|= 0.0863808  2 KF 5 JK
macro= 2  E= -75.3740309113997  delta_E= 0.00145566  |g|= 0.0599081  2 KF 5 JK
macro= 3  E= -75.3753346229477  delta_E= -0.00130371  |g|= 0.104387  2 KF 5 JK
macro= 4  E= -75.3738755773802  delta_E= 0.00145905  |g|= 0.0595713  2 KF 5 JK
macro= 5  E= -75.3753397409524  delta_E= -0.00146416  |g|= 0.105783  2 KF 5 JK
macro= 6  E= -75.3739475706427  delta_E= 0.00139217  |g|= 0.0601588  2 KF 5 JK
macro= 7  E= -75.3753817402071  delta_E= -0.00143417  |g|= 0.104678  2 KF 5 JK
macro= 8  E= -75.3739919713054  delta_E= 0.00138977  |g|= 0.0603482  2 KF 5 JK
macro= 9  E= -75.3754080821152  delta_E= -0.00141611  |g|= 0.104434  2 KF 5 JK
macro= 10  E= -75.3739292230299  delta_E= 0.00147886  |g|= 0.0599423  2 KF 5 JK
macro= 11  E= -75.3754123385932  delta_E= -0.00148312  |g|= 0.105591  2 KF 5 JK
macro= 12  E= -75.3739095130064  delta_E= 0.00150283  |g|= 0.0597952  2 KF 5 JK
macro= 13  E= -75.3754207846341  delta_E= -0.00151127  |g|= 0.105976  2 KF 5 JK
macro= 14  E= -75.3738772130455  delta_E= 0.00154357  |g|= 0.0595872  2 KF 5 JK
macro= 15  E= -75.3754278275554  delta_E= -0.00155061  |g|= 0.106525  2 KF 5 JK
macro= 16  E= -75.3738496019806  delta_E= 0.00157823  |g|= 0.0593934  2 KF 5 JK
macro= 17  E= -75.3754354099306  delta_E= -0.00158581  |g|= 0.106986  2 KF 5 JK
macro= 18  E= -75.3738206334516  delta_E= 0.00161478  |g|= 0.0591826  2 KF 5 JK
macro= 19  E= -75.3754428455573  delta_E= -0.00162221  |g|= 0.107457  2 KF 5 JK
macro= 20  E= -75.3737925366374  delta_E= 0.00165031  |g|= 0.0589693  2 KF 5 JK
macro= 21  E= -75.3754503774996  delta_E= -0.00165784  |g|= 0.107909  2 KF 5 JK
macro= 22  E= -75.3737645841043  delta_E= 0.00168579  |g|= 0.0587489  2 KF 5 JK
macro= 23  E= -75.3754579020601  delta_E= -0.00169332  |g|= 0.108353  2 KF 5 JK
macro= 24  E= -75.3737370837292  delta_E= 0.00172082  |g|= 0.0585234  2 KF 5 JK
macro= 25  E= -75.3754654389928  delta_E= -0.00172836  |g|= 0.108784  2 KF 5 JK
macro= 26  E= -75.3737099789514  delta_E= 0.00175546  |g|= 0.0582927  2 KF 5 JK
macro= 27  E= -75.3754729636812  delta_E= -0.00176298  |g|= 0.109204  2 KF 5 JK
macro= 28  E= -75.3736833350144  delta_E= 0.00178963  |g|= 0.0580575  2 KF 5 JK
macro= 29  E= -75.3754804670535  delta_E= -0.00179713  |g|= 0.109612  2 KF 5 JK
macro= 30  E= -75.3736571707954  delta_E= 0.0018233  |g|= 0.0578179  2 KF 5 JK
macro= 31  E= -75.375487934594  delta_E= -0.00183076  |g|= 0.110009  2 KF 5 JK
macro= 32  E= -75.3736315167971  delta_E= 0.00185642  |g|= 0.0575747  2 KF 5 JK
macro= 33  E= -75.3754953539103  delta_E= -0.00186384  |g|= 0.110393  2 KF 5 JK
macro= 34  E= -75.3736063951842  delta_E= 0.00188896  |g|= 0.0573282  2 KF 5 JK
macro= 35  E= -75.3755027122347  delta_E= -0.00189632  |g|= 0.110766  2 KF 5 JK
macro= 36  E= -75.3735818266503  delta_E= 0.00192089  |g|= 0.057079  2 KF 5 JK
macro= 37  E= -75.375509997447  delta_E= -0.00192817  |g|= 0.111127  2 KF 5 JK
macro= 38  E= -75.373557828135  delta_E= 0.00195217  |g|= 0.0568276  2 KF 5 JK
macro= 39  E= -75.3730506393703  delta_E= 0.000507189  |g|= 0.111476  2 KF 5 JK
macro= 40  E= -75.3747585903008  delta_E= -0.00170795  |g|= 0.104533  2 KF 5 JK
macro= 41  E= -75.3729523064668  delta_E= 0.00180628  |g|= 0.0932597  2 KF 5 JK
macro= 42  E= -75.3745776858887  delta_E= -0.00162538  |g|= 0.105327  2 KF 5 JK
macro= 43  E= -75.372868516611  delta_E= 0.00170917  |g|= 0.0978069  2 KF 5 JK
macro= 44  E= -75.3745860801999  delta_E= -0.00171756  |g|= 0.106374  2 KF 5 JK
macro= 45  E= -75.3728505270252  delta_E= 0.00173555  |g|= 0.0978885  2 KF 5 JK
macro= 46  E= -75.3745609895544  delta_E= -0.00171046  |g|= 0.106471  2 KF 5 JK
macro= 47  E= -75.3728058455576  delta_E= 0.00175514  |g|= 0.0985414  2 KF 5 JK
macro= 48  E= -75.3745474319289  delta_E= -0.00174159  |g|= 0.107061  2 KF 5 JK
macro= 49  E= -75.3727682952224  delta_E= 0.00177914  |g|= 0.098939  2 KF 5 JK
Canonicalize SCF orbitals
macro X = 50  E=-75.3727682952224  |g|= 0.098939  total 101 KF 301 JK
SCF not converged.
SCF energy = -75.3727682952224

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    9 free electrons in irreps A1 E1x E1y E2x E2y E3x E3y




******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> ********
method = SymAdaptedROHF-ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/radical/R_1.20/tmpgk_zhcn0
max_memory 4000 MB (current use 274 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/radical/R_1.20/tmpgk_zhcn0
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 274 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (E1x) = -0.27769944320175  LUMO (A1) = 0.0251563314288614
Initial guess E= -75.375816767648  |g|= 0.0843201
macro= 0  E= -75.3770542049427  delta_E= -0.00123744  |g|= 0.0843201  2 KF 5 JK
macro= 1  E= -75.3770760808489  delta_E= -2.18759e-05  |g|= 0.0226986  2 KF 5 JK
macro= 2  E= -75.3769000977384  delta_E= 0.000175983  |g|= 0.0158754  2 KF 5 JK
macro= 3  E= -75.3770821574848  delta_E= -0.00018206  |g|= 0.0330102  2 KF 5 JK
macro= 4  E= -75.3769356387689  delta_E= 0.000146519  |g|= 0.0114976  2 KF 5 JK
macro= 5  E= -75.3770416700704  delta_E= -0.000106031  |g|= 0.03042  2 KF 5 JK
macro= 6  E= -75.3770055150479  delta_E= 3.6155e-05  |g|= 0.0184629  2 KF 5 JK
macro= 7  E= -75.3770728541816  delta_E= -6.73391e-05  |g|= 0.0246449  2 KF 5 JK
macro= 8  E= -75.3769103617354  delta_E= 0.000162492  |g|= 0.0129327  2 KF 5 JK
macro= 9  E= -75.3770613599889  delta_E= -0.000150998  |g|= 0.0330911  2 KF 5 JK
macro= 10  E= -75.376988525594  delta_E= 7.28344e-05  |g|= 0.014967  2 KF 5 JK
macro= 11  E= -75.3770458517185  delta_E= -5.73261e-05  |g|= 0.0274917  2 KF 5 JK
macro= 12  E= -75.3769592599618  delta_E= 8.65918e-05  |g|= 0.0162648  2 KF 5 JK
macro= 13  E= -75.3770249565183  delta_E= -6.56966e-05  |g|= 0.0288819  2 KF 5 JK
macro= 14  E= -75.3769609434591  delta_E= 6.40131e-05  |g|= 0.0193232  2 KF 5 JK
macro= 15  E= -75.3770150884908  delta_E= -5.4145e-05  |g|= 0.0295509  2 KF 5 JK
macro= 16  E= -75.3769599273019  delta_E= 5.51612e-05  |g|= 0.0199415  2 KF 5 JK
macro= 17  E= -75.3770099242169  delta_E= -4.99969e-05  |g|= 0.0297019  2 KF 5 JK
macro= 18  E= -75.3769618462419  delta_E= 4.8078e-05  |g|= 0.020213  2 KF 5 JK
macro= 19  E= -75.3770100900628  delta_E= -4.82438e-05  |g|= 0.0297596  2 KF 5 JK
macro= 20  E= -75.3769598625133  delta_E= 5.02275e-05  |g|= 0.0199984  2 KF 5 JK
macro= 21  E= -75.3770088200272  delta_E= -4.89575e-05  |g|= 0.0298394  2 KF 5 JK
macro= 22  E= -75.3769613777836  delta_E= 4.74422e-05  |g|= 0.0201279  2 KF 5 JK
macro= 23  E= -75.3770093471096  delta_E= -4.79693e-05  |g|= 0.0298083  2 KF 5 JK
macro= 24  E= -75.3769597100715  delta_E= 4.9637e-05  |g|= 0.0200115  2 KF 5 JK
macro= 25  E= -75.3770083472114  delta_E= -4.86371e-05  |g|= 0.02988  2 KF 5 JK
macro= 26  E= -75.3769609374958  delta_E= 4.74097e-05  |g|= 0.0201263  2 KF 5 JK
macro= 27  E= -75.3770086849215  delta_E= -4.77474e-05  |g|= 0.0298483  2 KF 5 JK
macro= 28  E= -75.3769595353517  delta_E= 4.91496e-05  |g|= 0.0200458  2 KF 5 JK
macro= 29  E= -75.377007818027  delta_E= -4.82827e-05  |g|= 0.0299129  2 KF 5 JK
macro= 30  E= -75.376960536362  delta_E= 4.72817e-05  |g|= 0.0201416  2 KF 5 JK
macro= 31  E= -75.3770080274924  delta_E= -4.74911e-05  |g|= 0.0298876  2 KF 5 JK
macro= 32  E= -75.3769593282606  delta_E= 4.86992e-05  |g|= 0.0200799  2 KF 5 JK
macro= 33  E= -75.3770072653874  delta_E= -4.79371e-05  |g|= 0.0299459  2 KF 5 JK
macro= 34  E= -75.3769601649095  delta_E= 4.71005e-05  |g|= 0.0201607  2 KF 5 JK
macro= 35  E= -75.3770073884331  delta_E= -4.72235e-05  |g|= 0.0299258  2 KF 5 JK
macro= 36  E= -75.3769590960207  delta_E= 4.82924e-05  |g|= 0.0201113  2 KF 5 JK
macro= 37  E= -75.3770067056463  delta_E= -4.76096e-05  |g|= 0.0299792  2 KF 5 JK
macro= 38  E= -75.3769598156721  delta_E= 4.689e-05  |g|= 0.0201811  2 KF 5 JK
macro= 39  E= -75.3770067684987  delta_E= -4.69528e-05  |g|= 0.0299628  2 KF 5 JK
macro= 40  E= -75.3769588458237  delta_E= 4.79227e-05  |g|= 0.0201404  2 KF 5 JK
macro= 41  E= -75.3770061458105  delta_E= -4.73e-05  |g|= 0.0300127  2 KF 5 JK
macro= 42  E= -75.3769594834535  delta_E= 4.66624e-05  |g|= 0.020202  2 KF 5 JK
macro= 43  E= -75.3770061664072  delta_E= -4.6683e-05  |g|= 0.0299988  2 KF 5 JK
macro= 44  E= -75.3769585828031  delta_E= 4.75836e-05  |g|= 0.0201673  2 KF 5 JK
macro= 45  E= -75.3770055898923  delta_E= -4.70071e-05  |g|= 0.0300462  2 KF 5 JK
macro= 46  E= -75.3769591648073  delta_E= 4.64251e-05  |g|= 0.0202228  2 KF 5 JK
macro= 47  E= -75.3770055809774  delta_E= -4.64162e-05  |g|= 0.0300338  2 KF 5 JK
macro= 48  E= -75.3769583104409  delta_E= 4.72705e-05  |g|= 0.0201926  2 KF 5 JK
macro= 49  E= -75.3770050404588  delta_E= -4.673e-05  |g|= 0.0300795  2 KF 5 JK
Canonicalize SCF orbitals
macro X = 50  E=-75.3770050404588  |g|= 0.0300795  total 101 KF 301 JK
SCF not converged.
SCF energy = -75.3770050404588
**** SCF Summaries ****
Total Energy =                         -75.377005040458840
Nuclear Repulsion Energy =               3.527848072800000
One-electron Energy =                 -111.092082219257207
Two-electron Energy =                   32.187229105998377
Wave-function symmetry = Coov
occupancy for each irrep:     A1  E1x  E1y  E2x  E2y  E3x  E3y
double occ                     3    0    1    0    0    0    0
single occ                     0    1    0    0    0    0    0
**** MO energy ****
                          Roothaan           | alpha              | beta
MO #1   (A1  #1 ) energy= -20.6464062693571  | -20.6634039862394  | -20.6294085524749  occ= 2
MO #2   (A1  #2 ) energy= -1.25897816794518  | -1.33275192735729  | -1.18520440853307  occ= 2
MO #3   (A1  #3 ) energy= -0.600165123886613 | -0.617063682425742 | -0.583266565347483 occ= 2
MO #4   (E1y #1 ) energy= -0.532386738031726 | -0.551635195812727 | -0.513138280250724 occ= 2
MO #5   (E1x #1 ) energy= -0.242492244063721 | -0.641751408819233 | 0.156766920691792  occ= 1
MO #6   (A1  #4 ) energy= 0.0262050231868143 | 0.0251479913457021 | 0.0272620550279273 occ= 0
MO #7   (A1  #5 ) energy= 0.128309099015684  | 0.125670346834724  | 0.130947851196641  occ= 0
MO #8   (E1x #2 ) energy= 0.163293638728758  | 0.15726151248604   | 0.169325764971476  occ= 0
MO #9   (E1y #2 ) energy= 0.167654352613876  | 0.166809459677123  | 0.168499245550629  occ= 0
MO #10  (A1  #6 ) energy= 0.169440810585763  | 0.167474918937752  | 0.171406702233774  occ= 0
MO #11  (A1  #7 ) energy= 0.256088002997249  | 0.253550128608094  | 0.258625877386421  occ= 0
MO #12  (E1x #3 ) energy= 0.264760434706566  | 0.262597055657212  | 0.266923813755923  occ= 0
MO #13  (E1y #3 ) energy= 0.268146246375658  | 0.267861639672645  | 0.268430853078669  occ= 0
MO #14  (A1  #8 ) energy= 0.382193479922892  | 0.378095858461109  | 0.386291101384649  occ= 0
MO #15  (A1  #9 ) energy= 0.608629776744602  | 0.605258296580938  | 0.612001256908288  occ= 0
MO #16  (E2x #1 ) energy= 0.645694615625943  | 0.636736760840307  | 0.654652470411579  occ= 0
MO #17  (E2y #1 ) energy= 0.645694615625943  | 0.636736760840307  | 0.654652470411578  occ= 0
MO #18  (E1x #4 ) energy= 0.739493383510379  | 0.730107063240793  | 0.748879703779963  occ= 0
MO #19  (E1y #4 ) energy= 0.745655898920437  | 0.744383213080629  | 0.746928584760244  occ= 0
MO #20  (A1  #10) energy= 0.828443976328707  | 0.825596529103049  | 0.83129142355437   occ= 0
MO #21  (E1x #5 ) energy= 0.905709909213792  | 0.890824543284548  | 0.920595275143038  occ= 0
MO #22  (E1y #5 ) energy= 0.908624493923994  | 0.906617400714002  | 0.910631587133985  occ= 0
MO #23  (E2x #2 ) energy= 0.916895729724986  | 0.915047392594225  | 0.918744066855751  occ= 0
MO #24  (E2y #2 ) energy= 0.916895729724987  | 0.915047392594225  | 0.91874406685575   occ= 0
MO #25  (A1  #11) energy= 0.962237313357768  | 0.959814660155     | 0.964659966560513  occ= 0
MO #26  (E1x #6 ) energy= 0.968947594936683  | 0.9326171986692    | 1.00527799120417   occ= 0
MO #27  (E1y #6 ) energy= 0.972149217931394  | 0.967866824379632  | 0.976431611483155  occ= 0
MO #28  (A1  #12) energy= 1.01213048588348   | 1.00490567862302   | 1.01935529314395   occ= 0
MO #29  (E1x #7 ) energy= 1.39625387330474   | 1.39097279476017   | 1.40153495184932   occ= 0
MO #30  (E1y #7 ) energy= 1.40576211115972   | 1.40484690941562   | 1.40667731290383   occ= 0
MO #31  (A1  #13) energy= 1.6795000506952    | 1.67287809265009   | 1.68612200874026   occ= 0
MO #32  (A1  #14) energy= 1.81459603464532   | 1.80253827971068   | 1.82665378957992   occ= 0
MO #33  (E3x #1 ) energy= 2.0610894279809    | 2.05090904403807   | 2.07126981192373   occ= 0
MO #34  (E3y #1 ) energy= 2.0610894279809    | 2.05090904403807   | 2.07126981192373   occ= 0
MO #35  (E2x #3 ) energy= 2.13403557701849   | 2.10291878436678   | 2.1651523696702    occ= 0
MO #36  (E2y #3 ) energy= 2.13403557701851   | 2.1029187843668    | 2.16515236967021   occ= 0
MO #37  (E1x #8 ) energy= 2.23609942806695   | 2.20562168875646   | 2.26657716737742   occ= 0
MO #38  (E1y #8 ) energy= 2.25094801027177   | 2.24635146094959   | 2.25554455959395   occ= 0
MO #39  (E2x #4 ) energy= 2.26972661376861   | 2.25721522187551   | 2.28223800566172   occ= 0
MO #40  (E2y #4 ) energy= 2.26972661376862   | 2.25721522187551   | 2.28223800566172   occ= 0
MO #41  (A1  #15) energy= 2.37645521466766   | 2.36809996479826   | 2.38481046453708   occ= 0
MO #42  (E1x #9 ) energy= 2.66870187527179   | 2.65778021400545   | 2.67962353653813   occ= 0
MO #43  (E1y #9 ) energy= 2.68868146835048   | 2.68638205290759   | 2.69098088379336   occ= 0
MO #44  (A1  #16) energy= 2.85949605905917   | 2.84843628008535   | 2.87055583803296   occ= 0
MO #45  (A1  #17) energy= 3.18807683843115   | 3.18550110695097   | 3.19065256991133   occ= 0
MO #46  (E2x #5 ) energy= 3.89298859840828   | 3.8917481393378    | 3.89422905747877   occ= 0
MO #47  (E2y #5 ) energy= 3.89298859840828   | 3.89174813933779   | 3.89422905747876   occ= 0
MO #48  (E1x #10) energy= 4.01531474591656   | 3.96502898725823   | 4.06560050457486   occ= 0
MO #49  (E1y #10) energy= 4.02683760879224   | 4.02006210570398   | 4.03361311188049   occ= 0
MO #50  (A1  #18) energy= 4.16274348363843   | 4.15757973354947   | 4.16790723372739   occ= 0
MO #51  (E1x #11) energy= 4.24324404489334   | 4.24013564587267   | 4.246352443914     occ= 0
MO #52  (E1y #11) energy= 4.24953803111571   | 4.24901752869305   | 4.25005853353836   occ= 0
MO #53  (E1x #12) energy= 4.69021328238099   | 4.66776171405429   | 4.7126648507077    occ= 0
MO #54  (E1y #12) energy= 4.70571236206168   | 4.70204060532523   | 4.70938411879812   occ= 0
MO #55  (A1  #19) energy= 4.76277534260616   | 4.75995521362441   | 4.7655954715879    occ= 0
MO #56  (A1  #20) energy= 6.17146197991389   | 6.16132343824809   | 6.18160052157962   occ= 0
MO #57  (E3x #2 ) energy= 6.4637903248736    | 6.43873198478502   | 6.48884866496218   occ= 0
MO #58  (E3y #2 ) energy= 6.46379032487359   | 6.43873198478501   | 6.48884866496217   occ= 0
MO #59  (E2x #6 ) energy= 6.55402590254137   | 6.5360656209699    | 6.57198618411286   occ= 0
MO #60  (E2y #6 ) energy= 6.55402590254136   | 6.53606562096988   | 6.57198618411284   occ= 0
MO #61  (E1x #13) energy= 6.78822887599577   | 6.76725999276215   | 6.80919775922939   occ= 0
MO #62  (E1y #13) energy= 6.82423797270418   | 6.81946957345701   | 6.82900637195134   occ= 0
MO #63  (E2x #7 ) energy= 7.00333624327373   | 6.96133910322175   | 7.04533338332572   occ= 0
MO #64  (E2y #7 ) energy= 7.00333624327375   | 6.96133910322176   | 7.04533338332573   occ= 0
MO #65  (A1  #21) energy= 7.13222886540323   | 7.12204215214097   | 7.14241557866546   occ= 0
MO #66  (E1x #14) energy= 7.16902851752957   | 7.12920124843561   | 7.20885578662353   occ= 0
MO #67  (E1y #14) energy= 7.19970572589482   | 7.19308602276895   | 7.20632542902067   occ= 0
MO #68  (A1  #22) energy= 7.61282864507531   | 7.60053808046775   | 7.62511920968289   occ= 0
MO #69  (A1  #23) energy= 10.2558441606186   | 10.239296363893    | 10.2723919573442   occ= 0
 ** Mulliken pop on meta-lowdin orthogonal AOs  **
 ** Mulliken pop  **
pop of  0 O 1s        2.00000
pop of  0 O 2s        1.89731
pop of  0 O 3s        0.00214
pop of  0 O 4s        0.00070
pop of  0 O 5s        0.00021
pop of  0 O 2px       0.99758
pop of  0 O 2py       1.99373
pop of  0 O 2pz       1.42315
pop of  0 O 3px       0.00023
pop of  0 O 3py       0.00138
pop of  0 O 3pz       0.00011
pop of  0 O 4px       0.00075
pop of  0 O 4py       0.00053
pop of  0 O 4pz       0.00149
pop of  0 O 5px       0.00013
pop of  0 O 5py       0.00029
pop of  0 O 5pz       0.00010
pop of  0 O 3dxy      0.00000
pop of  0 O 3dyz      0.00104
pop of  0 O 3dz^2     0.00429
pop of  0 O 3dxz      0.00053
pop of  0 O 3dx2-y2    0.00000
pop of  0 O 4dxy      0.00000
pop of  0 O 4dyz      0.00027
pop of  0 O 4dz^2     0.00034
pop of  0 O 4dxz      0.00013
pop of  0 O 4dx2-y2    0.00000
pop of  0 O 5dxy      0.00000
pop of  0 O 5dyz      0.00006
pop of  0 O 5dz^2     0.00005
pop of  0 O 5dxz      0.00003
pop of  0 O 5dx2-y2    0.00000
pop of  0 O 4f-3      0.00000
pop of  0 O 4f-2      0.00000
pop of  0 O 4f-1      0.00012
pop of  0 O 4f 0      0.00031
pop of  0 O 4f 1      0.00000
pop of  0 O 4f 2      0.00000
pop of  0 O 4f 3      0.00000
pop of  0 O 5f-3      0.00000
pop of  0 O 5f-2      0.00000
pop of  0 O 5f-1      0.00004
pop of  0 O 5f 0      0.00006
pop of  0 O 5f 1      0.00001
pop of  0 O 5f 2      0.00000
pop of  0 O 5f 3      0.00000
pop of  1 H 1s        0.66135
pop of  1 H 2s        0.00537
pop of  1 H 3s        0.00090
pop of  1 H 4s        0.00015
pop of  1 H 2px       0.00022
pop of  1 H 2py       0.00230
pop of  1 H 2pz       0.00129
pop of  1 H 3px       0.00023
pop of  1 H 3py       0.00002
pop of  1 H 3pz       0.00063
pop of  1 H 4px       0.00011
pop of  1 H 4py       0.00002
pop of  1 H 4pz       0.00001
pop of  1 H 3dxy      0.00000
pop of  1 H 3dyz      0.00018
pop of  1 H 3dz^2     0.00006
pop of  1 H 3dxz      0.00005
pop of  1 H 3dx2-y2    0.00000
pop of  1 H 4dxy      0.00000
pop of  1 H 4dyz      0.00002
pop of  1 H 4dz^2     0.00000
pop of  1 H 4dxz      0.00000
pop of  1 H 4dx2-y2    0.00000
 ** Mulliken atomic charges  **
charge of  0O =     -0.32708
charge of  1H =      0.32708
Dipole moment(X, Y, Z, Debye):  0.00000,  0.00000,  1.91984
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/radical/R_1.20/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,1.20)]],basis='aug-cc-pvtz',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
VQE_settings.initial_point = np.load('vqe_su2_output.npy',allow_pickle=True).item()['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Thu Mar 31 13:23:27 2022
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:       949.47

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Overwritten attributes  get_hcore get_ovlp  of <class 'pyscf.soscf.newton_ah.newton.<locals>.SecondOrderROHF'>
Overwritten attributes  get_hcore get_ovlp  of <class 'pyscf.scf.rohf.ROHF'>




******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/radical/R_1.20/tmp2cn_tvij
max_memory 4000 MB (current use 379 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/radical/R_1.20/tmp2cn_tvij
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 379 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.242492244063726  LUMO = 0.249142241289154
Initial guess E= -75.3770149823102  |g|= 0.000443068
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf/gto/mole.py:1089: UserWarning: Function mol.dumps drops attribute nao_nr because it is not JSON-serializable
  warnings.warn(msg)
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf/gto/mole.py:1089: UserWarning: Function mol.dumps drops attribute energy_nuc because it is not JSON-serializable
  warnings.warn(msg)
macro= 0  E= -75.3770151169508  delta_E= -1.34641e-07  |g|= 0.000443068  1 KF 3 JK
macro= 1  E= -75.3770151169508  delta_E= -2.84217e-14  |g|= 3.15011e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3770151169508  |g|= 3.15011e-06  total 3 KF 8 JK
converged SCF energy = -75.3770151169508
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/radical/R_1.20/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,1.20)]],basis='aug-cc-pvtz',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
VQE_settings.initial_point = np.load('vqe_su2_output.npy',allow_pickle=True).item()['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Thu Mar 31 13:23:30 2022
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:       970.29

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/radical/R_1.20/tmpdi0lkwt3
max_memory 4000 MB (current use 392 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/radical/R_1.20/tmpdi0lkwt3
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 392 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.242491305478492  LUMO = 0.249141773037709
Initial guess E= -75.3770149814062  |g|= 0.000444142
macro= 0  E= -75.3770151169529  delta_E= -1.35547e-07  |g|= 0.000444142  1 KF 3 JK
macro= 1  E= -75.3770151169529  delta_E= 0  |g|= 8.10112e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3770151169529  |g|= 8.10112e-08  total 3 KF 8 JK
converged SCF energy = -75.3770151169529
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf/fci/direct_nosym.py:179: UserWarning: direct_nosym.kernel is not able to diagonalize non-Hermitian Hamiltonian. If h1e and h2e is not hermtian, calling symmetric diagonlization in eig can lead to wrong results.
  warnings.warn('direct_nosym.kernel is not able to diagonalize '
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/radical/R_1.20/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,1.20)]],basis='aug-cc-pvtz',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
VQE_settings.initial_point = np.load('vqe_su2_output.npy',allow_pickle=True).item()['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Thu Mar 31 13:23:33 2022
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:       989.93

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/radical/R_1.20/tmp751npjmx
max_memory 4000 MB (current use 565 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/radical/R_1.20/tmp751npjmx
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 565 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.242957371635082  LUMO = 0.0261981392832526
Initial guess E= -75.3777039073327  |g|= 0.010601
macro= 0  E= -75.3777336897267  delta_E= -2.97824e-05  |g|= 0.000436597  2 KF 7 JK
macro= 1  E= -75.3777336897267  delta_E= -4.26326e-14  |g|= 1.04743e-05  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3777336897267  |g|= 1.04743e-05  total 4 KF 12 JK
converged SCF energy = -75.3777336897267
u+d contributions  -0.05846267723168555
uu+dd contributions  -0.08829080670679108
ud contributions  -0.1797298750604383
u+d contributions  -0.008457738946055888
uu+dd contributions  -0.03818197443114349
ud contributions  -0.12942127845326742
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/radical/R_1.20/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,1.20)]],basis='aug-cc-pvtz',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
VQE_settings.initial_point = np.load('vqe_su2_output.npy',allow_pickle=True).item()['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Thu Mar 31 13:23:40 2022
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:      1041.64

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/radical/R_1.20/tmp1ozjnt0h
max_memory 4000 MB (current use 564 MB)
num. doubly occ = 2  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/radical/R_1.20/tmp1ozjnt0h
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 564 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.24238387489373  LUMO = 0.249171864676623
Initial guess E= -75.3770149595841  |g|= 0.000482441
macro= 0  E= -75.3770151169512  delta_E= -1.57367e-07  |g|= 0.000482441  1 KF 2 JK
macro= 1  E= -75.3770151169512  delta_E= 0  |g|= 6.22346e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3770151169512  |g|= 6.22346e-08  total 3 KF 7 JK
converged SCF energy = -75.3770151169512
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/radical/R_1.20/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,1.20)]],basis='aug-cc-pvtz',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
VQE_settings.initial_point = np.load('vqe_su2_output.npy',allow_pickle=True).item()['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Thu Mar 31 13:23:43 2022
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:      1060.68

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/radical/R_1.20/tmpu1qh9sjv
max_memory 4000 MB (current use 728 MB)
num. doubly occ = 2  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/radical/R_1.20/tmpu1qh9sjv
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 728 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.242849434267451  LUMO = 0.0261980755060123
Initial guess E= -75.3776578740548  |g|= 0.00787629
macro= 0  E= -75.377680227179  delta_E= -2.23531e-05  |g|= 0.000337826  2 KF 7 JK
macro= 1  E= -75.377680227179  delta_E= 0  |g|= 7.26565e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.377680227179  |g|= 7.26565e-06  total 4 KF 12 JK
converged SCF energy = -75.377680227179
/home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/radical/R_1.20/../../../src/qiskit_subroutines.py:25: DeprecationWarning: The package qiskit.aqua.operators is deprecated. It was moved/refactored to qiskit.opflow (pip install qiskit-terra). For more information see <https://github.com/Qiskit/qiskit-aqua/blob/main/README.md#migration-guide>
  c_list = [WeightedPauliOperator([(0.5,a1),(-0.5j,a2)]) for a1,a2 in a_list]
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/qiskit/chemistry/fermionic_operator.py:394: DeprecationWarning: The variable qiskit.aqua.aqua_globals is deprecated. It was moved/refactored to qiskit.utils.algorithm_globals (pip install qiskit-terra). For more information see <https://github.com/Qiskit/qiskit-aqua/blob/main/README.md#migration-guide>
  task_args=(threshold,), num_processes=aqua_globals.num_processes)
/home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/radical/R_1.20/../../../src/qiskit_subroutines.py:19: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  a_x = np.asarray(zmask,dtype=np.bool)
/home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/radical/R_1.20/../../../src/qiskit_subroutines.py:20: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  a_z = np.asarray(zeros,dtype=np.bool)
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/qiskit/quantum_info/operators/symplectic/pauli.py:195: DeprecationWarning: Initializing Pauli from `Pauli(z=z, x=x)` kwargs is deprecated as of version 0.17.0 and will be removed no earlier than 3 months after the release date. Use tuple initialization `Pauli((z, x))` instead.
  base_z, base_x, base_phase = self._from_array_deprecated(z, x)
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/qiskit/aqua/components/optimizers/optimizer.py:49: DeprecationWarning: The package qiskit.aqua.components.optimizers is deprecated. It was moved/refactored to qiskit.algorithms.optimizers (pip install qiskit-terra). For more information see <https://github.com/Qiskit/qiskit-aqua/blob/main/README.md#migration-guide>
  warn_package('aqua.components.optimizers',
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/qiskit/aqua/quantum_instance.py:135: DeprecationWarning: The class qiskit.aqua.QuantumInstance is deprecated. It was moved/refactored to qiskit.utils.QuantumInstance (pip install qiskit-terra). For more information see <https://github.com/Qiskit/qiskit-aqua/blob/main/README.md#migration-guide>
  warn_class('aqua.QuantumInstance',
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/qiskit/chemistry/components/initial_states/hartree_fock.py:56: UserWarning: two_qubit_reduction only works with parity qubit mapping but you have jordan_wigner. We switch two_qubit_reduction to False.
  warnings.warn('two_qubit_reduction only works with parity qubit mapping '
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/qiskit/chemistry/components/initial_states/hartree_fock.py:61: DeprecationWarning: The HartreeFock class is deprecated as of Aqua 0.9 and will be removed no earlier than 3 months after the release date. Instead, all algorithms and circuits accept a plain QuantumCircuit. 
  super().__init__()
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/qiskit/aqua/components/variational_forms/variational_form.py:48: DeprecationWarning: The package qiskit.aqua.components.variational_forms is deprecated. For more information see <https://github.com/Qiskit/qiskit-aqua/blob/main/README.md#migration-guide>
  warn_package('aqua.components.variational_forms')
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/qiskit/aqua/algorithms/vq_algorithm.py:70: DeprecationWarning: The class qiskit.aqua.algorithms.VQAlgorithm is deprecated. It was moved/refactored to qiskit.algorithms.VariationalAlgorithm (pip install qiskit-terra). For more information see <https://github.com/Qiskit/qiskit-aqua/blob/main/README.md#migration-guide>
  warn_class('aqua.algorithms.VQAlgorithm',
u+d contributions  -0.02540316772935584
uu+dd contributions  -0.047467710511139245
ud contributions  -0.10379157072233297
u+d contributions  -0.00613041395728409
uu+dd contributions  -0.02816130838086631
ud contributions  -0.08447751878599222
----- VQE data ------
target_sector:  None
optimizer:  bfgs
max_iter:  1000
instance:  statevector_simulator
shots:  1000
ansatz:  q_uccsd
initial_point:  None


qse operators prepared for  u
qse operators prepared for  d
qse operators prepared for  uu
qse operators prepared for  dd
qse operators prepared for  ud
In the tapering subroutine, i=0, E(i)=-75.022521, i_min=-1
In the tapering subroutine, i=1, E(i)=-75.225165, i_min=0
In the tapering subroutine, i=2, E(i)=-75.377015, i_min=1
In the tapering subroutine, i=3, E(i)=-75.116774, i_min=2
In the tapering subroutine, i=4, E(i)=-75.372463, i_min=2
In the tapering subroutine, i=5, E(i)=-75.105159, i_min=2
In the tapering subroutine, i=6, E(i)=-74.826961, i_min=2
In the tapering subroutine, i=7, E(i)=-75.135722, i_min=2
In the tapering subroutine, i=8, E(i)=-75.225165, i_min=2
In the tapering subroutine, i=9, E(i)=-75.218605, i_min=2
In the tapering subroutine, i=10, E(i)=-75.138961, i_min=2
In the tapering subroutine, i=11, E(i)=-75.377015, i_min=2
In the tapering subroutine, i=12, E(i)=-75.126635, i_min=2
In the tapering subroutine, i=13, E(i)=-75.372463, i_min=2
In the tapering subroutine, i=14, E(i)=-75.135722, i_min=2
In the tapering subroutine, i=15, E(i)=-74.865458, i_min=2
after tapering qubits(H) =  4
qse operators tapered for  hamiltonian
qse operators tapered for  qse_s_u
qse operators tapered for  qse_h_u
qse operators tapered for  qse_s_d
qse operators tapered for  qse_h_d
qse operators tapered for  qse_s_uu
qse operators tapered for  qse_h_uu
qse operators tapered for  qse_s_dd
qse operators tapered for  qse_h_dd
qse operators tapered for  qse_s_ud
qse operators tapered for  qse_h_ud
          
q_0: ─────
     ┌───┐
q_1: ┤ X ├
     └───┘
q_2: ─────
          
q_3: ─────
          
overlap matrix condition number 0.022725102084 0.999678194069 
overlap matrix condition number 0.001253009476 0.999678194069 
overlap matrix condition number 0.001574815407 0.998425184593 
overlap matrix condition number 0.000000000000 0.977274897916 
overlap matrix condition number 0.000000000000 1.004557694173 
u+d contributions  -0.006130335150934527
uu+dd contributions  -0.028161258878026663
ud contributions  -0.08444308584440476
Traceback (most recent call last):
  File "/home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/radical/R_1.20/main.py", line 81, in <module>
    VQE_settings.initial_point = np.load('vqe_su2_output.npy',allow_pickle=True).item()['opt_params']
  File "/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/numpy/lib/npyio.py", line 440, in load
    return format.read_array(fid, allow_pickle=allow_pickle,
  File "/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/numpy/lib/format.py", line 748, in read_array
    array = pickle.load(fp, **pickle_kwargs)
  File "/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/qiskit/circuit/parametervector.py", line 62, in __setstate__
    self._name = state["name"]
TypeError: tuple indices must be integers or slices, not str
