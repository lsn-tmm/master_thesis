#INFO: **** input file is /Users/mario/Documents/GitHub/UniMi/tesi_alessandro_tammaro/nevpt2/6-31ppg/radical/R_0.96/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,0.96)]],basis='6-31++g',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % BO_IAO_external_solver.solve_with_fci()[0])

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_external_solver.solve_with_fci()[0])

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64')  Threads 1
Python 3.9.7 | packaged by conda-forge | (default, Sep  2 2021, 17:58:46) 
[Clang 11.1.0 ]
numpy 1.21.2  scipy 1.7.1
Date: Wed Dec 29 22:41:11 2021
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/caltech_entanglement/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 9
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry True subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.960000000000 AA    0.000000000000   0.000000000000   1.814137079582 Bohr

nuclear repulsion = 4.409810091
point group symmetry = Coov
num. orbitals of irrep A1 = 10
num. orbitals of irrep E1x = 3
num. orbitals of irrep E1y = 3
number of shells = 10
number of NR pGTOs = 31
number of NR cGTOs = 16
basis = 6-31++g
ecp = {}
CPU time:         5.44
Freeze 0 electrons in irreps []
    9 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> ********
method = SymAdaptedROHF-ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpnsxgv47v
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpnsxgv47v
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (E1y) = -0.429488950615583  LUMO (A1) = 0.0401259223354401
Initial guess E= -75.355824833247  |g|= 0.168191
macro= 0  E= -75.3646389273313  delta_E= -0.00881409  |g|= 0.168191  2 KF 5 JK
macro= 1  E= -75.364054752816  delta_E= 0.000584175  |g|= 0.0867774  2 KF 5 JK
macro= 2  E= -75.3646000712948  delta_E= -0.000545318  |g|= 0.0810163  2 KF 5 JK
macro= 3  E= -75.3635174558619  delta_E= 0.00108262  |g|= 0.0897234  2 KF 5 JK
macro= 4  E= -75.3649552641272  delta_E= -0.00143781  |g|= 0.0923133  2 KF 5 JK
macro= 5  E= -75.3636392769607  delta_E= 0.00131599  |g|= 0.0830723  2 KF 5 JK
macro= 6  E= -75.3649378857521  delta_E= -0.00129861  |g|= 0.090231  2 KF 5 JK
macro= 7  E= -75.3636160304735  delta_E= 0.00132186  |g|= 0.083399  2 KF 5 JK
macro= 8  E= -75.3649321403913  delta_E= -0.00131611  |g|= 0.0906228  2 KF 5 JK
macro= 9  E= -75.3635971298885  delta_E= 0.00133501  |g|= 0.0835742  2 KF 5 JK
macro= 10  E= -75.3649255887553  delta_E= -0.00132846  |g|= 0.0909161  2 KF 5 JK
macro= 11  E= -75.3635780672758  delta_E= 0.00134752  |g|= 0.0837759  2 KF 5 JK
macro= 12  E= -75.3649190799451  delta_E= -0.00134101  |g|= 0.0912074  2 KF 5 JK
macro= 13  E= -75.3635592418954  delta_E= 0.00135984  |g|= 0.0839778  2 KF 5 JK
macro= 14  E= -75.3649125736121  delta_E= -0.00135333  |g|= 0.0914925  2 KF 5 JK
macro= 15  E= -75.3635406189849  delta_E= 0.00137195  |g|= 0.0841789  2 KF 5 JK
macro= 16  E= -75.3649060759864  delta_E= -0.00136546  |g|= 0.0917728  2 KF 5 JK
macro= 17  E= -75.3635222000775  delta_E= 0.00138388  |g|= 0.0843788  2 KF 5 JK
macro= 18  E= -75.3648995890772  delta_E= -0.00137739  |g|= 0.0920484  2 KF 5 JK
macro= 19  E= -75.3635039866202  delta_E= 0.0013956  |g|= 0.0845773  2 KF 5 JK
macro= 20  E= -75.3648931148082  delta_E= -0.00138913  |g|= 0.0923193  2 KF 5 JK
macro= 21  E= -75.3634859800569  delta_E= 0.00140713  |g|= 0.0847746  2 KF 5 JK
macro= 22  E= -75.3648866550326  delta_E= -0.00140067  |g|= 0.0925857  2 KF 5 JK
macro= 23  E= -75.3634681816353  delta_E= 0.00141847  |g|= 0.0849704  2 KF 5 JK
macro= 24  E= -75.3648802115527  delta_E= -0.00141203  |g|= 0.0928474  2 KF 5 JK
macro= 25  E= -75.3634505924094  delta_E= 0.00142962  |g|= 0.0851649  2 KF 5 JK
macro= 26  E= -75.3648737861156  delta_E= -0.00142319  |g|= 0.0931047  2 KF 5 JK
macro= 27  E= -75.3634332132448  delta_E= 0.00144057  |g|= 0.0853579  2 KF 5 JK
macro= 28  E= -75.3648673804131  delta_E= -0.00143417  |g|= 0.0933574  2 KF 5 JK
macro= 29  E= -75.3634160448259  delta_E= 0.00145134  |g|= 0.0855495  2 KF 5 JK
macro= 30  E= -75.3648609960811  delta_E= -0.00144495  |g|= 0.0936057  2 KF 5 JK
macro= 31  E= -75.3633990876632  delta_E= 0.00146191  |g|= 0.0857395  2 KF 5 JK
macro= 32  E= -75.3648546347004  delta_E= -0.00145555  |g|= 0.0938497  2 KF 5 JK
macro= 33  E= -75.3633823421005  delta_E= 0.00147229  |g|= 0.0859281  2 KF 5 JK
macro= 34  E= -75.3648482977964  delta_E= -0.00146596  |g|= 0.0940893  2 KF 5 JK
macro= 35  E= -75.3633658083215  delta_E= 0.00148249  |g|= 0.0861151  2 KF 5 JK
macro= 36  E= -75.3648419868404  delta_E= -0.00147618  |g|= 0.0943247  2 KF 5 JK
macro= 37  E= -75.3633494863578  delta_E= 0.0014925  |g|= 0.0863006  2 KF 5 JK
macro= 38  E= -75.3648357032493  delta_E= -0.00148622  |g|= 0.0945558  2 KF 5 JK
macro= 39  E= -75.3633333760944  delta_E= 0.00150233  |g|= 0.0864845  2 KF 5 JK
macro= 40  E= -75.364829448387  delta_E= -0.00149607  |g|= 0.0947827  2 KF 5 JK
macro= 41  E= -75.3633174772773  delta_E= 0.00151197  |g|= 0.0866669  2 KF 5 JK
macro= 42  E= -75.3648232235641  delta_E= -0.00150575  |g|= 0.0950056  2 KF 5 JK
macro= 43  E= -75.3633017895199  delta_E= 0.00152143  |g|= 0.0868476  2 KF 5 JK
macro= 44  E= -75.3648170300396  delta_E= -0.00151524  |g|= 0.0952243  2 KF 5 JK
macro= 45  E= -75.3632863123093  delta_E= 0.00153072  |g|= 0.0870266  2 KF 5 JK
macro= 46  E= -75.3648108690209  delta_E= -0.00152456  |g|= 0.0954391  2 KF 5 JK
macro= 47  E= -75.3632710450124  delta_E= 0.00153982  |g|= 0.0872041  2 KF 5 JK
macro= 48  E= -75.3648047416646  delta_E= -0.0015337  |g|= 0.0956499  2 KF 5 JK
macro= 49  E= -75.3632559868823  delta_E= 0.00154875  |g|= 0.0873799  2 KF 5 JK
Canonicalize SCF orbitals
macro X = 50  E=-75.3632559868823  |g|= 0.0873799  total 101 KF 301 JK
SCF not converged.
SCF energy = -75.3632559868823

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    9 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> ********
method = SymAdaptedROHF-ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpnsxgv47v
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpnsxgv47v
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (E1y) = -0.286689472233346  LUMO (A1) = 0.0411760628371288
Initial guess E= -75.3661011311121  |g|= 0.0661064
macro= 0  E= -75.3668925276838  delta_E= -0.000791397  |g|= 0.0661064  2 KF 5 JK
macro= 1  E= -75.3669550666188  delta_E= -6.25389e-05  |g|= 0.0243398  2 KF 5 JK
macro= 2  E= -75.366801335413  delta_E= 0.000153731  |g|= 0.0147853  2 KF 5 JK
macro= 3  E= -75.3669550103715  delta_E= -0.000153675  |g|= 0.0292073  2 KF 5 JK
macro= 4  E= -75.3668161714805  delta_E= 0.000138839  |g|= 0.0117058  2 KF 5 JK
macro= 5  E= -75.3669346330376  delta_E= -0.000118462  |g|= 0.0285541  2 KF 5 JK
macro= 6  E= -75.3668651115876  delta_E= 6.95215e-05  |g|= 0.0155928  2 KF 5 JK
macro= 7  E= -75.366935063306  delta_E= -6.99517e-05  |g|= 0.0258556  2 KF 5 JK
macro= 8  E= -75.366851316977  delta_E= 8.37463e-05  |g|= 0.0146308  2 KF 5 JK
macro= 9  E= -75.366925984203  delta_E= -7.46672e-05  |g|= 0.0261892  2 KF 5 JK
macro= 10  E= -75.366848637342  delta_E= 7.73469e-05  |g|= 0.016049  2 KF 5 JK
macro= 11  E= -75.3669215705311  delta_E= -7.29332e-05  |g|= 0.0265037  2 KF 5 JK
macro= 12  E= -75.3668488034505  delta_E= 7.27671e-05  |g|= 0.0166509  2 KF 5 JK
macro= 13  E= -75.3669206520204  delta_E= -7.18486e-05  |g|= 0.0265575  2 KF 5 JK
macro= 14  E= -75.3668484090132  delta_E= 7.2243e-05  |g|= 0.0167371  2 KF 5 JK
macro= 15  E= -75.366919843428  delta_E= -7.14344e-05  |g|= 0.0265754  2 KF 5 JK
macro= 16  E= -75.3668483913098  delta_E= 7.14521e-05  |g|= 0.0168495  2 KF 5 JK
macro= 17  E= -75.3669196156583  delta_E= -7.12243e-05  |g|= 0.0265907  2 KF 5 JK
macro= 18  E= -75.366848351337  delta_E= 7.12643e-05  |g|= 0.0168758  2 KF 5 JK
macro= 19  E= -75.3669193867597  delta_E= -7.10354e-05  |g|= 0.0265931  2 KF 5 JK
macro= 20  E= -75.3668483446483  delta_E= 7.10421e-05  |g|= 0.0169108  2 KF 5 JK
macro= 21  E= -75.3669191939317  delta_E= -7.08493e-05  |g|= 0.0265968  2 KF 5 JK
macro= 22  E= -75.3668483659425  delta_E= 7.0828e-05  |g|= 0.016944  2 KF 5 JK
macro= 23  E= -75.3669189936469  delta_E= -7.06277e-05  |g|= 0.026597  2 KF 5 JK
macro= 24  E= -75.366848407664  delta_E= 7.0586e-05  |g|= 0.0169833  2 KF 5 JK
macro= 25  E= -75.3669187746389  delta_E= -7.0367e-05  |g|= 0.0265954  2 KF 5 JK
macro= 26  E= -75.3668484762329  delta_E= 7.02984e-05  |g|= 0.017031  2 KF 5 JK
macro= 27  E= -75.3669185381215  delta_E= -7.00619e-05  |g|= 0.0265912  2 KF 5 JK
macro= 28  E= -75.366848564153  delta_E= 6.9974e-05  |g|= 0.0170872  2 KF 5 JK
macro= 29  E= -75.3669182817737  delta_E= -6.97176e-05  |g|= 0.0265847  2 KF 5 JK
macro= 30  E= -75.3668486632131  delta_E= 6.96186e-05  |g|= 0.0171516  2 KF 5 JK
macro= 31  E= -75.3669180107811  delta_E= -6.93476e-05  |g|= 0.0265762  2 KF 5 JK
macro= 32  E= -75.3668487599629  delta_E= 6.92508e-05  |g|= 0.0172217  2 KF 5 JK
macro= 33  E= -75.3669177314169  delta_E= -6.89715e-05  |g|= 0.0265666  2 KF 5 JK
macro= 34  E= -75.3668488422663  delta_E= 6.88892e-05  |g|= 0.0172942  2 KF 5 JK
macro= 35  E= -75.3669174519275  delta_E= -6.86097e-05  |g|= 0.0265571  2 KF 5 JK
macro= 36  E= -75.3668489022048  delta_E= 6.85497e-05  |g|= 0.0173656  2 KF 5 JK
macro= 37  E= -75.3669171796196  delta_E= -6.82774e-05  |g|= 0.0265485  2 KF 5 JK
macro= 38  E= -75.3668489374191  delta_E= 6.82422e-05  |g|= 0.0174329  2 KF 5 JK
macro= 39  E= -75.3669169195552  delta_E= -6.79821e-05  |g|= 0.0265416  2 KF 5 JK
macro= 40  E= -75.3668489497624  delta_E= 6.79698e-05  |g|= 0.0174941  2 KF 5 JK
macro= 41  E= -75.3669166739689  delta_E= -6.77242e-05  |g|= 0.0265367  2 KF 5 JK
macro= 42  E= -75.3668489431684  delta_E= 6.77308e-05  |g|= 0.0175487  2 KF 5 JK
macro= 43  E= -75.3669164427278  delta_E= -6.74996e-05  |g|= 0.0265337  2 KF 5 JK
macro= 44  E= -75.3668489219734  delta_E= 6.75208e-05  |g|= 0.0175966  2 KF 5 JK
macro= 45  E= -75.3669162242371  delta_E= -6.73023e-05  |g|= 0.0265325  2 KF 5 JK
macro= 46  E= -75.3668488900104  delta_E= 6.73342e-05  |g|= 0.0176386  2 KF 5 JK
macro= 47  E= -75.3669160162933  delta_E= -6.71263e-05  |g|= 0.026533  2 KF 5 JK
macro= 48  E= -75.3668488503133  delta_E= 6.7166e-05  |g|= 0.0176753  2 KF 5 JK
macro= 49  E= -75.3669158166711  delta_E= -6.69664e-05  |g|= 0.0265349  2 KF 5 JK
Canonicalize SCF orbitals
macro X = 50  E=-75.3669158166711  |g|= 0.0265349  total 101 KF 301 JK
SCF not converged.
SCF energy = -75.3669158166711
**** SCF Summaries ****
Total Energy =                         -75.366915816671096
Nuclear Repulsion Energy =               4.409810091000001
One-electron Energy =                 -112.546490225901195
Two-electron Energy =                   32.769764318230102
Wave-function symmetry = Coov
occupancy for each irrep:     A1  E1x  E1y
double occ                     3    1    0
single occ                     0    0    1
**** MO energy ****
                          Roothaan           | alpha              | beta
MO #1   (A1  #1 ) energy= -20.6442533570447  | -20.6609725544619  | -20.6275341596274  occ= 2
MO #2   (A1  #2 ) energy= -1.32843630949419  | -1.39784342398851  | -1.25902919499987  occ= 2
MO #3   (A1  #3 ) energy= -0.660883085146462 | -0.682787092424955 | -0.638979077867968 occ= 2
MO #4   (E1x #1 ) energy= -0.543526631399703 | -0.562873032524819 | -0.524180230274587 occ= 2
MO #5   (E1y #1 ) energy= -0.254217560944108 | -0.652762823270882 | 0.144327701382661  occ= 1
MO #6   (A1  #4 ) energy= 0.042219035552161  | 0.0412939411326045 | 0.0431441299717179 occ= 0
MO #7   (E1y #2 ) energy= 0.241082847419671  | 0.229356248167172  | 0.25280944667217   occ= 0
MO #8   (A1  #5 ) energy= 0.246075607584704  | 0.244396937108161  | 0.247754278061248  occ= 0
MO #9   (E1x #2 ) energy= 0.246137763832104  | 0.244543981704501  | 0.247731545959706  occ= 0
MO #10  (A1  #6 ) energy= 0.282062261652718  | 0.276216177616134  | 0.287908345689298  occ= 0
MO #11  (A1  #7 ) energy= 0.360595041478274  | 0.356476527396218  | 0.364713555560337  occ= 0
MO #12  (A1  #8 ) energy= 1.29713984319468   | 1.28947526799673   | 1.30480441839265   occ= 0
MO #13  (E1x #3 ) energy= 1.37853625572703   | 1.37046234662246   | 1.3866101648316    occ= 0
MO #14  (E1y #3 ) energy= 1.38223624942476   | 1.31197073135121   | 1.45250176749831   occ= 0
MO #15  (A1  #9 ) energy= 1.43704599812946   | 1.42916096187769   | 1.44493103438122   occ= 0
MO #16  (A1  #10) energy= 1.79723804135963   | 1.77860648618795   | 1.8158695965313    occ= 0
 ** Mulliken pop on meta-lowdin orthogonal AOs  **
 ** Mulliken pop  **
pop of  0 O 1s        1.99999
pop of  0 O 2s        1.82134
pop of  0 O 3s        0.00862
pop of  0 O 4s        0.00250
pop of  0 O 2px       1.99670
pop of  0 O 2py       0.99828
pop of  0 O 2pz       1.50956
pop of  0 O 3px       0.00191
pop of  0 O 3py       0.00025
pop of  0 O 3pz       0.00284
pop of  0 O 4px       0.00139
pop of  0 O 4py       0.00148
pop of  0 O 4pz       0.00186
pop of  1 H 1s        0.62973
pop of  1 H 2s        0.01478
pop of  1 H 3s        0.00877
 ** Mulliken atomic charges  **
charge of  0O =     -0.34672
charge of  1H =      0.34672
Dipole moment(X, Y, Z, Debye):  0.00000,  0.00000,  2.19192
#INFO: **** input file is /Users/mario/Documents/GitHub/UniMi/tesi_alessandro_tammaro/nevpt2/6-31ppg/radical/R_0.96/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,0.96)]],basis='6-31++g',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % BO_IAO_external_solver.solve_with_fci()[0])

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_external_solver.solve_with_fci()[0])

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64')  Threads 1
Python 3.9.7 | packaged by conda-forge | (default, Sep  2 2021, 17:58:46) 
[Clang 11.1.0 ]
numpy 1.21.2  scipy 1.7.1
Date: Wed Dec 29 22:41:13 2021
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/caltech_entanglement/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        13.97

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpbqpka9ow
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpbqpka9ow
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.254217560944116  LUMO = 0.419032360761054
Initial guess E= -75.3669216057799  |g|= 0.000419705
macro= 0  E= -75.3669216935135  delta_E= -8.77336e-08  |g|= 0.000419705  1 KF 4 JK
macro= 1  E= -75.3669216935134  delta_E= 2.84217e-14  |g|= 2.4455e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3669216935134  |g|= 2.4455e-08  total 3 KF 9 JK
converged SCF energy = -75.3669216935134
#INFO: **** input file is /Users/mario/Documents/GitHub/UniMi/tesi_alessandro_tammaro/nevpt2/6-31ppg/radical/R_0.96/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,0.96)]],basis='6-31++g',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % BO_IAO_external_solver.solve_with_fci()[0])

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_external_solver.solve_with_fci()[0])

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64')  Threads 1
Python 3.9.7 | packaged by conda-forge | (default, Sep  2 2021, 17:58:46) 
[Clang 11.1.0 ]
numpy 1.21.2  scipy 1.7.1
Date: Wed Dec 29 22:41:13 2021
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/caltech_entanglement/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        14.64

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp4e4tdvna
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp4e4tdvna
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.254217925096679  LUMO = 0.419032506816449
Initial guess E= -75.3669216059109  |g|= 0.000418371
macro= 0  E= -75.3669216935135  delta_E= -8.76026e-08  |g|= 0.000418371  1 KF 3 JK
macro= 1  E= -75.3669216935135  delta_E= 0  |g|= 2.43891e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3669216935135  |g|= 2.43891e-08  total 3 KF 8 JK
converged SCF energy = -75.3669216935135
#INFO: **** input file is /Users/mario/Documents/GitHub/UniMi/tesi_alessandro_tammaro/nevpt2/6-31ppg/radical/R_0.96/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,0.96)]],basis='6-31++g',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % BO_IAO_external_solver.solve_with_fci()[0])

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_external_solver.solve_with_fci()[0])

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64')  Threads 1
Python 3.9.7 | packaged by conda-forge | (default, Sep  2 2021, 17:58:46) 
[Clang 11.1.0 ]
numpy 1.21.2  scipy 1.7.1
Date: Wed Dec 29 22:41:14 2021
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/caltech_entanglement/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        15.01

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpub470e9s
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpub470e9s
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.254351071542211  LUMO = 0.042219312317304
Initial guess E= -75.3670419637937  |g|= 0.00659267
macro= 0  E= -75.3670537469388  delta_E= -1.17831e-05  |g|= 4.48851e-05  2 KF 6 JK
macro= 1  E= -75.3670537469388  delta_E= 0  |g|= 3.08394e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3670537469388  |g|= 3.08394e-06  total 4 KF 11 JK
converged SCF energy = -75.3670537469388
u+d contributions  -0.027396621466100904
uu+dd contributions  -0.038533950411007455
ud contributions  -0.0718133422223058
u+d contributions  -0.004967882150255773
uu+dd contributions  -0.016039178158209003
ud contributions  -0.04919647436928285
#INFO: **** input file is /Users/mario/Documents/GitHub/UniMi/tesi_alessandro_tammaro/nevpt2/6-31ppg/radical/R_0.96/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,0.96)]],basis='6-31++g',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % BO_IAO_external_solver.solve_with_fci()[0])

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_external_solver.solve_with_fci()[0])

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64')  Threads 1
Python 3.9.7 | packaged by conda-forge | (default, Sep  2 2021, 17:58:46) 
[Clang 11.1.0 ]
numpy 1.21.2  scipy 1.7.1
Date: Wed Dec 29 22:41:43 2021
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/caltech_entanglement/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        55.70

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp7rv7x0ux
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 2  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp7rv7x0ux
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.253875733048217  LUMO = 0.41911398404128
Initial guess E= -75.366921550017  |g|= 0.00049871
macro= 0  E= -75.3669216935135  delta_E= -1.43496e-07  |g|= 0.00049871  1 KF 2 JK
macro= 1  E= -75.3669216935135  delta_E= 0  |g|= 5.42287e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3669216935135  |g|= 5.42287e-08  total 3 KF 7 JK
converged SCF energy = -75.3669216935135
#INFO: **** input file is /Users/mario/Documents/GitHub/UniMi/tesi_alessandro_tammaro/nevpt2/6-31ppg/radical/R_0.96/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,0.96)]],basis='6-31++g',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % BO_IAO_external_solver.solve_with_fci()[0])

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_external_solver.solve_with_fci()[0])

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64')  Threads 1
Python 3.9.7 | packaged by conda-forge | (default, Sep  2 2021, 17:58:46) 
[Clang 11.1.0 ]
numpy 1.21.2  scipy 1.7.1
Date: Wed Dec 29 22:41:43 2021
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/caltech_entanglement/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        56.20

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpz868dw67
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 2  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpz868dw67
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.254007064940664  LUMO = 0.0422090933800425
Initial guess E= -75.3670443215311  |g|= 0.00468469
macro= 0  E= -75.3670528124291  delta_E= -8.4909e-06  |g|= 1.59365e-05  2 KF 6 JK
macro= 1  E= -75.3670528124291  delta_E= 0  |g|= 1.1594e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3670528124291  |g|= 1.1594e-06  total 4 KF 11 JK
converged SCF energy = -75.3670528124291
u+d contributions  -0.013248223721962016
uu+dd contributions  -0.02154850064750958
ud contributions  -0.04502622931690244
u+d contributions  -0.003971972615441509
uu+dd contributions  -0.012257977311242967
ud contributions  -0.03573128862046875
----- VQE data ------
target_sector:  None
optimizer:  bfgs
max_iter:  1000
instance:  statevector_simulator
shots:  1000
ansatz:  q_uccsd
initial_point:  None


 >>>>> AM I PREPARED?  False
qse operators prepared for  u
qse operators prepared for  d
qse operators prepared for  uu
qse operators prepared for  dd
qse operators prepared for  ud
In the tapering subroutine, i=0, E(i)=-74.815616, i_min=-1
In the tapering subroutine, i=1, E(i)=-75.202798, i_min=0
In the tapering subroutine, i=2, E(i)=-75.366922, i_min=1
In the tapering subroutine, i=3, E(i)=-74.935769, i_min=2
In the tapering subroutine, i=4, E(i)=-75.363162, i_min=2
In the tapering subroutine, i=5, E(i)=-74.924336, i_min=2
In the tapering subroutine, i=6, E(i)=-74.805032, i_min=2
In the tapering subroutine, i=7, E(i)=-74.962846, i_min=2
In the tapering subroutine, i=8, E(i)=-75.202798, i_min=2
In the tapering subroutine, i=9, E(i)=-75.221574, i_min=2
In the tapering subroutine, i=10, E(i)=-74.959929, i_min=2
In the tapering subroutine, i=11, E(i)=-75.366922, i_min=2
In the tapering subroutine, i=12, E(i)=-74.947617, i_min=2
In the tapering subroutine, i=13, E(i)=-75.363162, i_min=2
In the tapering subroutine, i=14, E(i)=-74.962846, i_min=2
In the tapering subroutine, i=15, E(i)=-74.843725, i_min=2
after tapering qubits(H) =  4
qse operators tapered for  hamiltonian
qse operators tapered for  qse_s_u
qse operators tapered for  qse_h_u
qse operators tapered for  qse_s_d
qse operators tapered for  qse_h_d
qse operators tapered for  qse_s_uu
qse operators tapered for  qse_h_uu
qse operators tapered for  qse_s_dd
qse operators tapered for  qse_h_dd
qse operators tapered for  qse_s_ud
qse operators tapered for  qse_h_ud
          
q_0: ─────
     ┌───┐
q_1: ┤ X ├
     └───┘
q_2: ─────
          
q_3: ─────
          
u+d contributions  -0.003971893496431293
uu+dd contributions  -0.012257927979702666
ud contributions  -0.03571670875146715
 >>>>> AM I PREPARED?  True
          
q_0: ─────
     ┌───┐
q_1: ┤ X ├
     └───┘
q_2: ─────
          
q_3: ─────
          
u+d contributions  -0.00390786182407784
uu+dd contributions  -0.012196109759278533
ud contributions  -0.035659737070925394
 >>>>> AM I PREPARED?  True
          
q_0: ─────
     ┌───┐
q_1: ┤ X ├
     └───┘
q_2: ─────
          
q_3: ─────
          
u+d contributions  -0.00390786182407784
uu+dd contributions  -0.012196109759278533
ud contributions  -0.035659737070925394
