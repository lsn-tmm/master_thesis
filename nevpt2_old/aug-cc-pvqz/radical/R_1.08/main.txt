#INFO: **** input file is /Users/mario/Documents/GitHub/UniMi/tesi_alessandro_tammaro/nevpt2/aug-cc-pvqz/radical/R_1.08/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,1.08)]],basis='aug-cc-pvqz',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
VQE_settings.initial_point = np.load('vqe_su2_output.npy',allow_pickle=True).item()['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Sun Jan  2 21:41:23 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 9
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry True subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   1.080000000000 AA    0.000000000000   0.000000000000   2.040904214530 Bohr

nuclear repulsion = 3.919831192
point group symmetry = Coov
num. orbitals of irrep A1 = 34
num. orbitals of irrep E1x = 23
num. orbitals of irrep E1y = 23
num. orbitals of irrep E2x = 14
num. orbitals of irrep E2y = 14
num. orbitals of irrep E3x = 7
num. orbitals of irrep E3y = 7
num. orbitals of irrep E4x = 2
num. orbitals of irrep E4y = 2
number of shells = 33
number of NR pGTOs = 141
number of NR cGTOs = 126
basis = aug-cc-pvqz
ecp = {}
CPU time:         4.36
Freeze 0 electrons in irreps []
    9 free electrons in irreps A1 E1x E1y E2x E2y E3x E3y E4x E4y




******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> ********
method = SymAdaptedROHF-ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp0fny8d_w
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp0fny8d_w
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (E1y) = -0.42106556747806  LUMO (A1) = 0.0203729516267719
Initial guess E= -75.394054170509  |g|= 0.21761
macro= 0  E= -75.4059243095911  delta_E= -0.0118701  |g|= 0.21761  2 KF 5 JK
macro= 1  E= -75.4061848244279  delta_E= -0.000260515  |g|= 0.0916281  2 KF 5 JK
macro= 2  E= -75.4046577895873  delta_E= 0.00152703  |g|= 0.0623215  2 KF 5 JK
macro= 3  E= -75.4059892752755  delta_E= -0.00133149  |g|= 0.11118  2 KF 5 JK
macro= 4  E= -75.4046761346513  delta_E= 0.00131314  |g|= 0.0625507  2 KF 5 JK
macro= 5  E= -75.406036916335  delta_E= -0.00136078  |g|= 0.110029  2 KF 5 JK
macro= 6  E= -75.404715609937  delta_E= 0.00132131  |g|= 0.0634262  2 KF 5 JK
macro= 7  E= -75.406054329005  delta_E= -0.00133872  |g|= 0.109845  2 KF 5 JK
macro= 8  E= -75.4046499715426  delta_E= 0.00140436  |g|= 0.0630707  2 KF 5 JK
macro= 9  E= -75.4060571475314  delta_E= -0.00140718  |g|= 0.111023  2 KF 5 JK
macro= 10  E= -75.4046437868986  delta_E= 0.00141336  |g|= 0.0631  2 KF 5 JK
macro= 11  E= -75.4060646576187  delta_E= -0.00142087  |g|= 0.111149  2 KF 5 JK
macro= 12  E= -75.4046096430551  delta_E= 0.00145501  |g|= 0.0629308  2 KF 5 JK
macro= 13  E= -75.4060700013175  delta_E= -0.00146036  |g|= 0.111714  2 KF 5 JK
macro= 14  E= -75.404588567358  delta_E= 0.00148143  |g|= 0.0628364  2 KF 5 JK
macro= 15  E= -75.4060763708488  delta_E= -0.0014878  |g|= 0.112054  2 KF 5 JK
macro= 16  E= -75.4045615822181  delta_E= 0.00151479  |g|= 0.0626896  2 KF 5 JK
macro= 17  E= -75.4060823086883  delta_E= -0.00152073  |g|= 0.112481  2 KF 5 JK
macro= 18  E= -75.4045375879052  delta_E= 0.00154472  |g|= 0.0625582  2 KF 5 JK
macro= 19  E= -75.4060884903575  delta_E= -0.0015509  |g|= 0.112856  2 KF 5 JK
macro= 20  E= -75.4045125070506  delta_E= 0.00157598  |g|= 0.0624113  2 KF 5 JK
macro= 21  E= -75.4060945932063  delta_E= -0.00158209  |g|= 0.113241  2 KF 5 JK
macro= 22  E= -75.4044882696075  delta_E= 0.00160632  |g|= 0.0622647  2 KF 5 JK
macro= 23  E= -75.4061007557029  delta_E= -0.00161249  |g|= 0.113609  2 KF 5 JK
macro= 24  E= -75.4044640305084  delta_E= 0.00163673  |g|= 0.0621113  2 KF 5 JK
macro= 25  E= -75.4061069032975  delta_E= -0.00164287  |g|= 0.113971  2 KF 5 JK
macro= 26  E= -75.4044402171951  delta_E= 0.00166669  |g|= 0.0619548  2 KF 5 JK
macro= 27  E= -75.40611305876  delta_E= -0.00167284  |g|= 0.114323  2 KF 5 JK
macro= 28  E= -75.4044166716865  delta_E= 0.00169639  |g|= 0.0617937  2 KF 5 JK
macro= 29  E= -75.4061192004264  delta_E= -0.00170253  |g|= 0.114666  2 KF 5 JK
macro= 30  E= -75.4043934998926  delta_E= 0.0017257  |g|= 0.0616292  2 KF 5 JK
macro= 31  E= -75.406125326684  delta_E= -0.00173183  |g|= 0.115  2 KF 5 JK
macro= 32  E= -75.4043706848801  delta_E= 0.00175464  |g|= 0.061461  2 KF 5 JK
macro= 33  E= -75.4061314269492  delta_E= -0.00176074  |g|= 0.115324  2 KF 5 JK
macro= 34  E= -75.4043482622145  delta_E= 0.00178316  |g|= 0.0612897  2 KF 5 JK
macro= 35  E= -75.4061374947603  delta_E= -0.00178923  |g|= 0.115639  2 KF 5 JK
macro= 36  E= -75.4043262407822  delta_E= 0.00181125  |g|= 0.0611155  2 KF 5 JK
macro= 37  E= -75.4061435220233  delta_E= -0.00181728  |g|= 0.115945  2 KF 5 JK
macro= 38  E= -75.4043046384406  delta_E= 0.00183888  |g|= 0.0609386  2 KF 5 JK
macro= 39  E= -75.4061495016295  delta_E= -0.00184486  |g|= 0.116242  2 KF 5 JK
macro= 40  E= -75.4042834660989  delta_E= 0.00186604  |g|= 0.0607594  2 KF 5 JK
macro= 41  E= -75.406155426377  delta_E= -0.00187196  |g|= 0.116529  2 KF 5 JK
macro= 42  E= -75.404262734904  delta_E= 0.00189269  |g|= 0.0605781  2 KF 5 JK
macro= 43  E= -75.4061612895039  delta_E= -0.00189855  |g|= 0.116807  2 KF 5 JK
macro= 44  E= -75.4042424531378  delta_E= 0.00191884  |g|= 0.0603952  2 KF 5 JK
macro= 45  E= -75.4039531663117  delta_E= 0.000289287  |g|= 0.117077  2 KF 5 JK
macro= 46  E= -75.4053677244271  delta_E= -0.00141456  |g|= 0.103504  2 KF 5 JK
macro= 47  E= -75.4037535495952  delta_E= 0.00161417  |g|= 0.0983518  2 KF 5 JK
macro= 48  E= -75.4052026592193  delta_E= -0.00144911  |g|= 0.105773  2 KF 5 JK
macro= 49  E= -75.4036792707185  delta_E= 0.00152339  |g|= 0.102141  2 KF 5 JK
Canonicalize SCF orbitals
macro X = 50  E=-75.4036792707185  |g|= 0.102141  total 101 KF 301 JK
SCF not converged.
SCF energy = -75.4036792707185

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    9 free electrons in irreps A1 E1x E1y E2x E2y E3x E3y E4x E4y




******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> ********
method = SymAdaptedROHF-ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp0fny8d_w
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp0fny8d_w
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (E1y) = -0.279599750778496  LUMO (A1) = 0.0261514831932063
Initial guess E= -75.406722586082  |g|= 0.0782559
macro= 0  E= -75.4077352079355  delta_E= -0.00101262  |g|= 0.0782559  2 KF 5 JK
macro= 1  E= -75.4077535200041  delta_E= -1.83121e-05  |g|= 0.0226597  2 KF 5 JK
macro= 2  E= -75.4075775262952  delta_E= 0.000175994  |g|= 0.0157821  2 KF 5 JK
macro= 3  E= -75.4077551905305  delta_E= -0.000177664  |g|= 0.0334598  2 KF 5 JK
macro= 4  E= -75.4076163693343  delta_E= 0.000138821  |g|= 0.0118989  2 KF 5 JK
macro= 5  E= -75.407747370916  delta_E= -0.000131002  |g|= 0.0303959  2 KF 5 JK
macro= 6  E= -75.4075908034507  delta_E= 0.000156567  |g|= 0.0178233  2 KF 5 JK
macro= 7  E= -75.4077375390401  delta_E= -0.000146736  |g|= 0.0324815  2 KF 5 JK
macro= 8  E= -75.4076709261174  delta_E= 6.66129e-05  |g|= 0.0168916  2 KF 5 JK
macro= 9  E= -75.4077407636152  delta_E= -6.98375e-05  |g|= 0.0270756  2 KF 5 JK
macro= 10  E= -75.4076547123498  delta_E= 8.60513e-05  |g|= 0.0156766  2 KF 5 JK
macro= 11  E= -75.4077404070309  delta_E= -8.56947e-05  |g|= 0.0277286  2 KF 5 JK
macro= 12  E= -75.4076524559412  delta_E= 8.79511e-05  |g|= 0.0161151  2 KF 5 JK
macro= 13  E= -75.4077407019546  delta_E= -8.8246e-05  |g|= 0.0279105  2 KF 5 JK
macro= 14  E= -75.4076503369185  delta_E= 9.0365e-05  |g|= 0.0161853  2 KF 5 JK
macro= 15  E= -75.4077408966781  delta_E= -9.05598e-05  |g|= 0.0280854  2 KF 5 JK
macro= 16  E= -75.4076495309535  delta_E= 9.13657e-05  |g|= 0.0162276  2 KF 5 JK
macro= 17  E= -75.4077409807058  delta_E= -9.14498e-05  |g|= 0.0281641  2 KF 5 JK
macro= 18  E= -75.4076493360417  delta_E= 9.16447e-05  |g|= 0.0162317  2 KF 5 JK
macro= 19  E= -75.4077410220928  delta_E= -9.16861e-05  |g|= 0.0281924  2 KF 5 JK
macro= 20  E= -75.4076492721795  delta_E= 9.17499e-05  |g|= 0.0162217  2 KF 5 JK
macro= 21  E= -75.4077410638894  delta_E= -9.17917e-05  |g|= 0.0282072  2 KF 5 JK
macro= 22  E= -75.4076491657068  delta_E= 9.18982e-05  |g|= 0.0162106  2 KF 5 JK
macro= 23  E= -75.4077411147931  delta_E= -9.19491e-05  |g|= 0.0282233  2 KF 5 JK
macro= 24  E= -75.4076490086651  delta_E= 9.21061e-05  |g|= 0.0162015  2 KF 5 JK
macro= 25  E= -75.4077411712416  delta_E= -9.21626e-05  |g|= 0.0282426  2 KF 5 JK
macro= 26  E= -75.4076488297803  delta_E= 9.23415e-05  |g|= 0.016194  2 KF 5 JK
macro= 27  E= -75.4077412294588  delta_E= -9.23997e-05  |g|= 0.0282635  2 KF 5 JK
macro= 28  E= -75.4076486469452  delta_E= 9.25825e-05  |g|= 0.0161869  2 KF 5 JK
macro= 29  E= -75.4077412879036  delta_E= -9.2641e-05  |g|= 0.0282848  2 KF 5 JK
macro= 30  E= -75.4076484650458  delta_E= 9.28229e-05  |g|= 0.0161796  2 KF 5 JK
macro= 31  E= -75.407741346394  delta_E= -9.28813e-05  |g|= 0.028306  2 KF 5 JK
macro= 32  E= -75.407648283558  delta_E= 9.30628e-05  |g|= 0.0161721  2 KF 5 JK
macro= 33  E= -75.4077414051173  delta_E= -9.31216e-05  |g|= 0.0283272  2 KF 5 JK
macro= 34  E= -75.4076481012899  delta_E= 9.33038e-05  |g|= 0.0161645  2 KF 5 JK
macro= 35  E= -75.4077414642115  delta_E= -9.33629e-05  |g|= 0.0283484  2 KF 5 JK
macro= 36  E= -75.4076479176874  delta_E= 9.35465e-05  |g|= 0.0161567  2 KF 5 JK
macro= 37  E= -75.4077415237111  delta_E= -9.3606e-05  |g|= 0.0283698  2 KF 5 JK
macro= 38  E= -75.407647732686  delta_E= 9.3791e-05  |g|= 0.0161487  2 KF 5 JK
macro= 39  E= -75.4077415836009  delta_E= -9.38509e-05  |g|= 0.0283912  2 KF 5 JK
macro= 40  E= -75.4076475463798  delta_E= 9.40372e-05  |g|= 0.0161407  2 KF 5 JK
macro= 41  E= -75.407741643857  delta_E= -9.40975e-05  |g|= 0.0284127  2 KF 5 JK
macro= 42  E= -75.4076473588583  delta_E= 9.4285e-05  |g|= 0.0161324  2 KF 5 JK
macro= 43  E= -75.4077417044595  delta_E= -9.43456e-05  |g|= 0.0284342  2 KF 5 JK
macro= 44  E= -75.4076471701795  delta_E= 9.45343e-05  |g|= 0.0161241  2 KF 5 JK
macro= 45  E= -75.4077417653938  delta_E= -9.45952e-05  |g|= 0.0284559  2 KF 5 JK
macro= 46  E= -75.4076469803821  delta_E= 9.4785e-05  |g|= 0.0161156  2 KF 5 JK
macro= 47  E= -75.407741826647  delta_E= -9.48463e-05  |g|= 0.0284776  2 KF 5 JK
macro= 48  E= -75.407646789503  delta_E= 9.50371e-05  |g|= 0.016107  2 KF 5 JK
macro= 49  E= -75.4077418882055  delta_E= -9.50987e-05  |g|= 0.0284993  2 KF 5 JK
Canonicalize SCF orbitals
macro X = 50  E=-75.4077418882055  |g|= 0.0284993  total 101 KF 301 JK
SCF not converged.
SCF energy = -75.4077418882055
**** SCF Summaries ****
Total Energy =                         -75.407741888205464
Nuclear Repulsion Energy =               3.919831192000001
One-electron Energy =                 -111.846262691732818
Two-electron Energy =                   32.518689611527350
Wave-function symmetry = Coov
occupancy for each irrep:     A1  E1x  E1y  E2x  E2y  E3x  E3y  E4x  E4y
double occ                     3    1    0    0    0    0    0    0    0
single occ                     0    0    1    0    0    0    0    0    0
**** MO energy ****
                          Roothaan           | alpha              | beta
MO #1   (A1  #1 ) energy= -20.6347879610457  | -20.6517671771742  | -20.6178087449172  occ= 2
MO #2   (A1  #2 ) energy= -1.28021955498497  | -1.35235597042463  | -1.20808313954532  occ= 2
MO #3   (A1  #3 ) energy= -0.632202991698701 | -0.650909957913647 | -0.613496025483756 occ= 2
MO #4   (E1x #1 ) energy= -0.535178969830096 | -0.554376786654541 | -0.51598115300565  occ= 2
MO #5   (E1y #1 ) energy= -0.245441315613436 | -0.644104513559112 | 0.153221882332242  occ= 1
MO #6   (A1  #4 ) energy= 0.0266590042851349 | 0.0259963946880457 | 0.0273216138822216 occ= 0
MO #7   (A1  #5 ) energy= 0.112088742289977  | 0.111111375666914  | 0.11306610891301   occ= 0
MO #8   (E1y #2 ) energy= 0.137203373740713  | 0.133016917285174  | 0.141389830196252  occ= 0
MO #9   (E1x #2 ) energy= 0.140978500813483  | 0.140387754603222  | 0.141569247023743  occ= 0
MO #10  (A1  #6 ) energy= 0.157104755873039  | 0.155127516502475  | 0.159081995243595  occ= 0
MO #11  (E1y #3 ) energy= 0.211120214367364  | 0.209603864174742  | 0.212636564559983  occ= 0
MO #12  (E1x #3 ) energy= 0.213840350328842  | 0.213638598772652  | 0.214042101885029  occ= 0
MO #13  (A1  #7 ) energy= 0.22267311103143   | 0.220920991719948  | 0.224425230342895  occ= 0
MO #14  (A1  #8 ) energy= 0.327524226420062  | 0.323946751391253  | 0.331101701448769  occ= 0
MO #15  (E2x #1 ) energy= 0.478650640535609  | 0.473802202728691  | 0.483499078342529  occ= 0
MO #16  (E2y #1 ) energy= 0.478650640535609  | 0.47380220272869   | 0.483499078342528  occ= 0
MO #17  (A1  #9 ) energy= 0.498093855174648  | 0.49483221123141   | 0.501355499117783  occ= 0
MO #18  (E1y #4 ) energy= 0.54398114915119   | 0.538838114146929  | 0.549124184155442  occ= 0
MO #19  (E1x #4 ) energy= 0.548594408907973  | 0.547912213289957  | 0.549276604525989  occ= 0
MO #20  (A1  #10) energy= 0.63298334118146   | 0.631399705644582  | 0.634566976718363  occ= 0
MO #21  (E1y #5 ) energy= 0.649310983785896  | 0.637251439598078  | 0.66137052797371   occ= 0
MO #22  (E1x #5 ) energy= 0.652417426338257  | 0.650924255987135  | 0.653910596689381  occ= 0
MO #23  (E2x #2 ) energy= 0.687387212868672  | 0.68681576797514   | 0.687958657762199  occ= 0
MO #24  (E2y #2 ) energy= 0.687387212868658  | 0.686815767975126  | 0.687958657762185  occ= 0
MO #25  (A1  #11) energy= 0.701356160102771  | 0.69759065644357   | 0.705121663761966  occ= 0
MO #26  (E1y #6 ) energy= 0.757298570941044  | 0.734260789948084  | 0.780336351934007  occ= 0
MO #27  (E1x #6 ) energy= 0.762283701390604  | 0.759508624915375  | 0.765058777865832  occ= 0
MO #28  (A1  #12) energy= 0.78319427431829   | 0.779158419137707  | 0.787230129499037  occ= 0
MO #29  (E1y #7 ) energy= 1.11885030625524   | 1.10934990641098   | 1.12835070609948   occ= 0
MO #30  (E1x #7 ) energy= 1.125151384712     | 1.12385754730876   | 1.12644522211525   occ= 0
MO #31  (A1  #13) energy= 1.219444700793     | 1.2109851740325    | 1.22790422755351   occ= 0
MO #32  (E3x #1 ) energy= 1.32350952662045   | 1.31908407663134   | 1.32793497660957   occ= 0
MO #33  (E3y #1 ) energy= 1.32350952662046   | 1.31908407663134   | 1.32793497660957   occ= 0
MO #34  (A1  #14) energy= 1.40528936421094   | 1.39971711996478   | 1.41086160845706   occ= 0
MO #35  (E2x #3 ) energy= 1.49846658855528   | 1.47507989301926   | 1.5218532840913    occ= 0
MO #36  (E2y #3 ) energy= 1.49846658855528   | 1.47507989301927   | 1.5218532840913    occ= 0
MO #37  (E1y #8 ) energy= 1.53952433892207   | 1.53060069140747   | 1.54844798643666   occ= 0
MO #38  (E1x #8 ) energy= 1.55345644534525   | 1.55192351608453   | 1.55498937460598   occ= 0
MO #39  (E2x #4 ) energy= 1.56159761275489   | 1.5579458876432    | 1.56524933786658   occ= 0
MO #40  (E2y #4 ) energy= 1.56159761275488   | 1.55794588764319   | 1.56524933786657   occ= 0
MO #41  (A1  #15) energy= 1.61146385823255   | 1.60761095940365   | 1.61531675706146   occ= 0
MO #42  (A1  #16) energy= 1.67991925631828   | 1.67782871938543   | 1.68200979325135   occ= 0
MO #43  (E3x #2 ) energy= 1.70419321244135   | 1.7029552723355    | 1.70543115254721   occ= 0
MO #44  (E3y #2 ) energy= 1.70419321244136   | 1.70295527233551   | 1.70543115254721   occ= 0
MO #45  (E1y #9 ) energy= 1.73465722697939   | 1.72422697863181   | 1.74508747532696   occ= 0
MO #46  (E1x #9 ) energy= 1.74064532491201   | 1.739190440268     | 1.74210020955603   occ= 0
MO #47  (E2x #5 ) energy= 1.90808395039288   | 1.90461190154127   | 1.91155599924451   occ= 0
MO #48  (E2y #5 ) energy= 1.90808395039287   | 1.90461190154125   | 1.91155599924449   occ= 0
MO #49  (A1  #17) energy= 1.94885244954637   | 1.94470956340235   | 1.95299533569018   occ= 0
MO #50  (E1y #10) energy= 2.10074849718701   | 2.08688422233105   | 2.11461277204295   occ= 0
MO #51  (E1x #10) energy= 2.11327078324542   | 2.11097571640528   | 2.11556585008555   occ= 0
MO #52  (A1  #18) energy= 2.299919542862     | 2.29460388077641   | 2.30523520494758   occ= 0
MO #53  (E1y #11) energy= 2.58936010058459   | 2.54619560524858   | 2.63252459592059   occ= 0
MO #54  (E1x #11) energy= 2.59849055268255   | 2.59271848317823   | 2.60426262218687   occ= 0
MO #55  (E2x #6 ) energy= 2.79957898605816   | 2.79534519434988   | 2.80381277776644   occ= 0
MO #56  (E2y #6 ) energy= 2.79957898605816   | 2.79534519434989   | 2.80381277776645   occ= 0
MO #57  (E1y #12) energy= 2.87617425193993   | 2.87133420189214   | 2.88101430198772   occ= 0
MO #58  (E1x #12) energy= 2.88768138002695   | 2.88678331492014   | 2.88857944513376   occ= 0
MO #59  (A1  #19) energy= 2.99121503013533   | 2.98739820732279   | 2.9950318529481    occ= 0
MO #60  (A1  #20) energy= 3.52247103229184   | 3.51431726104395   | 3.53062480353986   occ= 0
MO #61  (E4x #1 ) energy= 3.65966546623704   | 3.65241780806524   | 3.66691312440884   occ= 0
MO #62  (E4y #1 ) energy= 3.65966546623703   | 3.65241780806523   | 3.66691312440883   occ= 0
MO #63  (E1y #13) energy= 3.74632341533052   | 3.72545012261174   | 3.76719670804929   occ= 0
MO #64  (E1x #13) energy= 3.76975586970342   | 3.7656966771807    | 3.77381506222614   occ= 0
MO #65  (E3x #3 ) energy= 3.86544347875988   | 3.85827125028636   | 3.8726157072334    occ= 0
MO #66  (E3y #3 ) energy= 3.86544347875987   | 3.85827125028635   | 3.87261570723339   occ= 0
MO #67  (A1  #21) energy= 3.97677686905388   | 3.96756235497962   | 3.98599138312857   occ= 0
MO #68  (E3x #4 ) energy= 4.08841067498882   | 4.07192468998807   | 4.10489665998957   occ= 0
MO #69  (E3y #4 ) energy= 4.08841067498882   | 4.07192468998807   | 4.10489665998957   occ= 0
MO #70  (E2x #7 ) energy= 4.17267705531425   | 4.16208382224306   | 4.18327028838545   occ= 0
MO #71  (E2y #7 ) energy= 4.17267705531424   | 4.16208382224305   | 4.18327028838544   occ= 0
MO #72  (E1y #14) energy= 4.21382388636782   | 4.20049366438951   | 4.22715410834614   occ= 0
MO #73  (A1  #22) energy= 4.21989600565203   | 4.20712333533386   | 4.2326686759699    occ= 0
MO #74  (E2x #8 ) energy= 4.22835016100726   | 4.20307042562346   | 4.25362989639107   occ= 0
MO #75  (E2y #8 ) energy= 4.22835016100726   | 4.20307042562346   | 4.25362989639107   occ= 0
MO #76  (E1x #14) energy= 4.23825571386938   | 4.23594985698313   | 4.24056157075562   occ= 0
MO #77  (A1  #23) energy= 4.32331046938096   | 4.3179393456273    | 4.32868159313467   occ= 0
MO #78  (E1y #15) energy= 4.65507123880928   | 4.62697390113282   | 4.68316857648576   occ= 0
MO #79  (E1x #15) energy= 4.67874919178651   | 4.67382458828974   | 4.68367379528326   occ= 0
MO #80  (E2x #9 ) energy= 4.72210269064646   | 4.70272804399716   | 4.74147733729575   occ= 0
MO #81  (E2y #9 ) energy= 4.72210269064645   | 4.70272804399716   | 4.74147733729574   occ= 0
MO #82  (A1  #24) energy= 5.23291313066346   | 5.22685039852573   | 5.23897586280124   occ= 0
MO #83  (E1y #16) energy= 5.35270260989093   | 5.33766041281047   | 5.3677448069714    occ= 0
MO #84  (E1x #16) energy= 5.37772291537374   | 5.3747600220613    | 5.38068580868618   occ= 0
MO #85  (A1  #25) energy= 5.61959880932757   | 5.60802225557693   | 5.63117536307801   occ= 0
MO #86  (E3x #5 ) energy= 6.60753147339283   | 6.6065827807066    | 6.60848016607906   occ= 0
MO #87  (E3y #5 ) energy= 6.60753147339283   | 6.6065827807066    | 6.60848016607907   occ= 0
MO #88  (E2x #10) energy= 7.39192701476643   | 7.38955257187136   | 7.39430145766152   occ= 0
MO #89  (E2y #10) energy= 7.39192701476643   | 7.38955257187136   | 7.39430145766151   occ= 0
MO #90  (A1  #26) energy= 7.46465709237744   | 7.46219550297971   | 7.46711868177518   occ= 0
MO #91  (E1y #17) energy= 7.68116258553818   | 7.67814250291945   | 7.68418266815691   occ= 0
MO #92  (E1x #17) energy= 7.69134231061814   | 7.69068056257751   | 7.69200405865878   occ= 0
MO #93  (A1  #27) energy= 8.26656984951225   | 8.26459836317569   | 8.26854133584886   occ= 0
MO #94  (E2x #11) energy= 8.51006185749882   | 8.50931025162443   | 8.5108134633732    occ= 0
MO #95  (E2y #11) energy= 8.51006185749882   | 8.50931025162444   | 8.51081346337321   occ= 0
MO #96  (E1y #18) energy= 8.79206939414831   | 8.78913881377519   | 8.79499997452144   occ= 0
MO #97  (E1x #18) energy= 8.80191636539377   | 8.80131809662297   | 8.80251463416459   occ= 0
MO #98  (E1y #19) energy= 9.29260608979925   | 9.2852921380679    | 9.29992004153065   occ= 0
MO #99  (E1x #19) energy= 9.30980288518613   | 9.30816617049884   | 9.31143959987341   occ= 0
MO #100 (A1  #28) energy= 9.48913886223114   | 9.48629100760186   | 9.49198671686019   occ= 0
MO #101 (E4x #2 ) energy= 10.613227988256    | 10.5969842548246   | 10.6294717216875   occ= 0
MO #102 (E4y #2 ) energy= 10.613227988256    | 10.5969842548245   | 10.6294717216874   occ= 0
MO #103 (E3x #6 ) energy= 10.7190920228311   | 10.7064076745391   | 10.7317763711231   occ= 0
MO #104 (E3y #6 ) energy= 10.7190920228311   | 10.7064076745391   | 10.7317763711231   occ= 0
MO #105 (A1  #29) energy= 10.8942386514979   | 10.8880997434641   | 10.9003775595316   occ= 0
MO #106 (E1y #20) energy= 10.9198136509192   | 10.8779385231788   | 10.9616887786596   occ= 0
MO #107 (E1x #20) energy= 10.9576845836715   | 10.9501925834635   | 10.9651765838795   occ= 0
MO #108 (E2x #12) energy= 10.9987749659377   | 10.9888945459569   | 11.0086553859185   occ= 0
MO #109 (E2y #12) energy= 10.9987749659377   | 10.9888945459569   | 11.0086553859185   occ= 0
MO #110 (E1y #21) energy= 11.4259487405067   | 11.4112523648846   | 11.4406451161288   occ= 0
MO #111 (E1x #21) energy= 11.4665347216738   | 11.4632459062135   | 11.4698235371341   occ= 0
MO #112 (A1  #30) energy= 11.4849832551665   | 11.4761508471718   | 11.4938156631612   occ= 0
MO #113 (A1  #31) energy= 11.8577455644108   | 11.8466202224769   | 11.8688709063447   occ= 0
MO #114 (E3x #7 ) energy= 11.8600392923715   | 11.834173073685    | 11.885905511058    occ= 0
MO #115 (E3y #7 ) energy= 11.8600392923715   | 11.8341730736849   | 11.8859055110579   occ= 0
MO #116 (E2x #13) energy= 11.9962203446975   | 11.9780782722232   | 12.0143624171718   occ= 0
MO #117 (E2y #13) energy= 11.9962203446975   | 11.9780782722232   | 12.0143624171718   occ= 0
MO #118 (E1y #22) energy= 12.4438550262983   | 12.423199214858    | 12.4645108377386   occ= 0
MO #119 (E1x #22) energy= 12.4822878429251   | 12.4778450427692   | 12.4867306430809   occ= 0
MO #120 (E2x #14) energy= 12.772500310359    | 12.7418978351351   | 12.8031027855828   occ= 0
MO #121 (E2y #14) energy= 12.772500310359    | 12.7418978351351   | 12.8031027855828   occ= 0
MO #122 (A1  #32) energy= 13.6837016674985   | 13.678166858444    | 13.6892364765529   occ= 0
MO #123 (E1y #23) energy= 13.6921095847252   | 13.6676705855769   | 13.7165485838735   occ= 0
MO #124 (E1x #23) energy= 13.727972635921    | 13.7232203749366   | 13.7327248969055   occ= 0
MO #125 (A1  #33) energy= 15.8707463452112   | 15.8645369003933   | 15.8769557900291   occ= 0
MO #126 (A1  #34) energy= 42.4594494921577   | 42.4495389526794   | 42.4693600316425   occ= 0
 ** Mulliken pop on meta-lowdin orthogonal AOs  **
 ** Mulliken pop  **
pop of  0 O 1s        1.99999
pop of  0 O 2s        1.85948
pop of  0 O 3s        0.00311
pop of  0 O 4s        0.00100
pop of  0 O 5s        0.00023
pop of  0 O 6s        0.00005
pop of  0 O 2px       1.99289
pop of  0 O 2py       0.99736
pop of  0 O 2pz       1.47145
pop of  0 O 3px       0.00142
pop of  0 O 3py       0.00016
pop of  0 O 3pz       0.00056
pop of  0 O 4px       0.00047
pop of  0 O 4py       0.00060
pop of  0 O 4pz       0.00179
pop of  0 O 5px       0.00018
pop of  0 O 5py       0.00007
pop of  0 O 5pz       0.00007
pop of  0 O 6px       0.00002
pop of  0 O 6py       0.00001
pop of  0 O 6pz       0.00005
pop of  0 O 3dxy      0.00000
pop of  0 O 3dyz      0.00066
pop of  0 O 3dz^2     0.00605
pop of  0 O 3dxz      0.00142
pop of  0 O 3dx2-y2    0.00000
pop of  0 O 4dxy      0.00000
pop of  0 O 4dyz      0.00015
pop of  0 O 4dz^2     0.00053
pop of  0 O 4dxz      0.00033
pop of  0 O 4dx2-y2    0.00000
pop of  0 O 5dxy      0.00000
pop of  0 O 5dyz      0.00003
pop of  0 O 5dz^2     0.00007
pop of  0 O 5dxz      0.00005
pop of  0 O 5dx2-y2    0.00000
pop of  0 O 6dxy      0.00000
pop of  0 O 6dyz      0.00000
pop of  0 O 6dz^2     0.00010
pop of  0 O 6dxz      0.00001
pop of  0 O 6dx2-y2    0.00000
pop of  0 O 4f-3      0.00000
pop of  0 O 4f-2      0.00000
pop of  0 O 4f-1      0.00001
pop of  0 O 4f 0      0.00055
pop of  0 O 4f 1      0.00017
pop of  0 O 4f 2      0.00000
pop of  0 O 4f 3      0.00000
pop of  0 O 5f-3      0.00000
pop of  0 O 5f-2      0.00000
pop of  0 O 5f-1      0.00001
pop of  0 O 5f 0      0.00007
pop of  0 O 5f 1      0.00005
pop of  0 O 5f 2      0.00000
pop of  0 O 5f 3      0.00000
pop of  0 O 6f-3      0.00000
pop of  0 O 6f-2      0.00000
pop of  0 O 6f-1      0.00000
pop of  0 O 6f 0      0.00002
pop of  0 O 6f 1      0.00001
pop of  0 O 6f 2      0.00000
pop of  0 O 6f 3      0.00000
pop of  0 O 5g-4      0.00000
pop of  0 O 5g-3      0.00000
pop of  0 O 5g-2      0.00000
pop of  0 O 5g-1      0.00001
pop of  0 O 5g 0      0.00013
pop of  0 O 5g 1      0.00003
pop of  0 O 5g 2      0.00000
pop of  0 O 5g 3      0.00000
pop of  0 O 5g 4      0.00000
pop of  0 O 6g-4      0.00000
pop of  0 O 6g-3      0.00000
pop of  0 O 6g-2      0.00000
pop of  0 O 6g-1      0.00001
pop of  0 O 6g 0      0.00004
pop of  0 O 6g 1      0.00001
pop of  0 O 6g 2      0.00000
pop of  0 O 6g 3      0.00000
pop of  0 O 6g 4      0.00000
pop of  1 H 1s        0.64183
pop of  1 H 2s        0.00851
pop of  1 H 3s        0.00230
pop of  1 H 4s        0.00010
pop of  1 H 5s        0.00004
pop of  1 H 2px       0.00274
pop of  1 H 2py       0.00035
pop of  1 H 2pz       0.00087
pop of  1 H 3px       0.00001
pop of  1 H 3py       0.00031
pop of  1 H 3pz       0.00045
pop of  1 H 4px       0.00003
pop of  1 H 4py       0.00014
pop of  1 H 4pz       0.00006
pop of  1 H 5px       0.00000
pop of  1 H 5py       0.00003
pop of  1 H 5pz       0.00003
pop of  1 H 3dxy      0.00000
pop of  1 H 3dyz      0.00006
pop of  1 H 3dz^2     0.00014
pop of  1 H 3dxz      0.00011
pop of  1 H 3dx2-y2    0.00000
pop of  1 H 4dxy      0.00000
pop of  1 H 4dyz      0.00000
pop of  1 H 4dz^2     0.00000
pop of  1 H 4dxz      0.00000
pop of  1 H 4dx2-y2    0.00000
pop of  1 H 5dxy      0.00000
pop of  1 H 5dyz      0.00003
pop of  1 H 5dz^2     0.00006
pop of  1 H 5dxz      0.00000
pop of  1 H 5dx2-y2    0.00000
pop of  1 H 4f-3      0.00000
pop of  1 H 4f-2      0.00000
pop of  1 H 4f-1      0.00001
pop of  1 H 4f 0      0.00011
pop of  1 H 4f 1      0.00000
pop of  1 H 4f 2      0.00000
pop of  1 H 4f 3      0.00000
pop of  1 H 5f-3      0.00000
pop of  1 H 5f-2      0.00000
pop of  1 H 5f-1      0.00000
pop of  1 H 5f 0      0.00016
pop of  1 H 5f 1      0.00005
pop of  1 H 5f 2      0.00000
pop of  1 H 5f 3      0.00000
 ** Mulliken atomic charges  **
charge of  0O =     -0.34146
charge of  1H =      0.34146
Dipole moment(X, Y, Z, Debye):  0.00000,  0.00000,  1.84367
#INFO: **** input file is /Users/mario/Documents/GitHub/UniMi/tesi_alessandro_tammaro/nevpt2/aug-cc-pvqz/radical/R_1.08/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,1.08)]],basis='aug-cc-pvqz',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
VQE_settings.initial_point = np.load('vqe_su2_output.npy',allow_pickle=True).item()['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Sun Jan  2 21:48:43 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:       264.15

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmph6uwbk1f
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmph6uwbk1f
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.24544131561344  LUMO = 0.332982018994834
Initial guess E= -75.4077470905963  |g|= 0.000365582
macro= 0  E= -75.407747152412  delta_E= -6.18157e-08  |g|= 0.000365582  1 KF 3 JK
macro= 1  E= -75.407747152412  delta_E= -1.42109e-14  |g|= 5.87057e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.407747152412  |g|= 5.87057e-06  total 3 KF 8 JK
converged SCF energy = -75.407747152412
#INFO: **** input file is /Users/mario/Documents/GitHub/UniMi/tesi_alessandro_tammaro/nevpt2/aug-cc-pvqz/radical/R_1.08/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,1.08)]],basis='aug-cc-pvqz',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
VQE_settings.initial_point = np.load('vqe_su2_output.npy',allow_pickle=True).item()['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Sun Jan  2 21:49:12 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:       294.33

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpqmna031v
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpqmna031v
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.245441398968301  LUMO = 0.332982057512891
Initial guess E= -75.407747090594  |g|= 0.00036562
macro= 0  E= -75.407747152412  delta_E= -6.1818e-08  |g|= 0.00036562  1 KF 3 JK
macro= 1  E= -75.407747152412  delta_E= 1.42109e-14  |g|= 1.29718e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.407747152412  |g|= 1.29718e-08  total 3 KF 8 JK
converged SCF energy = -75.407747152412
#INFO: **** input file is /Users/mario/Documents/GitHub/UniMi/tesi_alessandro_tammaro/nevpt2/aug-cc-pvqz/radical/R_1.08/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,1.08)]],basis='aug-cc-pvqz',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
VQE_settings.initial_point = np.load('vqe_su2_output.npy',allow_pickle=True).item()['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Sun Jan  2 21:49:52 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:       336.44

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpjh8wwq2t
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpjh8wwq2t
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.24585974223013  LUMO = 0.0266499197414836
Initial guess E= -75.4084162411186  |g|= 0.00879116
macro= 0  E= -75.4084380107832  delta_E= -2.17697e-05  |g|= 0.000401306  2 KF 8 JK
macro= 1  E= -75.4084380107832  delta_E= 1.42109e-14  |g|= 2.08614e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.4084380107832  |g|= 2.08614e-06  total 4 KF 13 JK
converged SCF energy = -75.4084380107832
u+d contributions  -0.058129452760594745
uu+dd contributions  -0.09035183500832863
ud contributions  -0.19614163928135242
u+d contributions  -0.008462078748441945
uu+dd contributions  -0.04058014598781523
ud contributions  -0.1461761429853695
#INFO: **** input file is /Users/mario/Documents/GitHub/UniMi/tesi_alessandro_tammaro/nevpt2/aug-cc-pvqz/radical/R_1.08/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,1.08)]],basis='aug-cc-pvqz',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
VQE_settings.initial_point = np.load('vqe_su2_output.npy',allow_pickle=True).item()['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Sun Jan  2 21:50:33 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:       365.14

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpz3zulbeq
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 2  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpz3zulbeq
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.245106294695777  LUMO = 0.333069883937772
Initial guess E= -75.4077470635882  |g|= 0.000376435
macro= 0  E= -75.407747152412  delta_E= -8.88239e-08  |g|= 0.000376435  1 KF 2 JK
macro= 1  E= -75.407747152412  delta_E= 0  |g|= 3.40778e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.407747152412  |g|= 3.40778e-08  total 3 KF 7 JK
converged SCF energy = -75.407747152412
#INFO: **** input file is /Users/mario/Documents/GitHub/UniMi/tesi_alessandro_tammaro/nevpt2/aug-cc-pvqz/radical/R_1.08/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,1.08)]],basis='aug-cc-pvqz',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
VQE_settings.initial_point = np.load('vqe_su2_output.npy',allow_pickle=True).item()['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Sun Jan  2 21:51:24 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:       411.06

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp5z9t7cda
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 2  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp5z9t7cda
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.245523080715901  LUMO = 0.0266470620146723
Initial guess E= -75.4083650455518  |g|= 0.00644845
macro= 0  E= -75.4083812603438  delta_E= -1.62148e-05  |g|= 0.000324322  2 KF 7 JK
macro= 1  E= -75.4083812603438  delta_E= -1.42109e-14  |g|= 8.70198e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.4083812603438  |g|= 8.70198e-06  total 4 KF 12 JK
converged SCF energy = -75.4083812603438
u+d contributions  -0.024778563718062946
uu+dd contributions  -0.048651635846846196
ud contributions  -0.11383956780891015
u+d contributions  -0.00575299334345759
uu+dd contributions  -0.029597322273686538
ud contributions  -0.09476976852443139
----- VQE data ------
target_sector:  None
optimizer:  bfgs
max_iter:  1000
instance:  statevector_simulator
shots:  1000
ansatz:  q_uccsd
initial_point:  None


 >>>>> AM I PREPARED?  False
Overwritten attributes  get_ovlp get_hcore  of <class 'pyscf.soscf.newton_ah.newton.<locals>.SecondOrderROHF'>
Overwritten attributes  get_ovlp get_hcore  of <class 'pyscf.scf.rohf.ROHF'>
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf/gto/mole.py:1089: UserWarning: Function mol.dumps drops attribute nao_nr because it is not JSON-serializable
  warnings.warn(msg)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf/gto/mole.py:1089: UserWarning: Function mol.dumps drops attribute energy_nuc because it is not JSON-serializable
  warnings.warn(msg)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf/fci/direct_nosym.py:179: UserWarning: direct_nosym.kernel is not able to diagonalize non-Hermitian Hamiltonian. If h1e and h2e is not hermtian, calling symmetric diagonlization in eig can lead to wrong results.
  warnings.warn('direct_nosym.kernel is not able to diagonalize '
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/quantum_info/operators/symplectic/pauli.py:185: DeprecationWarning: Initializing Pauli from `Pauli(z=z, x=x)` kwargs is deprecated as of version 0.17.0 and will be removed no earlier than 3 months after the release date. Use tuple initialization `Pauli((z, x))` instead.
  base_z, base_x, base_phase = self._from_array_deprecated(z, x)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/chemistry/fermionic_operator.py:431: DeprecationWarning: sgn_prod is deprecated and will be removed no earlier than 3 months after the release date. Use `dot` instead.
  pauli_prod = Pauli.sgn_prod(a_i[alpha], a_j[beta])
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/chemistry/fermionic_operator.py:431: DeprecationWarning: sgn_prod is deprecated and will be removed no earlier than 3 months after the release date. Use `dot` instead.
  pauli_prod = Pauli.sgn_prod(a_i[alpha], a_j[beta])
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/chemistry/fermionic_operator.py:431: DeprecationWarning: sgn_prod is deprecated and will be removed no earlier than 3 months after the release date. Use `dot` instead.
  pauli_prod = Pauli.sgn_prod(a_i[alpha], a_j[beta])
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/chemistry/fermionic_operator.py:431: DeprecationWarning: sgn_prod is deprecated and will be removed no earlier than 3 months after the release date. Use `dot` instead.
  pauli_prod = Pauli.sgn_prod(a_i[alpha], a_j[beta])
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/chemistry/fermionic_operator.py:431: DeprecationWarning: sgn_prod is deprecated and will be removed no earlier than 3 months after the release date. Use `dot` instead.
  pauli_prod = Pauli.sgn_prod(a_i[alpha], a_j[beta])
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/chemistry/fermionic_operator.py:431: DeprecationWarning: sgn_prod is deprecated and will be removed no earlier than 3 months after the release date. Use `dot` instead.
  pauli_prod = Pauli.sgn_prod(a_i[alpha], a_j[beta])
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/chemistry/fermionic_operator.py:459: DeprecationWarning: sgn_prod is deprecated and will be removed no earlier than 3 months after the release date. Use `dot` instead.
  pauli_prod_1 = Pauli.sgn_prod(a_i[alpha], a_k[beta])
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/chemistry/fermionic_operator.py:459: DeprecationWarning: sgn_prod is deprecated and will be removed no earlier than 3 months after the release date. Use `dot` instead.
  pauli_prod_1 = Pauli.sgn_prod(a_i[alpha], a_k[beta])
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/chemistry/fermionic_operator.py:459: DeprecationWarning: sgn_prod is deprecated and will be removed no earlier than 3 months after the release date. Use `dot` instead.
  pauli_prod_1 = Pauli.sgn_prod(a_i[alpha], a_k[beta])
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/chemistry/fermionic_operator.py:459: DeprecationWarning: sgn_prod is deprecated and will be removed no earlier than 3 months after the release date. Use `dot` instead.
  pauli_prod_1 = Pauli.sgn_prod(a_i[alpha], a_k[beta])
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/chemistry/fermionic_operator.py:459: DeprecationWarning: sgn_prod is deprecated and will be removed no earlier than 3 months after the release date. Use `dot` instead.
  pauli_prod_1 = Pauli.sgn_prod(a_i[alpha], a_k[beta])
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/chemistry/fermionic_operator.py:459: DeprecationWarning: sgn_prod is deprecated and will be removed no earlier than 3 months after the release date. Use `dot` instead.
  pauli_prod_1 = Pauli.sgn_prod(a_i[alpha], a_k[beta])
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/weighted_pauli_operator.py:291: DeprecationWarning: sgn_prod is deprecated and will be removed no earlier than 3 months after the release date. Use `dot` instead.
  new_pauli, sign = Pauli.sgn_prod(existed_pauli, pauli)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:122: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  hamiltonian += weight * pauli.to_spmatrix()
two_qubit_reduction only works with parity qubit mapping but you have jordan_wigner. We switch two_qubit_reduction to False.
qse operators prepared for  u
qse operators prepared for  d
qse operators prepared for  uu
qse operators prepared for  dd
qse operators prepared for  ud
In the tapering subroutine, i=0, E(i)=-74.957188, i_min=-1
In the tapering subroutine, i=1, E(i)=-75.247866, i_min=0
In the tapering subroutine, i=2, E(i)=-75.407747, i_min=1
In the tapering subroutine, i=3, E(i)=-75.062909, i_min=2
In the tapering subroutine, i=4, E(i)=-75.403224, i_min=2
In the tapering subroutine, i=5, E(i)=-75.051223, i_min=2
In the tapering subroutine, i=6, E(i)=-74.854395, i_min=2
In the tapering subroutine, i=7, E(i)=-75.090735, i_min=2
In the tapering subroutine, i=8, E(i)=-75.247866, i_min=2
In the tapering subroutine, i=9, E(i)=-75.253460, i_min=2
In the tapering subroutine, i=10, E(i)=-75.086488, i_min=2
In the tapering subroutine, i=11, E(i)=-75.407747, i_min=2
In the tapering subroutine, i=12, E(i)=-75.074055, i_min=2
In the tapering subroutine, i=13, E(i)=-75.403224, i_min=2
In the tapering subroutine, i=14, E(i)=-75.090735, i_min=2
In the tapering subroutine, i=15, E(i)=-74.892791, i_min=2
after tapering qubits(H) =  4
qse operators tapered for  hamiltonian
qse operators tapered for  qse_s_u
qse operators tapered for  qse_h_u
qse operators tapered for  qse_s_d
qse operators tapered for  qse_h_d
qse operators tapered for  qse_s_uu
qse operators tapered for  qse_h_uu
qse operators tapered for  qse_s_dd
qse operators tapered for  qse_h_dd
qse operators tapered for  qse_s_ud
qse operators tapered for  qse_h_ud
          
q_0: ─────
     ┌───┐
q_1: ┤ X ├
     └───┘
q_2: ─────
          
q_3: ─────
          
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
two_qubit_reduction only works with parity qubit mapping but you have jordan_wigner. We switch two_qubit_reduction to False.
u+d contributions  -0.005752990790823084
uu+dd contributions  -0.029597370614457393
ud contributions  -0.09474883400816157
 >>>>> AM I PREPARED?  True
          
q_0: ─────
     ┌───┐
q_1: ┤ X ├
     └───┘
q_2: ─────
          
q_3: ─────
          
two_qubit_reduction only works with parity qubit mapping but you have jordan_wigner. We switch two_qubit_reduction to False.
u+d contributions  -0.005753064235949365
uu+dd contributions  -0.029597198927413797
ud contributions  -0.09474842135971001
 >>>>> AM I PREPARED?  True
          
q_0: ─────
     ┌───┐
q_1: ┤ X ├
     └───┘
q_2: ─────
          
q_3: ─────
          
u+d contributions  -0.005753064235949365
uu+dd contributions  -0.029597198927413797
ud contributions  -0.09474842135971001
