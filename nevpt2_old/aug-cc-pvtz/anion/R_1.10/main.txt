/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf/lib/misc.py:46: H5pyDeprecationWarning: Using default_file_mode other than 'r' is deprecated. Pass the mode to h5py.File() instead.
  h5py.get_config().default_file_mode = 'a'
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/qiskit/aqua/__init__.py:86: DeprecationWarning: The package qiskit.aqua is deprecated. It was moved/refactored to qiskit-terra For more information see <https://github.com/Qiskit/qiskit-aqua/blob/main/README.md#migration-guide>
  warn_package('aqua', 'qiskit-terra')
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/qiskit/chemistry/__init__.py:170: DeprecationWarning: The package qiskit.chemistry is deprecated. It was moved/refactored to qiskit_nature (pip install qiskit-nature). For more information see <https://github.com/Qiskit/qiskit-aqua/blob/main/README.md#migration-guide>
  warn_package('chemistry', 'qiskit_nature', 'qiskit-nature')
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/anion/R_1.10/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,1.10)]],basis='aug-cc-pvtz',spin=0,charge=-1,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % np.nan) 

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Thu Mar 31 12:44:11 2022
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 10
[INPUT] charge = -1
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry True subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   1.100000000000 AA    0.000000000000   0.000000000000   2.078698737022 Bohr

nuclear repulsion = 3.84856153396364
point group symmetry = Coov
num. orbitals of irrep A1 = 23
num. orbitals of irrep E1x = 14
num. orbitals of irrep E1y = 14
num. orbitals of irrep E2x = 7
num. orbitals of irrep E2y = 7
num. orbitals of irrep E3x = 2
num. orbitals of irrep E3y = 2
number of shells = 22
number of NR pGTOs = 83
number of NR cGTOs = 69
basis = aug-cc-pvtz
ecp = {}
CPU time:         5.10
Freeze 0 electrons in irreps []
    10 free electrons in irreps A1 E1x E1y E2x E2y E3x E3y




******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> ********
method = SymAdaptedROHF-ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/anion/R_1.10/tmp8v7vs2ou
max_memory 4000 MB (current use 243 MB)
num. doubly occ = 5  num. singly occ = 0
******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/anion/R_1.10/tmp8v7vs2ou
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 243 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (E1y) = -0.418630626518806  LUMO (A1) = 0.0206095452814926
Initial guess E= -75.2463979651405  |g|= 0.79477
macro= 0  E= -75.393542593849  delta_E= -0.147145  |g|= 0.170902  3 KF 18 JK
macro= 1  E= -75.3944997553593  delta_E= -0.000957162  |g|= 5.08325e-05  3 KF 12 JK
macro= 2  E= -75.3944997553594  delta_E= -1.56319e-13  |g|= 7.44976e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-75.3944997553594  |g|= 7.44976e-06  total 8 KF 36 JK
converged SCF energy = -75.3944997553594
**** SCF Summaries ****
Total Energy =                         -75.394499755359433
Nuclear Repulsion Energy =               3.848561533963636
One-electron Energy =                 -115.417533906462410
Two-electron Energy =                   36.174472617139337
Wave-function symmetry = Coov
occupancy for each irrep:     A1  E1x  E1y  E2x  E2y  E3x  E3y
double occ                     3    1    1    0    0    0    0
single occ                     0    0    0    0    0    0    0
**** MO energy ****
                          Roothaan           | alpha              | beta
MO #1   (A1  #1 ) energy= -20.2083181676312  | -20.2083181676312  | -20.2083181676312  occ= 2
MO #2   (A1  #2 ) energy= -0.87578547198237  | -0.875785471982371 | -0.875785471982371 occ= 2
MO #3   (A1  #3 ) energy= -0.222114525995305 | -0.222114525995305 | -0.222114525995305 occ= 2
MO #4   (E1x #1 ) energy= -0.114038085241462 | -0.114038085241463 | -0.114038085241463 occ= 2
MO #5   (E1y #1 ) energy= -0.114038085241464 | -0.114038085241464 | -0.114038085241464 occ= 2
MO #6   (A1  #4 ) energy= 0.179285579988047  | 0.179285579988047  | 0.179285579988047  occ= 0
MO #7   (A1  #5 ) energy= 0.331725825617622  | 0.331725825617631  | 0.331725825617631  occ= 0
MO #8   (E1x #2 ) energy= 0.374358453339712  | 0.374358453339712  | 0.374358453339712  occ= 0
MO #9   (E1y #2 ) energy= 0.374358453339704  | 0.374358453339704  | 0.374358453339704  occ= 0
MO #10  (A1  #6 ) energy= 0.394066920396769  | 0.39406692039677   | 0.39406692039677   occ= 0
MO #11  (A1  #7 ) energy= 0.49010887632707   | 0.490108876327073  | 0.490108876327073  occ= 0
MO #12  (E1x #3 ) energy= 0.491474094894409  | 0.491474094894408  | 0.491474094894408  occ= 0
MO #13  (E1y #3 ) energy= 0.491474094894405  | 0.491474094894404  | 0.491474094894404  occ= 0
MO #14  (A1  #8 ) energy= 0.668915596616156  | 0.668915596616172  | 0.668915596616172  occ= 0
MO #15  (A1  #9 ) energy= 0.907247852530867  | 0.907247852530879  | 0.907247852530879  occ= 0
MO #16  (E2x #1 ) energy= 0.946320530590973  | 0.946320530590973  | 0.946320530590973  occ= 0
MO #17  (E2y #1 ) energy= 0.946320530590973  | 0.946320530590973  | 0.946320530590973  occ= 0
MO #18  (E1x #4 ) energy= 1.01127087597333   | 1.01127087597333   | 1.01127087597333   occ= 0
MO #19  (E1y #4 ) energy= 1.01127087597331   | 1.01127087597331   | 1.01127087597331   occ= 0
MO #20  (A1  #10) energy= 1.1350629755869    | 1.1350629755869    | 1.1350629755869    occ= 0
MO #21  (E1x #5 ) energy= 1.18303987198397   | 1.18303987198397   | 1.18303987198397   occ= 0
MO #22  (E1y #5 ) energy= 1.18303987198396   | 1.18303987198396   | 1.18303987198396   occ= 0
MO #23  (E2x #2 ) energy= 1.2089918625993    | 1.2089918625993    | 1.2089918625993    occ= 0
MO #24  (E2y #2 ) energy= 1.2089918625993    | 1.2089918625993    | 1.2089918625993    occ= 0
MO #25  (A1  #11) energy= 1.2483277842284    | 1.24832778422841   | 1.24832778422841   occ= 0
MO #26  (A1  #12) energy= 1.28002392259177   | 1.28002392259178   | 1.28002392259178   occ= 0
MO #27  (E1x #6 ) energy= 1.32068062380537   | 1.32068062380537   | 1.32068062380537   occ= 0
MO #28  (E1y #6 ) energy= 1.32068062380537   | 1.32068062380537   | 1.32068062380537   occ= 0
MO #29  (E1x #7 ) energy= 1.76333087752487   | 1.76333087752487   | 1.76333087752487   occ= 0
MO #30  (E1y #7 ) energy= 1.76333087752484   | 1.76333087752484   | 1.76333087752484   occ= 0
MO #31  (A1  #13) energy= 2.07633937376419   | 2.0763393737642    | 2.0763393737642    occ= 0
MO #32  (A1  #14) energy= 2.22684058546369   | 2.22684058546369   | 2.22684058546369   occ= 0
MO #33  (E3x #1 ) energy= 2.42476408730452   | 2.42476408730452   | 2.42476408730452   occ= 0
MO #34  (E3y #1 ) energy= 2.42476408730453   | 2.42476408730453   | 2.42476408730453   occ= 0
MO #35  (E2x #3 ) energy= 2.51986324673224   | 2.51986324673224   | 2.51986324673224   occ= 0
MO #36  (E2y #3 ) energy= 2.51986324673223   | 2.51986324673223   | 2.51986324673223   occ= 0
MO #37  (E1x #8 ) energy= 2.62321893985603   | 2.62321893985603   | 2.62321893985603   occ= 0
MO #38  (E1y #8 ) energy= 2.62321893985603   | 2.62321893985603   | 2.62321893985603   occ= 0
MO #39  (E2x #4 ) energy= 2.65311360428234   | 2.65311360428234   | 2.65311360428234   occ= 0
MO #40  (E2y #4 ) energy= 2.65311360428234   | 2.65311360428234   | 2.65311360428234   occ= 0
MO #41  (A1  #15) energy= 2.76608022042414   | 2.76608022042415   | 2.76608022042415   occ= 0
MO #42  (A1  #16) energy= 3.02548879291104   | 3.02548879291101   | 3.02548879291101   occ= 0
MO #43  (E1x #9 ) energy= 3.08222812444446   | 3.08222812444446   | 3.08222812444446   occ= 0
MO #44  (E1y #9 ) energy= 3.08222812444443   | 3.08222812444443   | 3.08222812444443   occ= 0
MO #45  (A1  #17) energy= 3.72739148288302   | 3.72739148288303   | 3.72739148288303   occ= 0
MO #46  (E2x #5 ) energy= 4.30539049744892   | 4.30539049744891   | 4.30539049744891   occ= 0
MO #47  (E2y #5 ) energy= 4.30539049744891   | 4.30539049744891   | 4.30539049744891   occ= 0
MO #48  (E1x #10) energy= 4.42837506292948   | 4.42837506292947   | 4.42837506292947   occ= 0
MO #49  (E1y #10) energy= 4.42837506292948   | 4.42837506292948   | 4.42837506292948   occ= 0
MO #50  (E1x #11) energy= 4.63699932028796   | 4.63699932028795   | 4.63699932028795   occ= 0
MO #51  (E1y #11) energy= 4.63699932028798   | 4.63699932028797   | 4.63699932028797   occ= 0
MO #52  (A1  #18) energy= 4.76582077224843   | 4.76582077224844   | 4.76582077224844   occ= 0
MO #53  (A1  #19) energy= 5.23406919814722   | 5.23406919814721   | 5.23406919814721   occ= 0
MO #54  (E1x #12) energy= 5.31764942883708   | 5.31764942883708   | 5.31764942883708   occ= 0
MO #55  (E1y #12) energy= 5.31764942883708   | 5.31764942883708   | 5.31764942883708   occ= 0
MO #56  (A1  #20) energy= 6.63775845425373   | 6.63775845425373   | 6.63775845425373   occ= 0
MO #57  (E3x #2 ) energy= 6.89244635953769   | 6.89244635953769   | 6.89244635953769   occ= 0
MO #58  (E3y #2 ) energy= 6.89244635953768   | 6.89244635953769   | 6.89244635953769   occ= 0
MO #59  (E2x #6 ) energy= 6.98887893210287   | 6.98887893210287   | 6.98887893210287   occ= 0
MO #60  (E2y #6 ) energy= 6.98887893210285   | 6.98887893210285   | 6.98887893210285   occ= 0
MO #61  (E1x #13) energy= 7.32873168202759   | 7.32873168202759   | 7.32873168202759   occ= 0
MO #62  (E1y #13) energy= 7.3287316820276    | 7.32873168202761   | 7.32873168202761   occ= 0
MO #63  (E2x #7 ) energy= 7.43885345046531   | 7.43885345046531   | 7.43885345046531   occ= 0
MO #64  (E2y #7 ) energy= 7.4388534504653    | 7.4388534504653    | 7.4388534504653    occ= 0
MO #65  (E1x #14) energy= 7.62525962302687   | 7.62525962302687   | 7.62525962302687   occ= 0
MO #66  (E1y #14) energy= 7.62525962302685   | 7.62525962302685   | 7.62525962302685   occ= 0
MO #67  (A1  #21) energy= 7.65104757756159   | 7.65104757756161   | 7.65104757756161   occ= 0
MO #68  (A1  #22) energy= 7.90569067522961   | 7.90569067522962   | 7.90569067522962   occ= 0
MO #69  (A1  #23) energy= 11.4251533064553   | 11.4251533064552   | 11.4251533064552   occ= 0
 ** Mulliken pop on meta-lowdin orthogonal AOs  **
 ** Mulliken pop  **
pop of  0 O 1s        2.00000
pop of  0 O 2s        1.86029
pop of  0 O 3s        0.00833
pop of  0 O 4s        0.00084
pop of  0 O 5s        0.00007
pop of  0 O 2px       1.94546
pop of  0 O 2py       1.94546
pop of  0 O 2pz       1.30112
pop of  0 O 3px       0.03462
pop of  0 O 3py       0.03462
pop of  0 O 3pz       0.00389
pop of  0 O 4px       0.00144
pop of  0 O 4py       0.00144
pop of  0 O 4pz       0.00033
pop of  0 O 5px       0.00002
pop of  0 O 5py       0.00002
pop of  0 O 5pz       0.00004
pop of  0 O 3dxy      0.00000
pop of  0 O 3dyz      0.00088
pop of  0 O 3dz^2     0.00291
pop of  0 O 3dxz      0.00088
pop of  0 O 3dx2-y2    0.00000
pop of  0 O 4dxy      0.00000
pop of  0 O 4dyz      0.00015
pop of  0 O 4dz^2     0.00012
pop of  0 O 4dxz      0.00015
pop of  0 O 4dx2-y2    0.00000
pop of  0 O 5dxy      0.00000
pop of  0 O 5dyz      0.00000
pop of  0 O 5dz^2     0.00013
pop of  0 O 5dxz      0.00000
pop of  0 O 5dx2-y2    0.00000
pop of  0 O 4f-3      0.00000
pop of  0 O 4f-2      0.00000
pop of  0 O 4f-1      0.00024
pop of  0 O 4f 0      0.00027
pop of  0 O 4f 1      0.00024
pop of  0 O 4f 2      0.00000
pop of  0 O 4f 3      0.00000
pop of  0 O 5f-3      0.00000
pop of  0 O 5f-2      0.00000
pop of  0 O 5f-1      0.00008
pop of  0 O 5f 0      0.00001
pop of  0 O 5f 1      0.00008
pop of  0 O 5f 2      0.00000
pop of  0 O 5f 3      0.00000
pop of  1 H 1s        0.81256
pop of  1 H 2s        0.00253
pop of  1 H 3s        0.00065
pop of  1 H 4s        0.00011
pop of  1 H 2px       0.01028
pop of  1 H 2py       0.01028
pop of  1 H 2pz       0.00093
pop of  1 H 3px       0.00560
pop of  1 H 3py       0.00560
pop of  1 H 3pz       0.00427
pop of  1 H 4px       0.00087
pop of  1 H 4py       0.00087
pop of  1 H 4pz       0.00049
pop of  1 H 3dxy      0.00000
pop of  1 H 3dyz      0.00012
pop of  1 H 3dz^2     0.00012
pop of  1 H 3dxz      0.00012
pop of  1 H 3dx2-y2    0.00000
pop of  1 H 4dxy      0.00000
pop of  1 H 4dyz      0.00024
pop of  1 H 4dz^2     0.00000
pop of  1 H 4dxz      0.00024
pop of  1 H 4dx2-y2    0.00000
 ** Mulliken atomic charges  **
charge of  0O =     -1.14413
charge of  1H =      0.14413
Dipole moment(X, Y, Z, Debye):  0.00000,  0.00000,  0.70069
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/anion/R_1.10/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,1.10)]],basis='aug-cc-pvtz',spin=0,charge=-1,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % np.nan) 

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Thu Mar 31 12:44:18 2022
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        62.65

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Overwritten attributes  get_hcore get_ovlp  of <class 'pyscf.soscf.newton_ah.newton.<locals>.SecondOrderRHF'>
Overwritten attributes  get_hcore get_ovlp  of <class 'pyscf.scf.hf.RHF'>




******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/anion/R_1.10/tmp_u1j3tw3
max_memory 4000 MB (current use 378 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/anion/R_1.10/tmp_u1j3tw3
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 378 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.114038085241457  LUMO = 0.688295265049012
Initial guess E= -75.3944997553627  |g|= 2.09569e-07
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf/gto/mole.py:1089: UserWarning: Function mol.dumps drops attribute nao_nr because it is not JSON-serializable
  warnings.warn(msg)
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf/gto/mole.py:1089: UserWarning: Function mol.dumps drops attribute energy_nuc because it is not JSON-serializable
  warnings.warn(msg)
macro= 0  E= -75.3944997553627  delta_E= 1.42109e-14  |g|= 2.09569e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3944997553627  |g|= 2.09569e-07  total 2 KF 4 JK
converged SCF energy = -75.3944997553627
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/anion/R_1.10/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,1.10)]],basis='aug-cc-pvtz',spin=0,charge=-1,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % np.nan) 

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Thu Mar 31 12:44:21 2022
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        83.21

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/anion/R_1.10/tmppx3eyp_3
max_memory 4000 MB (current use 391 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/anion/R_1.10/tmppx3eyp_3
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 391 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.114038084956539  LUMO = 0.68829526485446
Initial guess E= -75.3944997553626  |g|= 2.09724e-07
macro= 0  E= -75.3944997553627  delta_E= -2.84217e-14  |g|= 2.09724e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3944997553627  |g|= 2.09724e-07  total 2 KF 4 JK
converged SCF energy = -75.3944997553627
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf/fci/direct_nosym.py:179: UserWarning: direct_nosym.kernel is not able to diagonalize non-Hermitian Hamiltonian. If h1e and h2e is not hermtian, calling symmetric diagonlization in eig can lead to wrong results.
  warnings.warn('direct_nosym.kernel is not able to diagonalize '
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/anion/R_1.10/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,1.10)]],basis='aug-cc-pvtz',spin=0,charge=-1,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % np.nan) 

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Thu Mar 31 12:44:24 2022
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:       101.30

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/anion/R_1.10/tmp1pny1sk6
max_memory 4000 MB (current use 565 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/anion/R_1.10/tmp1pny1sk6
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 565 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.114038084958067  LUMO = 0.179285579975512
Initial guess E= -75.3944997553671  |g|= 4.95269e-06
macro= 0  E= -75.3944997553704  delta_E= -3.36797e-12  |g|= 4.95269e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3944997553704  |g|= 4.95269e-06  total 2 KF 4 JK
converged SCF energy = -75.3944997553704
u+d contributions  -0.05591600342506404
uu+dd contributions  -0.10311550771438659
ud contributions  -0.2424496504042705
u+d contributions  -0.0022572356611239427
uu+dd contributions  -0.049193152951871884
ud contributions  -0.18798504914935307
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/anion/R_1.10/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,1.10)]],basis='aug-cc-pvtz',spin=0,charge=-1,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % np.nan) 

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Thu Mar 31 12:44:29 2022
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:       139.78

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/anion/R_1.10/tmp_m1hlqb5
max_memory 4000 MB (current use 563 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/anion/R_1.10/tmp_m1hlqb5
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 563 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.114037925120169  LUMO = 0.688295334446484
Initial guess E= -75.3944997553626  |g|= 2.78793e-07
macro= 0  E= -75.3944997553627  delta_E= -5.68434e-14  |g|= 2.78793e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3944997553627  |g|= 2.78793e-07  total 2 KF 4 JK
converged SCF energy = -75.3944997553627
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/anion/R_1.10/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,1.10)]],basis='aug-cc-pvtz',spin=0,charge=-1,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % np.nan) 

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Thu Mar 31 12:44:32 2022
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:       158.65

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/anion/R_1.10/tmpuoeitpxf
max_memory 4000 MB (current use 726 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/anion/R_1.10/tmpuoeitpxf
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 726 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.114037925121485  LUMO = 0.179285579535761
Initial guess E= -75.394499755367  |g|= 3.38193e-06
macro= 0  E= -75.3944997553688  delta_E= -1.86162e-12  |g|= 3.38193e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3944997553688  |g|= 3.38193e-06  total 2 KF 4 JK
converged SCF energy = -75.3944997553688
/home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/anion/R_1.10/../../../src/qiskit_subroutines.py:25: DeprecationWarning: The package qiskit.aqua.operators is deprecated. It was moved/refactored to qiskit.opflow (pip install qiskit-terra). For more information see <https://github.com/Qiskit/qiskit-aqua/blob/main/README.md#migration-guide>
  c_list = [WeightedPauliOperator([(0.5,a1),(-0.5j,a2)]) for a1,a2 in a_list]
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/qiskit/chemistry/fermionic_operator.py:394: DeprecationWarning: The variable qiskit.aqua.aqua_globals is deprecated. It was moved/refactored to qiskit.utils.algorithm_globals (pip install qiskit-terra). For more information see <https://github.com/Qiskit/qiskit-aqua/blob/main/README.md#migration-guide>
  task_args=(threshold,), num_processes=aqua_globals.num_processes)
/home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/anion/R_1.10/../../../src/qiskit_subroutines.py:19: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  a_x = np.asarray(zmask,dtype=np.bool)
/home/alessandro/Scrivania/Università/Master Thesis/git/tesi_alessandro_tammaro/nevpt2_old/aug-cc-pvtz/anion/R_1.10/../../../src/qiskit_subroutines.py:20: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  a_z = np.asarray(zeros,dtype=np.bool)
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/qiskit/quantum_info/operators/symplectic/pauli.py:195: DeprecationWarning: Initializing Pauli from `Pauli(z=z, x=x)` kwargs is deprecated as of version 0.17.0 and will be removed no earlier than 3 months after the release date. Use tuple initialization `Pauli((z, x))` instead.
  base_z, base_x, base_phase = self._from_array_deprecated(z, x)
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/qiskit/aqua/components/optimizers/optimizer.py:49: DeprecationWarning: The package qiskit.aqua.components.optimizers is deprecated. It was moved/refactored to qiskit.algorithms.optimizers (pip install qiskit-terra). For more information see <https://github.com/Qiskit/qiskit-aqua/blob/main/README.md#migration-guide>
  warn_package('aqua.components.optimizers',
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/qiskit/aqua/quantum_instance.py:135: DeprecationWarning: The class qiskit.aqua.QuantumInstance is deprecated. It was moved/refactored to qiskit.utils.QuantumInstance (pip install qiskit-terra). For more information see <https://github.com/Qiskit/qiskit-aqua/blob/main/README.md#migration-guide>
  warn_class('aqua.QuantumInstance',
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/qiskit/chemistry/components/initial_states/hartree_fock.py:56: UserWarning: two_qubit_reduction only works with parity qubit mapping but you have jordan_wigner. We switch two_qubit_reduction to False.
  warnings.warn('two_qubit_reduction only works with parity qubit mapping '
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/qiskit/chemistry/components/initial_states/hartree_fock.py:61: DeprecationWarning: The HartreeFock class is deprecated as of Aqua 0.9 and will be removed no earlier than 3 months after the release date. Instead, all algorithms and circuits accept a plain QuantumCircuit. 
  super().__init__()
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/qiskit/aqua/components/variational_forms/variational_form.py:48: DeprecationWarning: The package qiskit.aqua.components.variational_forms is deprecated. For more information see <https://github.com/Qiskit/qiskit-aqua/blob/main/README.md#migration-guide>
  warn_package('aqua.components.variational_forms')
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/qiskit/aqua/algorithms/vq_algorithm.py:70: DeprecationWarning: The class qiskit.aqua.algorithms.VQAlgorithm is deprecated. It was moved/refactored to qiskit.algorithms.VariationalAlgorithm (pip install qiskit-terra). For more information see <https://github.com/Qiskit/qiskit-aqua/blob/main/README.md#migration-guide>
  warn_class('aqua.algorithms.VQAlgorithm',
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/qiskit/chemistry/components/initial_states/hartree_fock.py:56: UserWarning: two_qubit_reduction only works with parity qubit mapping but you have jordan_wigner. We switch two_qubit_reduction to False.
  warnings.warn('two_qubit_reduction only works with parity qubit mapping '
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/qiskit/chemistry/components/initial_states/hartree_fock.py:61: DeprecationWarning: The HartreeFock class is deprecated as of Aqua 0.9 and will be removed no earlier than 3 months after the release date. Instead, all algorithms and circuits accept a plain QuantumCircuit. 
  super().__init__()
u+d contributions  -0.03344995440819079
uu+dd contributions  -0.06995778848343735
ud contributions  -0.16590941110244414
u+d contributions  -0.003646181622675608
uu+dd contributions  -0.04004211435226581
ud contributions  -0.1357754488879676
----- VQE data ------
target_sector:  None
optimizer:  bfgs
max_iter:  1000
instance:  statevector_simulator
shots:  1000
ansatz:  q_uccsd
initial_point:  None


qse operators prepared for  u
qse operators prepared for  d
qse operators prepared for  uu
qse operators prepared for  dd
qse operators prepared for  ud
In the tapering subroutine, i=0, E(i)=-75.045614, i_min=-1
In the tapering subroutine, i=1, E(i)=-75.172386, i_min=0
In the tapering subroutine, i=2, E(i)=-75.280462, i_min=1
In the tapering subroutine, i=3, E(i)=-75.091107, i_min=2
In the tapering subroutine, i=4, E(i)=-75.280462, i_min=2
In the tapering subroutine, i=5, E(i)=-75.091107, i_min=2
In the tapering subroutine, i=6, E(i)=-74.648581, i_min=2
In the tapering subroutine, i=7, E(i)=-74.946134, i_min=2
In the tapering subroutine, i=8, E(i)=-75.172386, i_min=2
In the tapering subroutine, i=9, E(i)=-75.394500, i_min=2
In the tapering subroutine, i=10, E(i)=-75.114646, i_min=9
In the tapering subroutine, i=11, E(i)=-75.280462, i_min=9
In the tapering subroutine, i=12, E(i)=-75.114646, i_min=9
In the tapering subroutine, i=13, E(i)=-75.280462, i_min=9
In the tapering subroutine, i=14, E(i)=-74.946134, i_min=9
In the tapering subroutine, i=15, E(i)=-74.616830, i_min=9
after tapering qubits(H) =  4
qse operators tapered for  hamiltonian
qse operators tapered for  qse_s_u
qse operators tapered for  qse_h_u
qse operators tapered for  qse_s_d
qse operators tapered for  qse_h_d
qse operators tapered for  qse_s_uu
qse operators tapered for  qse_h_uu
qse operators tapered for  qse_s_dd
qse operators tapered for  qse_h_dd
qse operators tapered for  qse_s_ud
qse operators tapered for  qse_h_ud
          
q_0: ─────
     ┌───┐
q_1: ┤ X ├
     ├───┤
q_2: ┤ X ├
     └───┘
q_3: ─────
          
overlap matrix condition number 0.018253587979 0.999524115870 
overlap matrix condition number 0.018253587979 0.999524115870 
overlap matrix condition number 0.000951820494 0.999048179506 
overlap matrix condition number 0.000951820494 0.999048179506 
overlap matrix condition number 0.000065522422 1.008497397166 
u+d contributions  -0.0036462527044692195
uu+dd contributions  -0.04004212207442344
ud contributions  -0.13577535650607825
          
q_0: ─────
     ┌───┐
q_1: ┤ X ├
     ├───┤
q_2: ┤ X ├
     └───┘
q_3: ─────
          
overlap matrix condition number 0.017733164585 0.999975299189 
overlap matrix condition number 0.017694811280 0.999975299189 
overlap matrix condition number 0.000402347214 0.999583841618 
overlap matrix condition number 0.000363728511 0.999583841618 
overlap matrix condition number 0.000024729458 1.004926466479 
u+d contributions  -0.00383686720376218
uu+dd contributions  -0.04024718486186421
ud contributions  -0.1361294594096563
          
q_0: ─────
     ┌───┐
q_1: ┤ X ├
     ├───┤
q_2: ┤ X ├
     └───┘
q_3: ─────
          
overlap matrix condition number 0.017733164585 0.999975299189 
overlap matrix condition number 0.017694811280 0.999975299189 
overlap matrix condition number 0.000402347214 0.999583841618 
overlap matrix condition number 0.000363728511 0.999583841618 
overlap matrix condition number 0.000024729458 1.004926466479 
u+d contributions  -0.00383686720376218
uu+dd contributions  -0.04024718486186421
ud contributions  -0.1361294594096563
