#INFO: **** input file is /Users/mario/Documents/GitHub/UniMi/tesi_alessandro_tammaro/nevpt2/aug-cc-pvtz/radical/R_0.92/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,0.92)]],basis='aug-cc-pvtz',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
VQE_settings.initial_point = np.load('vqe_su2_output.npy',allow_pickle=True).item()['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Sun Jan  2 21:59:51 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 9
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry True subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.920000000000 AA    0.000000000000   0.000000000000   1.738548034600 Bohr

nuclear repulsion = 4.60154096452174
point group symmetry = Coov
num. orbitals of irrep A1 = 23
num. orbitals of irrep E1x = 14
num. orbitals of irrep E1y = 14
num. orbitals of irrep E2x = 7
num. orbitals of irrep E2y = 7
num. orbitals of irrep E3x = 2
num. orbitals of irrep E3y = 2
number of shells = 22
number of NR pGTOs = 83
number of NR cGTOs = 69
basis = aug-cc-pvtz
ecp = {}
CPU time:         4.21
Freeze 0 electrons in irreps []
    9 free electrons in irreps A1 E1x E1y E2x E2y E3x E3y




******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> ********
method = SymAdaptedROHF-ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpnau_tr4s
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpnau_tr4s
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (E1y) = -0.440529161218769  LUMO (A1) = 0.0282069524432459
Initial guess E= -75.4038883459596  |g|= 0.209725
macro= 0  E= -75.4129386628057  delta_E= -0.00905032  |g|= 0.209725  2 KF 5 JK
macro= 1  E= -75.4136916488429  delta_E= -0.000752986  |g|= 0.0948813  2 KF 5 JK
macro= 2  E= -75.4120024011443  delta_E= 0.00168925  |g|= 0.0608587  2 KF 5 JK
macro= 3  E= -75.4135611589251  delta_E= -0.00155876  |g|= 0.108276  2 KF 5 JK
macro= 4  E= -75.4122086045986  delta_E= 0.00135255  |g|= 0.0590768  2 KF 5 JK
macro= 5  E= -75.4136129243208  delta_E= -0.00140432  |g|= 0.106151  2 KF 5 JK
macro= 6  E= -75.4122907162442  delta_E= 0.00132221  |g|= 0.0599998  2 KF 5 JK
macro= 7  E= -75.4136077865302  delta_E= -0.00131707  |g|= 0.104655  2 KF 5 JK
macro= 8  E= -75.4122352153266  delta_E= 0.00137257  |g|= 0.0594804  2 KF 5 JK
macro= 9  E= -75.4136135701809  delta_E= -0.00137835  |g|= 0.105558  2 KF 5 JK
macro= 10  E= -75.4122339655425  delta_E= 0.0013796  |g|= 0.0595981  2 KF 5 JK
macro= 11  E= -75.4136170639724  delta_E= -0.0013831  |g|= 0.105626  2 KF 5 JK
macro= 12  E= -75.4122091901383  delta_E= 0.00140787  |g|= 0.0594491  2 KF 5 JK
macro= 13  E= -75.4136211324771  delta_E= -0.00141194  |g|= 0.106045  2 KF 5 JK
macro= 14  E= -75.4121944207311  delta_E= 0.00142671  |g|= 0.05939  2 KF 5 JK
macro= 15  E= -75.4136249875519  delta_E= -0.00143057  |g|= 0.106309  2 KF 5 JK
macro= 16  E= -75.4121757561693  delta_E= 0.00144923  |g|= 0.0592883  2 KF 5 JK
macro= 17  E= -75.4136289400405  delta_E= -0.00145318  |g|= 0.106627  2 KF 5 JK
macro= 18  E= -75.4121589811612  delta_E= 0.00146996  |g|= 0.0592014  2 KF 5 JK
macro= 19  E= -75.4136328355948  delta_E= -0.00147385  |g|= 0.106913  2 KF 5 JK
macro= 20  E= -75.4121416987774  delta_E= 0.00149114  |g|= 0.0591059  2 KF 5 JK
macro= 21  E= -75.4136367490182  delta_E= -0.00149505  |g|= 0.107202  2 KF 5 JK
macro= 22  E= -75.4121249287911  delta_E= 0.00151182  |g|= 0.0590124  2 KF 5 JK
macro= 23  E= -75.4136406378084  delta_E= -0.00151571  |g|= 0.107481  2 KF 5 JK
macro= 24  E= -75.4121082523892  delta_E= 0.00153239  |g|= 0.0589164  2 KF 5 JK
macro= 25  E= -75.4136445198135  delta_E= -0.00153627  |g|= 0.107756  2 KF 5 JK
macro= 26  E= -75.4120918597242  delta_E= 0.00155266  |g|= 0.0588199  2 KF 5 JK
macro= 27  E= -75.4136483821006  delta_E= -0.00155652  |g|= 0.108023  2 KF 5 JK
macro= 28  E= -75.4120756793016  delta_E= 0.0015727  |g|= 0.0587223  2 KF 5 JK
macro= 29  E= -75.4136522274348  delta_E= -0.00157655  |g|= 0.108284  2 KF 5 JK
macro= 30  E= -75.412059751394  delta_E= 0.00159248  |g|= 0.0586239  2 KF 5 JK
macro= 31  E= -75.4136560507169  delta_E= -0.0015963  |g|= 0.108539  2 KF 5 JK
macro= 32  E= -75.4120440664765  delta_E= 0.00161198  |g|= 0.0585247  2 KF 5 JK
macro= 33  E= -75.4136598509086  delta_E= -0.00161578  |g|= 0.108787  2 KF 5 JK
macro= 34  E= -75.4120286358385  delta_E= 0.00163122  |g|= 0.0584248  2 KF 5 JK
macro= 35  E= -75.4136636250223  delta_E= -0.00163499  |g|= 0.109029  2 KF 5 JK
macro= 36  E= -75.4120134604836  delta_E= 0.00165016  |g|= 0.0583242  2 KF 5 JK
macro= 37  E= -75.4136673711708  delta_E= -0.00165391  |g|= 0.109265  2 KF 5 JK
macro= 38  E= -75.4119985450268  delta_E= 0.00166883  |g|= 0.0582231  2 KF 5 JK
macro= 39  E= -75.4136710870339  delta_E= -0.00167254  |g|= 0.109496  2 KF 5 JK
macro= 40  E= -75.4119838914882  delta_E= 0.0016872  |g|= 0.0581216  2 KF 5 JK
macro= 41  E= -75.413674770646  delta_E= -0.00169088  |g|= 0.10972  2 KF 5 JK
macro= 42  E= -75.4119695021623  delta_E= 0.00170527  |g|= 0.0580197  2 KF 5 JK
macro= 43  E= -75.413678420003  delta_E= -0.00170892  |g|= 0.109938  2 KF 5 JK
macro= 44  E= -75.4119553783473  delta_E= 0.00172304  |g|= 0.0579175  2 KF 5 JK
macro= 45  E= -75.4136820332712  delta_E= -0.00172665  |g|= 0.11015  2 KF 5 JK
macro= 46  E= -75.411941520987  delta_E= 0.00174051  |g|= 0.057815  2 KF 5 JK
macro= 47  E= -75.4136856086854  delta_E= -0.00174409  |g|= 0.110357  2 KF 5 JK
macro= 48  E= -75.4119279304167  delta_E= 0.00175768  |g|= 0.0577125  2 KF 5 JK
macro= 49  E= -75.4136891446067  delta_E= -0.00176121  |g|= 0.110558  2 KF 5 JK
Canonicalize SCF orbitals
macro X = 50  E=-75.4136891446067  |g|= 0.110558  total 101 KF 301 JK
SCF not converged.
SCF energy = -75.4136891446067

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    9 free electrons in irreps A1 E1x E1y E2x E2y E3x E3y




******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> ********
method = SymAdaptedROHF-ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpnau_tr4s
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpnau_tr4s
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (E1y) = -0.267419555083662  LUMO (A1) = 0.0308914415553249
Initial guess E= -75.415050598904  |g|= 0.0387173
macro= 0  E= -75.4151649395609  delta_E= -0.000114341  |g|= 0.0387173  2 KF 5 JK
macro= 1  E= -75.4151666317771  delta_E= -1.69222e-06  |g|= 0.0237989  2 KF 5 JK
macro= 2  E= -75.4151141943841  delta_E= 5.24374e-05  |g|= 0.0314715  2 KF 5 JK
macro= 3  E= -75.4151782894795  delta_E= -6.40951e-05  |g|= 0.0283684  2 KF 5 JK
macro= 4  E= -75.4151229782948  delta_E= 5.53112e-05  |g|= 0.0304743  2 KF 5 JK
macro= 5  E= -75.4151801139369  delta_E= -5.71356e-05  |g|= 0.0279395  2 KF 5 JK
macro= 6  E= -75.4151228208026  delta_E= 5.72931e-05  |g|= 0.0302578  2 KF 5 JK
macro= 7  E= -75.4151793823524  delta_E= -5.65615e-05  |g|= 0.0279436  2 KF 5 JK
macro= 8  E= -75.4151228106477  delta_E= 5.65717e-05  |g|= 0.0303134  2 KF 5 JK
macro= 9  E= -75.4151794765409  delta_E= -5.66659e-05  |g|= 0.0279458  2 KF 5 JK
macro= 10  E= -75.415122824465  delta_E= 5.66521e-05  |g|= 0.0303055  2 KF 5 JK
macro= 11  E= -75.4151794611508  delta_E= -5.66367e-05  |g|= 0.0279448  2 KF 5 JK
macro= 12  E= -75.4151228230409  delta_E= 5.66381e-05  |g|= 0.0303065  2 KF 5 JK
macro= 13  E= -75.4151794631697  delta_E= -5.66401e-05  |g|= 0.027945  2 KF 5 JK
macro= 14  E= -75.4151228237894  delta_E= 5.66394e-05  |g|= 0.0303064  2 KF 5 JK
macro= 15  E= -75.4151794628988  delta_E= -5.66391e-05  |g|= 0.0279449  2 KF 5 JK
macro= 16  E= -75.4151228241463  delta_E= 5.66388e-05  |g|= 0.0303064  2 KF 5 JK
macro= 17  E= -75.4151794627633  delta_E= -5.66386e-05  |g|= 0.0279449  2 KF 5 JK
macro= 18  E= -75.4151228245427  delta_E= 5.66382e-05  |g|= 0.0303064  2 KF 5 JK
macro= 19  E= -75.4151794625057  delta_E= -5.6638e-05  |g|= 0.0279449  2 KF 5 JK
macro= 20  E= -75.4151228249261  delta_E= 5.66376e-05  |g|= 0.0303064  2 KF 5 JK
macro= 21  E= -75.4151794621891  delta_E= -5.66373e-05  |g|= 0.0279449  2 KF 5 JK
macro= 22  E= -75.4151228253036  delta_E= 5.66369e-05  |g|= 0.0303064  2 KF 5 JK
macro= 23  E= -75.4151794618305  delta_E= -5.66365e-05  |g|= 0.0279449  2 KF 5 JK
macro= 24  E= -75.4151228256741  delta_E= 5.66362e-05  |g|= 0.0303064  2 KF 5 JK
macro= 25  E= -75.4151794614431  delta_E= -5.66358e-05  |g|= 0.0279448  2 KF 5 JK
macro= 26  E= -75.4151228260384  delta_E= 5.66354e-05  |g|= 0.0303065  2 KF 5 JK
macro= 27  E= -75.4151794610357  delta_E= -5.6635e-05  |g|= 0.0279448  2 KF 5 JK
macro= 28  E= -75.4151228263952  delta_E= 5.66346e-05  |g|= 0.0303065  2 KF 5 JK
macro= 29  E= -75.4151794606138  delta_E= -5.66342e-05  |g|= 0.0279448  2 KF 5 JK
macro= 30  E= -75.4151228267456  delta_E= 5.66339e-05  |g|= 0.0303066  2 KF 5 JK
macro= 31  E= -75.4151794601803  delta_E= -5.66334e-05  |g|= 0.0279448  2 KF 5 JK
macro= 32  E= -75.4151228270891  delta_E= 5.66331e-05  |g|= 0.0303066  2 KF 5 JK
macro= 33  E= -75.4151794597389  delta_E= -5.66326e-05  |g|= 0.0279447  2 KF 5 JK
macro= 34  E= -75.4151228274258  delta_E= 5.66323e-05  |g|= 0.0303066  2 KF 5 JK
macro= 35  E= -75.4151794592903  delta_E= -5.66319e-05  |g|= 0.0279447  2 KF 5 JK
macro= 36  E= -75.4151228277558  delta_E= 5.66315e-05  |g|= 0.0303067  2 KF 5 JK
macro= 37  E= -75.4151794588357  delta_E= -5.66311e-05  |g|= 0.0279447  2 KF 5 JK
macro= 38  E= -75.4151228280791  delta_E= 5.66308e-05  |g|= 0.0303067  2 KF 5 JK
macro= 39  E= -75.4151794583757  delta_E= -5.66303e-05  |g|= 0.0279447  2 KF 5 JK
macro= 40  E= -75.4151228283955  delta_E= 5.663e-05  |g|= 0.0303068  2 KF 5 JK
macro= 41  E= -75.4151794579106  delta_E= -5.66295e-05  |g|= 0.0279446  2 KF 5 JK
macro= 42  E= -75.4151228287054  delta_E= 5.66292e-05  |g|= 0.0303068  2 KF 5 JK
macro= 43  E= -75.4151794574409  delta_E= -5.66287e-05  |g|= 0.0279446  2 KF 5 JK
macro= 44  E= -75.4151228290083  delta_E= 5.66284e-05  |g|= 0.0303068  2 KF 5 JK
macro= 45  E= -75.4151794569668  delta_E= -5.6628e-05  |g|= 0.0279446  2 KF 5 JK
macro= 46  E= -75.4151228293045  delta_E= 5.66277e-05  |g|= 0.0303069  2 KF 5 JK
macro= 47  E= -75.415179456488  delta_E= -5.66272e-05  |g|= 0.0279446  2 KF 5 JK
macro= 48  E= -75.4151228295941  delta_E= 5.66269e-05  |g|= 0.0303069  2 KF 5 JK
macro= 49  E= -75.4151794560048  delta_E= -5.66264e-05  |g|= 0.0279446  2 KF 5 JK
Canonicalize SCF orbitals
macro X = 50  E=-75.4151794560048  |g|= 0.0279446  total 101 KF 301 JK
SCF not converged.
SCF energy = -75.4151794560048
**** SCF Summaries ****
Total Energy =                         -75.415179456004751
Nuclear Repulsion Energy =               4.601540964521739
One-electron Energy =                 -113.135054692741150
Two-electron Energy =                   33.118334272214646
Wave-function symmetry = Coov
occupancy for each irrep:     A1  E1x  E1y  E2x  E2y  E3x  E3y
double occ                     3    1    0    0    0    0    0
single occ                     0    0    1    0    0    0    0
**** MO energy ****
                          Roothaan           | alpha              | beta
MO #1   (A1  #1 ) energy= -20.6012487109742  | -20.6182208081556  | -20.5842766137929  occ= 2
MO #2   (A1  #2 ) energy= -1.32072622892796  | -1.3902382148869   | -1.25121424296902  occ= 2
MO #3   (A1  #3 ) energy= -0.670366157526802 | -0.692186106402863 | -0.64854620865074  occ= 2
MO #4   (E1x #1 ) energy= -0.535537599311304 | -0.554796964147621 | -0.516278234474987 occ= 2
MO #5   (E1y #1 ) energy= -0.24374206079603  | -0.642628754831442 | 0.155144633239383  occ= 1
MO #6   (A1  #4 ) energy= 0.0309332552663108 | 0.030393632300005  | 0.0314728782326194 occ= 0
MO #7   (A1  #5 ) energy= 0.137951862136175  | 0.137161692700084  | 0.138742031572284  occ= 0
MO #8   (E1y #2 ) energy= 0.158324625108734  | 0.152618744163733  | 0.164030506053735  occ= 0
MO #9   (E1x #2 ) energy= 0.161869973164698  | 0.161136693322741  | 0.162603253006655  occ= 0
MO #10  (A1  #6 ) energy= 0.188301861779173  | 0.186050247315127  | 0.190553476243221  occ= 0
MO #11  (A1  #7 ) energy= 0.266545447842109  | 0.264741233758812  | 0.268349661925423  occ= 0
MO #12  (E1y #3 ) energy= 0.27396660494894   | 0.270510818271559  | 0.277422391626324  occ= 0
MO #13  (E1x #3 ) energy= 0.277289206762411  | 0.276854845343445  | 0.277723568181376  occ= 0
MO #14  (A1  #8 ) energy= 0.441772332730902  | 0.43779999493253   | 0.445744670529222  occ= 0
MO #15  (E2x #1 ) energy= 0.648179686677751  | 0.638679078110571  | 0.657680295244931  occ= 0
MO #16  (E2y #1 ) energy= 0.648179686677751  | 0.638679078110571  | 0.657680295244931  occ= 0
MO #17  (A1  #9 ) energy= 0.653523349917892  | 0.647395182044496  | 0.659651517791307  occ= 0
MO #18  (E1y #4 ) energy= 0.722952613017044  | 0.713838473857788  | 0.732066752176307  occ= 0
MO #19  (E1x #4 ) energy= 0.728710676035288  | 0.727479934740164  | 0.729941417330414  occ= 0
MO #20  (E1y #5 ) energy= 0.877484435708552  | 0.853961067649218  | 0.90100780376789   occ= 0
MO #21  (E1x #5 ) energy= 0.879821820199141  | 0.876954153151027  | 0.882689487247259  occ= 0
MO #22  (A1  #10) energy= 0.888180834022863  | 0.884561123209649  | 0.891800544836085  occ= 0
MO #23  (A1  #11) energy= 0.921677993378906  | 0.917945319612574  | 0.925410667145244  occ= 0
MO #24  (E2x #2 ) energy= 0.943154662518227  | 0.941626727386668  | 0.944682597649788  occ= 0
MO #25  (E2y #2 ) energy= 0.943154662518234  | 0.941626727386674  | 0.944682597649794  occ= 0
MO #26  (E1y #6 ) energy= 1.01010542798844   | 0.986011616110496  | 1.03419923986638   occ= 0
MO #27  (E1x #6 ) energy= 1.01786222240481   | 1.01474723900521   | 1.02097720580441   occ= 0
MO #28  (A1  #12) energy= 1.02822078005844   | 1.02314190199987   | 1.03329965811715   occ= 0
MO #29  (E1y #7 ) energy= 1.53524347770387   | 1.52082165309999   | 1.54966530230776   occ= 0
MO #30  (E1x #7 ) energy= 1.54288448065629   | 1.54093963715903   | 1.54482932415354   occ= 0
MO #31  (A1  #13) energy= 1.68814670440667   | 1.67832303510964   | 1.69797037370367   occ= 0
MO #32  (E3x #1 ) energy= 2.05210803927282   | 2.04201511091839   | 2.06220096762725   occ= 0
MO #33  (E3y #1 ) energy= 2.05210803927282   | 2.04201511091839   | 2.06220096762724   occ= 0
MO #34  (A1  #14) energy= 2.09892142252163   | 2.08877386316992   | 2.10906898187335   occ= 0
MO #35  (E2x #3 ) energy= 2.13710178506996   | 2.10200294842574   | 2.17220062171418   occ= 0
MO #36  (E2y #3 ) energy= 2.13710178506996   | 2.10200294842574   | 2.17220062171418   occ= 0
MO #37  (E1y #8 ) energy= 2.28842392688568   | 2.26813458101203   | 2.30871327275933   occ= 0
MO #38  (E1x #8 ) energy= 2.30552471244119   | 2.30221122720049   | 2.30883819768188   occ= 0
MO #39  (E2x #4 ) energy= 2.34478482268585   | 2.33641676657788   | 2.35315287879382   occ= 0
MO #40  (E2y #4 ) energy= 2.34478482268585   | 2.33641676657788   | 2.35315287879382   occ= 0
MO #41  (A1  #15) energy= 2.40675740850245   | 2.39881709747561   | 2.41469771952934   occ= 0
MO #42  (A1  #16) energy= 2.5413249092636    | 2.53295935523072   | 2.5496904632965    occ= 0
MO #43  (E1y #9 ) energy= 2.74941926828952   | 2.72706367179552   | 2.77177486478354   occ= 0
MO #44  (E1x #9 ) energy= 2.77095094832811   | 2.76693581420604   | 2.7749660824502    occ= 0
MO #45  (A1  #17) energy= 3.65214890448333   | 3.6472801234686    | 3.65701768549807   occ= 0
MO #46  (E2x #5 ) energy= 4.07652768525702   | 4.07344676922142   | 4.07960860129262   occ= 0
MO #47  (E2y #5 ) energy= 4.07652768525701   | 4.07344676922141   | 4.07960860129261   occ= 0
MO #48  (E1y #10) energy= 4.11371684890111   | 4.06592409253818   | 4.16150960526404   occ= 0
MO #49  (E1x #10) energy= 4.12430444379179   | 4.11788908885111   | 4.13071979873248   occ= 0
MO #50  (E1y #11) energy= 4.31841339503323   | 4.30919220481437   | 4.32763458525209   occ= 0
MO #51  (E1x #11) energy= 4.32851887903231   | 4.32718472724082   | 4.3298530308238    occ= 0
MO #52  (A1  #18) energy= 4.69617513871152   | 4.6912232879651    | 4.70112698945787   occ= 0
MO #53  (A1  #19) energy= 5.29122915023402   | 5.27946179169424   | 5.3029965087737    occ= 0
MO #54  (E1y #12) energy= 5.41639876696085   | 5.39665632743676   | 5.43614120648494   occ= 0
MO #55  (E1x #12) energy= 5.44110718786933   | 5.43723770111574   | 5.44497667462291   occ= 0
MO #56  (A1  #20) energy= 6.13926079587264   | 6.1290299440277    | 6.1494916477176    occ= 0
MO #57  (E3x #2 ) energy= 6.46153098825012   | 6.43655114872736   | 6.48651082777288   occ= 0
MO #58  (E3y #2 ) energy= 6.46153098825012   | 6.43655114872735   | 6.48651082777288   occ= 0
MO #59  (E2x #6 ) energy= 6.63964080193751   | 6.62126532333121   | 6.65801628054382   occ= 0
MO #60  (E2y #6 ) energy= 6.63964080193749   | 6.62126532333119   | 6.6580162805438    occ= 0
MO #61  (E2x #7 ) energy= 7.01798026486244   | 6.97665795426758   | 7.0593025754573    occ= 0
MO #62  (E2y #7 ) energy= 7.01798026486245   | 6.97665795426759   | 7.0593025754573    occ= 0
MO #63  (E1y #13) energy= 7.16888309489023   | 7.13707280350796   | 7.20069338627251   occ= 0
MO #64  (E1x #13) energy= 7.20148965240499   | 7.1958415579384    | 7.20713774687156   occ= 0
MO #65  (E1y #14) energy= 7.32522874426917   | 7.29857303097665   | 7.35188445756169   occ= 0
MO #66  (E1x #14) energy= 7.35850995706168   | 7.35325654742188   | 7.36376336670147   occ= 0
MO #67  (A1  #21) energy= 7.54873233447113   | 7.54065721435762   | 7.55680745458467   occ= 0
MO #68  (A1  #22) energy= 7.82104639561512   | 7.80981226367036   | 7.83228052755989   occ= 0
MO #69  (A1  #23) energy= 13.8925236970944   | 13.8789914270748   | 13.9060559671148   occ= 0
 ** Mulliken pop on meta-lowdin orthogonal AOs  **
 ** Mulliken pop  **
pop of  0 O 1s        1.99999
pop of  0 O 2s        1.79525
pop of  0 O 3s        0.00539
pop of  0 O 4s        0.00138
pop of  0 O 5s        0.00016
pop of  0 O 2px       1.99258
pop of  0 O 2py       0.99705
pop of  0 O 2pz       1.54988
pop of  0 O 3px       0.00088
pop of  0 O 3py       0.00016
pop of  0 O 3pz       0.00243
pop of  0 O 4px       0.00038
pop of  0 O 4py       0.00043
pop of  0 O 4pz       0.00164
pop of  0 O 5px       0.00015
pop of  0 O 5py       0.00004
pop of  0 O 5pz       0.00012
pop of  0 O 3dxy      0.00000
pop of  0 O 3dyz      0.00104
pop of  0 O 3dz^2     0.00997
pop of  0 O 3dxz      0.00212
pop of  0 O 3dx2-y2    0.00000
pop of  0 O 4dxy      0.00000
pop of  0 O 4dyz      0.00016
pop of  0 O 4dz^2     0.00062
pop of  0 O 4dxz      0.00036
pop of  0 O 4dx2-y2    0.00000
pop of  0 O 5dxy      0.00000
pop of  0 O 5dyz      0.00001
pop of  0 O 5dz^2     0.00019
pop of  0 O 5dxz      0.00003
pop of  0 O 5dx2-y2    0.00000
pop of  0 O 4f-3      0.00000
pop of  0 O 4f-2      0.00000
pop of  0 O 4f-1      0.00001
pop of  0 O 4f 0      0.00117
pop of  0 O 4f 1      0.00019
pop of  0 O 4f 2      0.00000
pop of  0 O 4f 3      0.00000
pop of  0 O 5f-3      0.00000
pop of  0 O 5f-2      0.00000
pop of  0 O 5f-1      0.00001
pop of  0 O 5f 0      0.00010
pop of  0 O 5f 1      0.00004
pop of  0 O 5f 2      0.00000
pop of  0 O 5f 3      0.00000
pop of  1 H 1s        0.60848
pop of  1 H 2s        0.01451
pop of  1 H 3s        0.00687
pop of  1 H 4s        0.00022
pop of  1 H 2px       0.00320
pop of  1 H 2py       0.00057
pop of  1 H 2pz       0.00070
pop of  1 H 3px       0.00002
pop of  1 H 3py       0.00038
pop of  1 H 3pz       0.00022
pop of  1 H 4px       0.00000
pop of  1 H 4py       0.00006
pop of  1 H 4pz       0.00023
pop of  1 H 3dxy      0.00000
pop of  1 H 3dyz      0.00004
pop of  1 H 3dz^2     0.00032
pop of  1 H 3dxz      0.00003
pop of  1 H 3dx2-y2    0.00000
pop of  1 H 4dxy      0.00000
pop of  1 H 4dyz      0.00003
pop of  1 H 4dz^2     0.00014
pop of  1 H 4dxz      0.00002
pop of  1 H 4dx2-y2    0.00000
 ** Mulliken atomic charges  **
charge of  0O =     -0.36395
charge of  1H =      0.36395
Dipole moment(X, Y, Z, Debye):  0.00000,  0.00000,  1.73442
#INFO: **** input file is /Users/mario/Documents/GitHub/UniMi/tesi_alessandro_tammaro/nevpt2/aug-cc-pvtz/radical/R_0.92/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,0.92)]],basis='aug-cc-pvtz',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
VQE_settings.initial_point = np.load('vqe_su2_output.npy',allow_pickle=True).item()['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Sun Jan  2 22:00:14 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:       130.12

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp1mbhghy0
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp1mbhghy0
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.243742060796037  LUMO = 0.475093095773669
Initial guess E= -75.4152087468109  |g|= 0.00116242
macro= 0  E= -75.4152094008427  delta_E= -6.54032e-07  |g|= 0.00116242  1 KF 4 JK
macro= 1  E= -75.4152094008427  delta_E= 0  |g|= 1.66747e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.4152094008427  |g|= 1.66747e-07  total 3 KF 9 JK
converged SCF energy = -75.4152094008427
#INFO: **** input file is /Users/mario/Documents/GitHub/UniMi/tesi_alessandro_tammaro/nevpt2/aug-cc-pvtz/radical/R_0.92/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,0.92)]],basis='aug-cc-pvtz',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
VQE_settings.initial_point = np.load('vqe_su2_output.npy',allow_pickle=True).item()['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Sun Jan  2 22:00:15 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:       135.80

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpk3i_99xp
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpk3i_99xp
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.243743422319042  LUMO = 0.475093627080824
Initial guess E= -75.4152087458768  |g|= 0.00116276
macro= 0  E= -75.4152094008426  delta_E= -6.54966e-07  |g|= 0.00116276  1 KF 3 JK
macro= 1  E= -75.4152094008426  delta_E= 0  |g|= 1.6736e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.4152094008426  |g|= 1.6736e-07  total 3 KF 8 JK
converged SCF energy = -75.4152094008426
#INFO: **** input file is /Users/mario/Documents/GitHub/UniMi/tesi_alessandro_tammaro/nevpt2/aug-cc-pvtz/radical/R_0.92/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,0.92)]],basis='aug-cc-pvtz',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
VQE_settings.initial_point = np.load('vqe_su2_output.npy',allow_pickle=True).item()['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Sun Jan  2 22:00:17 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:       142.05

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp8v9qgzjc
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp8v9qgzjc
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.244032067899784  LUMO = 0.0309276298360734
Initial guess E= -75.4158769680658  |g|= 0.0137952
macro= 0  E= -75.4159218177286  delta_E= -4.48497e-05  |g|= 0.000489962  2 KF 7 JK
macro= 1  E= -75.4159218177286  delta_E= -8.52651e-14  |g|= 8.58722e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.4159218177286  |g|= 8.58722e-06  total 4 KF 12 JK
converged SCF energy = -75.4159218177286
u+d contributions  -0.0549804886337377
uu+dd contributions  -0.08634600303308695
ud contributions  -0.18310180705896284
u+d contributions  -0.008049732450995547
uu+dd contributions  -0.03931565518664948
ud contributions  -0.135900468846726
#INFO: **** input file is /Users/mario/Documents/GitHub/UniMi/tesi_alessandro_tammaro/nevpt2/aug-cc-pvtz/radical/R_0.92/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,0.92)]],basis='aug-cc-pvtz',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
VQE_settings.initial_point = np.load('vqe_su2_output.npy',allow_pickle=True).item()['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Sun Jan  2 22:00:20 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:       155.60

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpme9bt8tb
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 2  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpme9bt8tb
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.2445325566146  LUMO = 0.474910066480766
Initial guess E= -75.415208491274  |g|= 0.0012743
macro= 0  E= -75.4152094008426  delta_E= -9.09569e-07  |g|= 0.0012743  1 KF 2 JK
macro= 1  E= -75.4152094008427  delta_E= -5.68434e-14  |g|= 3.18347e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.4152094008427  |g|= 3.18347e-07  total 3 KF 7 JK
converged SCF energy = -75.4152094008427
#INFO: **** input file is /Users/mario/Documents/GitHub/UniMi/tesi_alessandro_tammaro/nevpt2/aug-cc-pvtz/radical/R_0.92/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,0.92)]],basis='aug-cc-pvtz',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % np.nan)

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
VQE_settings.initial_point = np.load('vqe_su2_output.npy',allow_pickle=True).item()['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Sun Jan  2 22:00:22 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:       161.20

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmplyo2ikgw
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 2  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmplyo2ikgw
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.244819922831454  LUMO = 0.0309413509349832
Initial guess E= -75.415839221085  |g|= 0.00890352
macro= 0  E= -75.4158661350556  delta_E= -2.6914e-05  |g|= 0.000345604  2 KF 7 JK
macro= 1  E= -75.4158661350556  delta_E= -1.42109e-14  |g|= 5.41614e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.4158661350556  |g|= 5.41614e-06  total 4 KF 12 JK
converged SCF energy = -75.4158661350556
u+d contributions  -0.021468829710219458
uu+dd contributions  -0.045649108356315235
ud contributions  -0.1091732376108598
u+d contributions  -0.004753632116303428
uu+dd contributions  -0.028914189706736343
ud contributions  -0.09242955738118516
----- VQE data ------
target_sector:  None
optimizer:  bfgs
max_iter:  1000
instance:  statevector_simulator
shots:  1000
ansatz:  q_uccsd
initial_point:  None


 >>>>> AM I PREPARED?  False
Overwritten attributes  get_hcore get_ovlp  of <class 'pyscf.soscf.newton_ah.newton.<locals>.SecondOrderROHF'>
Overwritten attributes  get_hcore get_ovlp  of <class 'pyscf.scf.rohf.ROHF'>
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf/gto/mole.py:1089: UserWarning: Function mol.dumps drops attribute nao_nr because it is not JSON-serializable
  warnings.warn(msg)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf/gto/mole.py:1089: UserWarning: Function mol.dumps drops attribute energy_nuc because it is not JSON-serializable
  warnings.warn(msg)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf/fci/direct_nosym.py:179: UserWarning: direct_nosym.kernel is not able to diagonalize non-Hermitian Hamiltonian. If h1e and h2e is not hermtian, calling symmetric diagonlization in eig can lead to wrong results.
  warnings.warn('direct_nosym.kernel is not able to diagonalize '
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/quantum_info/operators/symplectic/pauli.py:185: DeprecationWarning: Initializing Pauli from `Pauli(z=z, x=x)` kwargs is deprecated as of version 0.17.0 and will be removed no earlier than 3 months after the release date. Use tuple initialization `Pauli((z, x))` instead.
  base_z, base_x, base_phase = self._from_array_deprecated(z, x)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/chemistry/fermionic_operator.py:431: DeprecationWarning: sgn_prod is deprecated and will be removed no earlier than 3 months after the release date. Use `dot` instead.
  pauli_prod = Pauli.sgn_prod(a_i[alpha], a_j[beta])
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/chemistry/fermionic_operator.py:431: DeprecationWarning: sgn_prod is deprecated and will be removed no earlier than 3 months after the release date. Use `dot` instead.
  pauli_prod = Pauli.sgn_prod(a_i[alpha], a_j[beta])
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/chemistry/fermionic_operator.py:431: DeprecationWarning: sgn_prod is deprecated and will be removed no earlier than 3 months after the release date. Use `dot` instead.
  pauli_prod = Pauli.sgn_prod(a_i[alpha], a_j[beta])
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/chemistry/fermionic_operator.py:431: DeprecationWarning: sgn_prod is deprecated and will be removed no earlier than 3 months after the release date. Use `dot` instead.
  pauli_prod = Pauli.sgn_prod(a_i[alpha], a_j[beta])
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/chemistry/fermionic_operator.py:431: DeprecationWarning: sgn_prod is deprecated and will be removed no earlier than 3 months after the release date. Use `dot` instead.
  pauli_prod = Pauli.sgn_prod(a_i[alpha], a_j[beta])
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/chemistry/fermionic_operator.py:431: DeprecationWarning: sgn_prod is deprecated and will be removed no earlier than 3 months after the release date. Use `dot` instead.
  pauli_prod = Pauli.sgn_prod(a_i[alpha], a_j[beta])
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/chemistry/fermionic_operator.py:459: DeprecationWarning: sgn_prod is deprecated and will be removed no earlier than 3 months after the release date. Use `dot` instead.
  pauli_prod_1 = Pauli.sgn_prod(a_i[alpha], a_k[beta])
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/chemistry/fermionic_operator.py:459: DeprecationWarning: sgn_prod is deprecated and will be removed no earlier than 3 months after the release date. Use `dot` instead.
  pauli_prod_1 = Pauli.sgn_prod(a_i[alpha], a_k[beta])
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/chemistry/fermionic_operator.py:459: DeprecationWarning: sgn_prod is deprecated and will be removed no earlier than 3 months after the release date. Use `dot` instead.
  pauli_prod_1 = Pauli.sgn_prod(a_i[alpha], a_k[beta])
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/chemistry/fermionic_operator.py:459: DeprecationWarning: sgn_prod is deprecated and will be removed no earlier than 3 months after the release date. Use `dot` instead.
  pauli_prod_1 = Pauli.sgn_prod(a_i[alpha], a_k[beta])
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/chemistry/fermionic_operator.py:459: DeprecationWarning: sgn_prod is deprecated and will be removed no earlier than 3 months after the release date. Use `dot` instead.
  pauli_prod_1 = Pauli.sgn_prod(a_i[alpha], a_k[beta])
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/chemistry/fermionic_operator.py:459: DeprecationWarning: sgn_prod is deprecated and will be removed no earlier than 3 months after the release date. Use `dot` instead.
  pauli_prod_1 = Pauli.sgn_prod(a_i[alpha], a_k[beta])
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/weighted_pauli_operator.py:291: DeprecationWarning: sgn_prod is deprecated and will be removed no earlier than 3 months after the release date. Use `dot` instead.
  new_pauli, sign = Pauli.sgn_prod(existed_pauli, pauli)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:122: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  hamiltonian += weight * pauli.to_spmatrix()
two_qubit_reduction only works with parity qubit mapping but you have jordan_wigner. We switch two_qubit_reduction to False.
qse operators prepared for  u
qse operators prepared for  d
qse operators prepared for  uu
qse operators prepared for  dd
qse operators prepared for  ud
In the tapering subroutine, i=0, E(i)=-74.799001, i_min=-1
In the tapering subroutine, i=1, E(i)=-75.243598, i_min=0
In the tapering subroutine, i=2, E(i)=-75.415209, i_min=1
In the tapering subroutine, i=3, E(i)=-74.927240, i_min=2
In the tapering subroutine, i=4, E(i)=-75.410945, i_min=2
In the tapering subroutine, i=5, E(i)=-74.916578, i_min=2
In the tapering subroutine, i=6, E(i)=-74.858327, i_min=2
In the tapering subroutine, i=7, E(i)=-74.968598, i_min=2
In the tapering subroutine, i=8, E(i)=-75.243598, i_min=2
In the tapering subroutine, i=9, E(i)=-75.262225, i_min=2
In the tapering subroutine, i=10, E(i)=-74.953208, i_min=2
In the tapering subroutine, i=11, E(i)=-75.415209, i_min=2
In the tapering subroutine, i=12, E(i)=-74.941840, i_min=2
In the tapering subroutine, i=13, E(i)=-75.410945, i_min=2
In the tapering subroutine, i=14, E(i)=-74.968598, i_min=2
In the tapering subroutine, i=15, E(i)=-74.896846, i_min=2
after tapering qubits(H) =  4
qse operators tapered for  hamiltonian
qse operators tapered for  qse_s_u
qse operators tapered for  qse_h_u
qse operators tapered for  qse_s_d
qse operators tapered for  qse_h_d
qse operators tapered for  qse_s_uu
qse operators tapered for  qse_h_uu
qse operators tapered for  qse_s_dd
qse operators tapered for  qse_h_dd
qse operators tapered for  qse_s_ud
qse operators tapered for  qse_h_ud
          
q_0: ─────
     ┌───┐
q_1: ┤ X ├
     └───┘
q_2: ─────
          
q_3: ─────
          
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/common.py:381: DeprecationWarning: The QuantumCircuit.__iadd__() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  qc += qc_slice
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py:876: DeprecationWarning: The QuantumCircuit.extend() method is being deprecated. Use the compose() (potentially with the inplace=True argument) and tensor() methods which are more flexible w.r.t circuit register compatibility.
  return self.extend(rhs)
two_qubit_reduction only works with parity qubit mapping but you have jordan_wigner. We switch two_qubit_reduction to False.
u+d contributions  -0.004753667247866328
uu+dd contributions  -0.028914232702053747
ud contributions  -0.09241385679286333
 >>>>> AM I PREPARED?  True
          
q_0: ─────
     ┌───┐
q_1: ┤ X ├
     └───┘
q_2: ─────
          
q_3: ─────
          
two_qubit_reduction only works with parity qubit mapping but you have jordan_wigner. We switch two_qubit_reduction to False.
u+d contributions  -0.004752708190346887
uu+dd contributions  -0.02891359709678601
ud contributions  -0.09241409463192948
 >>>>> AM I PREPARED?  True
          
q_0: ─────
     ┌───┐
q_1: ┤ X ├
     └───┘
q_2: ─────
          
q_3: ─────
          
u+d contributions  -0.004752708190346887
uu+dd contributions  -0.02891359709678601
ud contributions  -0.09241409463192948
