#INFO: **** input file is /Users/mario/Documents/GitHub/UniMi/tesi_alessandro_tammaro/nevpt2/6-31g/radical/R_1.16/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,1.16)]],basis='6-31g',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % BO_IAO_external_solver.solve_with_fci()[0])

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_external_solver.solve_with_fci()[0])

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64')  Threads 1
Python 3.9.7 | packaged by conda-forge | (default, Sep  2 2021, 17:58:46) 
[Clang 11.1.0 ]
numpy 1.21.2  scipy 1.7.1
Date: Wed Dec 29 21:10:20 2021
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/caltech_entanglement/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 9
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry True subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   1.160000000000 AA    0.000000000000   0.000000000000   2.192082304495 Bohr

nuclear repulsion = 3.64949800634483
point group symmetry = Coov
num. orbitals of irrep A1 = 7
num. orbitals of irrep E1x = 2
num. orbitals of irrep E1y = 2
number of shells = 7
number of NR pGTOs = 26
number of NR cGTOs = 11
basis = 6-31g
ecp = {}
CPU time:         5.63
Freeze 0 electrons in irreps []
    9 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> ********
method = SymAdaptedROHF-ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpxw1ssiy6
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpxw1ssiy6
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (E1x) = -0.411571111407029  LUMO (A1) = 0.095141122953543
Initial guess E= -75.3236931334237  |g|= 0.181527
macro= 0  E= -75.3369853092041  delta_E= -0.0132922  |g|= 0.181527  2 KF 5 JK
macro= 1  E= -75.3373879145815  delta_E= -0.000402605  |g|= 0.0747229  2 KF 5 JK
macro= 2  E= -75.3362797724196  delta_E= 0.00110814  |g|= 0.0460163  2 KF 5 JK
macro= 3  E= -75.3367105851544  delta_E= -0.000430813  |g|= 0.0852589  2 KF 5 JK
macro= 4  E= -75.3368501224908  delta_E= -0.000139537  |g|= 0.0625527  2 KF 5 JK
macro= 5  E= -75.3374015900681  delta_E= -0.000551468  |g|= 0.0724726  2 KF 5 JK
macro= 6  E= -75.3363515142816  delta_E= 0.00105008  |g|= 0.0418301  2 KF 5 JK
macro= 7  E= -75.3366306710121  delta_E= -0.000279157  |g|= 0.0837074  2 KF 5 JK
macro= 8  E= -75.3368118990575  delta_E= -0.000181228  |g|= 0.063436  2 KF 5 JK
macro= 9  E= -75.3374115256607  delta_E= -0.000599627  |g|= 0.0731739  2 KF 5 JK
macro= 10  E= -75.3362884175542  delta_E= 0.00112311  |g|= 0.0411005  2 KF 5 JK
macro= 11  E= -75.3365755302572  delta_E= -0.000287113  |g|= 0.0850774  2 KF 5 JK
macro= 12  E= -75.3367795535549  delta_E= -0.000204023  |g|= 0.064519  2 KF 5 JK
macro= 13  E= -75.33642962293  delta_E= 0.000349931  |g|= 0.0741996  2 KF 5 JK
macro= 14  E= -75.3369245758893  delta_E= -0.000494953  |g|= 0.0693807  2 KF 5 JK
macro= 15  E= -75.3364520330901  delta_E= 0.000472543  |g|= 0.0704039  2 KF 5 JK
macro= 16  E= -75.3369372600497  delta_E= -0.000485227  |g|= 0.0688648  2 KF 5 JK
macro= 17  E= -75.3364550672498  delta_E= 0.000482193  |g|= 0.070085  2 KF 5 JK
macro= 18  E= -75.3369361365146  delta_E= -0.000481069  |g|= 0.0687623  2 KF 5 JK
macro= 19  E= -75.3364515031573  delta_E= 0.000484633  |g|= 0.0701352  2 KF 5 JK
macro= 20  E= -75.3369349442844  delta_E= -0.000483441  |g|= 0.0688402  2 KF 5 JK
macro= 21  E= -75.3364473021129  delta_E= 0.000487642  |g|= 0.0701817  2 KF 5 JK
macro= 22  E= -75.3369339204188  delta_E= -0.000486618  |g|= 0.068938  2 KF 5 JK
macro= 23  E= -75.3364431030558  delta_E= 0.000490817  |g|= 0.0702224  2 KF 5 JK
macro= 24  E= -75.3369329141746  delta_E= -0.000489811  |g|= 0.0690361  2 KF 5 JK
macro= 25  E= -75.336438912841  delta_E= 0.000494001  |g|= 0.0702623  2 KF 5 JK
macro= 26  E= -75.3369319020008  delta_E= -0.000492989  |g|= 0.0691339  2 KF 5 JK
macro= 27  E= -75.33643472403  delta_E= 0.000497178  |g|= 0.0703023  2 KF 5 JK
macro= 28  E= -75.3369308828481  delta_E= -0.000496159  |g|= 0.0692316  2 KF 5 JK
macro= 29  E= -75.3364305357282  delta_E= 0.000500347  |g|= 0.0703425  2 KF 5 JK
macro= 30  E= -75.3369298569346  delta_E= -0.000499321  |g|= 0.069329  2 KF 5 JK
macro= 31  E= -75.3364263480805  delta_E= 0.000503509  |g|= 0.0703828  2 KF 5 JK
macro= 32  E= -75.3369288243531  delta_E= -0.000502476  |g|= 0.0694262  2 KF 5 JK
macro= 33  E= -75.3364221612823  delta_E= 0.000506663  |g|= 0.0704233  2 KF 5 JK
macro= 34  E= -75.336927785165  delta_E= -0.000505624  |g|= 0.0695232  2 KF 5 JK
macro= 35  E= -75.3364179755221  delta_E= 0.00050981  |g|= 0.070464  2 KF 5 JK
macro= 36  E= -75.3369267394296  delta_E= -0.000508764  |g|= 0.06962  2 KF 5 JK
macro= 37  E= -75.3364137909868  delta_E= 0.000512948  |g|= 0.0705048  2 KF 5 JK
macro= 38  E= -75.3369256872072  delta_E= -0.000511896  |g|= 0.0697165  2 KF 5 JK
macro= 39  E= -75.3364096078623  delta_E= 0.000516079  |g|= 0.0705458  2 KF 5 JK
macro= 40  E= -75.3369246285581  delta_E= -0.000515021  |g|= 0.0698129  2 KF 5 JK
macro= 41  E= -75.3364054263344  delta_E= 0.000519202  |g|= 0.0705869  2 KF 5 JK
macro= 42  E= -75.3369235635441  delta_E= -0.000518137  |g|= 0.069909  2 KF 5 JK
macro= 43  E= -75.3364012465882  delta_E= 0.000522317  |g|= 0.0706282  2 KF 5 JK
macro= 44  E= -75.3369224922268  delta_E= -0.000521246  |g|= 0.0700049  2 KF 5 JK
macro= 45  E= -75.3363970688078  delta_E= 0.000525423  |g|= 0.0706696  2 KF 5 JK
macro= 46  E= -75.3369214146687  delta_E= -0.000524346  |g|= 0.0701006  2 KF 5 JK
macro= 47  E= -75.336392893177  delta_E= 0.000528521  |g|= 0.0707112  2 KF 5 JK
macro= 48  E= -75.3369203309328  delta_E= -0.000527438  |g|= 0.0701961  2 KF 5 JK
macro= 49  E= -75.3363887198784  delta_E= 0.000531611  |g|= 0.0707529  2 KF 5 JK
Canonicalize SCF orbitals
macro X = 50  E=-75.3363887198784  |g|= 0.0707529  total 101 KF 301 JK
SCF not converged.
SCF energy = -75.3363887198784

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    9 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> ********
method = SymAdaptedROHF-ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpxw1ssiy6
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpxw1ssiy6
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (E1x) = -0.255348576011408  LUMO (A1) = 0.158600071630658
Initial guess E= -75.3378999910406  |g|= 0.0443222
macro= 0  E= -75.3382203992857  delta_E= -0.000320408  |g|= 0.0443222  2 KF 5 JK
macro= 1  E= -75.3382082151427  delta_E= 1.21841e-05  |g|= 0.0150223  2 KF 5 JK
macro= 2  E= -75.3381869297967  delta_E= 2.12853e-05  |g|= 0.0208128  2 KF 5 JK
macro= 3  E= -75.3382533124957  delta_E= -6.63827e-05  |g|= 0.0197005  2 KF 5 JK
macro= 4  E= -75.3382137929428  delta_E= 3.95196e-05  |g|= 0.0160024  2 KF 5 JK
macro= 5  E= -75.3382454703135  delta_E= -3.16774e-05  |g|= 0.0169342  2 KF 5 JK
macro= 6  E= -75.3382118956356  delta_E= 3.35747e-05  |g|= 0.0169937  2 KF 5 JK
macro= 7  E= -75.3382457310061  delta_E= -3.38354e-05  |g|= 0.0171108  2 KF 5 JK
macro= 8  E= -75.3382118957854  delta_E= 3.38352e-05  |g|= 0.0169746  2 KF 5 JK
macro= 9  E= -75.3382457136507  delta_E= -3.38179e-05  |g|= 0.0171057  2 KF 5 JK
macro= 10  E= -75.3382118343528  delta_E= 3.38793e-05  |g|= 0.0169798  2 KF 5 JK
macro= 11  E= -75.3382456888529  delta_E= -3.38545e-05  |g|= 0.01711  2 KF 5 JK
macro= 12  E= -75.3382117685997  delta_E= 3.39203e-05  |g|= 0.016984  2 KF 5 JK
macro= 13  E= -75.3382456642712  delta_E= -3.38957e-05  |g|= 0.0171156  2 KF 5 JK
macro= 14  E= -75.3382117027689  delta_E= 3.39615e-05  |g|= 0.0169878  2 KF 5 JK
macro= 15  E= -75.3382456396376  delta_E= -3.39369e-05  |g|= 0.0171215  2 KF 5 JK
macro= 16  E= -75.3382116369547  delta_E= 3.40027e-05  |g|= 0.0169915  2 KF 5 JK
macro= 17  E= -75.338245614964  delta_E= -3.3978e-05  |g|= 0.0171273  2 KF 5 JK
macro= 18  E= -75.3382115711558  delta_E= 3.40438e-05  |g|= 0.0169952  2 KF 5 JK
macro= 19  E= -75.3382455902557  delta_E= -3.40191e-05  |g|= 0.0171332  2 KF 5 JK
macro= 20  E= -75.3382115053716  delta_E= 3.40849e-05  |g|= 0.0169989  2 KF 5 JK
macro= 21  E= -75.3382455655143  delta_E= -3.40601e-05  |g|= 0.0171391  2 KF 5 JK
macro= 22  E= -75.3382114396023  delta_E= 3.41259e-05  |g|= 0.0170026  2 KF 5 JK
macro= 23  E= -75.3382455407405  delta_E= -3.41011e-05  |g|= 0.0171449  2 KF 5 JK
macro= 24  E= -75.3382113738482  delta_E= 3.41669e-05  |g|= 0.0170063  2 KF 5 JK
macro= 25  E= -75.3382455159343  delta_E= -3.41421e-05  |g|= 0.0171508  2 KF 5 JK
macro= 26  E= -75.3382113081095  delta_E= 3.42078e-05  |g|= 0.01701  2 KF 5 JK
macro= 27  E= -75.3382454910957  delta_E= -3.4183e-05  |g|= 0.0171567  2 KF 5 JK
macro= 28  E= -75.3382112423864  delta_E= 3.42487e-05  |g|= 0.0170137  2 KF 5 JK
macro= 29  E= -75.3382454662249  delta_E= -3.42238e-05  |g|= 0.0171625  2 KF 5 JK
macro= 30  E= -75.3382111766792  delta_E= 3.42895e-05  |g|= 0.0170174  2 KF 5 JK
macro= 31  E= -75.338245441322  delta_E= -3.42646e-05  |g|= 0.0171684  2 KF 5 JK
macro= 32  E= -75.338211110988  delta_E= 3.43303e-05  |g|= 0.0170211  2 KF 5 JK
macro= 33  E= -75.3382454163869  delta_E= -3.43054e-05  |g|= 0.0171742  2 KF 5 JK
macro= 34  E= -75.3382110453133  delta_E= 3.43711e-05  |g|= 0.0170248  2 KF 5 JK
macro= 35  E= -75.3382453914199  delta_E= -3.43461e-05  |g|= 0.0171801  2 KF 5 JK
macro= 36  E= -75.3382109796551  delta_E= 3.44118e-05  |g|= 0.0170285  2 KF 5 JK
macro= 37  E= -75.3382453664209  delta_E= -3.43868e-05  |g|= 0.0171859  2 KF 5 JK
macro= 38  E= -75.3382109140135  delta_E= 3.44524e-05  |g|= 0.0170322  2 KF 5 JK
macro= 39  E= -75.3382453413901  delta_E= -3.44274e-05  |g|= 0.0171917  2 KF 5 JK
macro= 40  E= -75.3382108483892  delta_E= 3.4493e-05  |g|= 0.0170359  2 KF 5 JK
macro= 41  E= -75.3382453163275  delta_E= -3.44679e-05  |g|= 0.0171975  2 KF 5 JK
macro= 42  E= -75.3382107827819  delta_E= 3.45335e-05  |g|= 0.0170396  2 KF 5 JK
macro= 43  E= -75.3382452912331  delta_E= -3.45085e-05  |g|= 0.0172034  2 KF 5 JK
macro= 44  E= -75.3382107171921  delta_E= 3.4574e-05  |g|= 0.0170433  2 KF 5 JK
macro= 45  E= -75.3382452661071  delta_E= -3.45489e-05  |g|= 0.0172092  2 KF 5 JK
macro= 46  E= -75.33821065162  delta_E= 3.46145e-05  |g|= 0.017047  2 KF 5 JK
macro= 47  E= -75.3382452409494  delta_E= -3.45893e-05  |g|= 0.017215  2 KF 5 JK
macro= 48  E= -75.3382105860659  delta_E= 3.46549e-05  |g|= 0.0170508  2 KF 5 JK
macro= 49  E= -75.3382452157603  delta_E= -3.46297e-05  |g|= 0.0172208  2 KF 5 JK
Canonicalize SCF orbitals
macro X = 50  E=-75.3382452157603  |g|= 0.0172208  total 101 KF 301 JK
SCF not converged.
SCF energy = -75.3382452157603
**** SCF Summaries ****
Total Energy =                         -75.338245215760338
Nuclear Repulsion Energy =               3.649498006344828
One-electron Energy =                 -111.343158240389087
Two-electron Energy =                   32.355415018283928
Wave-function symmetry = Coov
occupancy for each irrep:     A1  E1x  E1y
double occ                     3    0    1
single occ                     0    1    0
**** MO energy ****
                          Roothaan           | alpha              | beta
MO #1   (A1  #1 ) energy= -20.6261374083515  | -20.6431394707575  | -20.6091353459456  occ= 2
MO #2   (A1  #2 ) energy= -1.25738023367647  | -1.33112196323688  | -1.18363850411606  occ= 2
MO #3   (A1  #3 ) energy= -0.591835954098781 | -0.609769626155287 | -0.573902282042274 occ= 2
MO #4   (E1y #1 ) energy= -0.524857871088197 | -0.54474843918097  | -0.504967302995424 occ= 2
MO #5   (E1x #1 ) energy= -0.228296985784978 | -0.631905269391254 | 0.1753112978213    occ= 1
MO #6   (A1  #4 ) energy= 0.165290283871192  | 0.158132393702193  | 0.172448174040191  occ= 0
MO #7   (A1  #5 ) energy= 0.953627407433994  | 0.949126549350801  | 0.958128265517186  occ= 0
MO #8   (E1y #2 ) energy= 1.14181114026221   | 1.13326052544059   | 1.15036175508384   occ= 0
MO #9   (E1x #2 ) energy= 1.15005303200292   | 1.07348925337834   | 1.22661681062751   occ= 0
MO #10  (A1  #6 ) energy= 1.23407537467785   | 1.22127671405099   | 1.24687403530472   occ= 0
MO #11  (A1  #7 ) energy= 1.49940960218182   | 1.48177090370231   | 1.51704830066132   occ= 0
 ** Mulliken pop on meta-lowdin orthogonal AOs  **
 ** Mulliken pop  **
pop of  0 O 1s        1.99999
pop of  0 O 2s        1.89666
pop of  0 O 3s        0.00171
pop of  0 O 2px       0.99996
pop of  0 O 2py       1.99947
pop of  0 O 2pz       1.39873
pop of  0 O 3px       0.00004
pop of  0 O 3py       0.00053
pop of  0 O 3pz       0.00002
pop of  1 H 1s        0.69640
pop of  1 H 2s        0.00648
 ** Mulliken atomic charges  **
charge of  0O =     -0.29712
charge of  1H =      0.29712
Dipole moment(X, Y, Z, Debye):  0.00000,  0.00000,  2.17955
#INFO: **** input file is /Users/mario/Documents/GitHub/UniMi/tesi_alessandro_tammaro/nevpt2/6-31g/radical/R_1.16/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,1.16)]],basis='6-31g',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % BO_IAO_external_solver.solve_with_fci()[0])

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_external_solver.solve_with_fci()[0])

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64')  Threads 1
Python 3.9.7 | packaged by conda-forge | (default, Sep  2 2021, 17:58:46) 
[Clang 11.1.0 ]
numpy 1.21.2  scipy 1.7.1
Date: Wed Dec 29 21:10:21 2021
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/caltech_entanglement/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        10.22

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpzq8ak7y0
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpzq8ak7y0
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.228296985784985  LUMO = 0.273527566634621
Initial guess E= -75.3382619984843  |g|= 0.000376021
macro= 0  E= -75.3382620848607  delta_E= -8.63764e-08  |g|= 0.000376021  1 KF 4 JK
macro= 1  E= -75.3382620848607  delta_E= 1.42109e-14  |g|= 3.09707e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3382620848607  |g|= 3.09707e-08  total 3 KF 9 JK
converged SCF energy = -75.3382620848607
#INFO: **** input file is /Users/mario/Documents/GitHub/UniMi/tesi_alessandro_tammaro/nevpt2/6-31g/radical/R_1.16/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,1.16)]],basis='6-31g',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % BO_IAO_external_solver.solve_with_fci()[0])

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_external_solver.solve_with_fci()[0])

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64')  Threads 1
Python 3.9.7 | packaged by conda-forge | (default, Sep  2 2021, 17:58:46) 
[Clang 11.1.0 ]
numpy 1.21.2  scipy 1.7.1
Date: Wed Dec 29 21:10:21 2021
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/caltech_entanglement/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        10.69

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp99ltk68j
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp99ltk68j
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.228297477710854  LUMO = 0.273527794010478
Initial guess E= -75.3382619982871  |g|= 0.000375246
macro= 0  E= -75.3382620848606  delta_E= -8.65736e-08  |g|= 0.000375246  1 KF 3 JK
macro= 1  E= -75.3382620848606  delta_E= 0  |g|= 3.11882e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3382620848606  |g|= 3.11882e-08  total 3 KF 8 JK
converged SCF energy = -75.3382620848606
#INFO: **** input file is /Users/mario/Documents/GitHub/UniMi/tesi_alessandro_tammaro/nevpt2/6-31g/radical/R_1.16/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,1.16)]],basis='6-31g',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % BO_IAO_external_solver.solve_with_fci()[0])

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_external_solver.solve_with_fci()[0])

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64')  Threads 1
Python 3.9.7 | packaged by conda-forge | (default, Sep  2 2021, 17:58:46) 
[Clang 11.1.0 ]
numpy 1.21.2  scipy 1.7.1
Date: Wed Dec 29 21:10:21 2021
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/caltech_entanglement/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        11.22

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpk172umoz
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpk172umoz
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.228297514395854  LUMO = 0.165296092238379
Initial guess E= -75.3383083165466  |g|= 0.00725069
macro= 0  E= -75.3383244477457  delta_E= -1.61312e-05  |g|= 0.00725069  1 KF 4 JK
macro= 1  E= -75.3383244477458  delta_E= -1.42109e-13  |g|= 1.08503e-05  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3383244477458  |g|= 1.08503e-05  total 3 KF 9 JK
converged SCF energy = -75.3383244477458
u+d contributions  -0.025191437514041827
uu+dd contributions  -0.03543201279465623
ud contributions  -0.06589610178151535
u+d contributions  -0.004087557775265752
uu+dd contributions  -0.014267882018625335
ud contributions  -0.04460997387760542
#INFO: **** input file is /Users/mario/Documents/GitHub/UniMi/tesi_alessandro_tammaro/nevpt2/6-31g/radical/R_1.16/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,1.16)]],basis='6-31g',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % BO_IAO_external_solver.solve_with_fci()[0])

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_external_solver.solve_with_fci()[0])

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64')  Threads 1
Python 3.9.7 | packaged by conda-forge | (default, Sep  2 2021, 17:58:46) 
[Clang 11.1.0 ]
numpy 1.21.2  scipy 1.7.1
Date: Wed Dec 29 21:10:23 2021
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/caltech_entanglement/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        20.71

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpvm5zqigu
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 2  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpvm5zqigu
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.228669305384134  LUMO = 0.273424838492083
Initial guess E= -75.3382618993947  |g|= 0.000532328
macro= 0  E= -75.3382620848606  delta_E= -1.85466e-07  |g|= 0.000532328  1 KF 2 JK
macro= 1  E= -75.3382620848606  delta_E= 0  |g|= 7.10894e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3382620848606  |g|= 7.10894e-08  total 3 KF 7 JK
converged SCF energy = -75.3382620848606
#INFO: **** input file is /Users/mario/Documents/GitHub/UniMi/tesi_alessandro_tammaro/nevpt2/6-31g/radical/R_1.16/main.py ****
import numpy as np
import sys
sys.path.append('../../../src/')
from basis_constructor import Basis_Constructor
from bo_class          import BO_class
from bo_solver         import BO_solver
from fci_qse_solver    import FCI_QSE_solver
from fci_solver        import FCI_solver
from vqe_qse_solver    import VQE_QSE_solver
from pyscf             import gto,scf
from VQE_types         import vqe_data

outfile = open('results.txt','w')
mol = gto.M(atom=[['O',(0,0,0)],['H',(0,0,1.16)]],basis='6-31g',spin=1,charge=0,
            symmetry=True,verbose=4).build()
mf  = scf.ROHF(mol)
mf  = scf.newton(mf)
mf.kernel()
if(not mf.converged):
   mf.kernel(mf.make_rdm1())
mf.analyze()

BC_object = Basis_Constructor(mol,mf)
BC_object.compute_core_valence()
BC_object.compute_external()

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s frozen] FCI energy %.12f \n" % BO_IAO_external_solver.solve_with_fci()[0])

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s frozen] NEVPT2 energy  %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

BO_IAO = BO_class(mol,mf)
BO_IAO.transform_integrals(BC_object.valence)
BO_IAO = BO_IAO.freeze_orbitals([0,1])
BO_IAO_solver = BO_solver(BO_IAO)
outfile.write("IAO, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_solver.solve_with_scf()[1])
outfile.write("IAO, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_solver.solve_with_fci()[0])

BO_IAO_external = BO_class(mol,mf)
BO_IAO_external.transform_integrals(BC_object.return_basis())
BO_IAO_external = BO_IAO_external.freeze_orbitals([0,1])
BO_IAO_external_solver = BO_solver(BO_IAO_external)
outfile.write("FULL, [1s,2s frozen] SCF energy %.12f \n" % BO_IAO_external_solver.solve_with_scf()[1])
outfile.write("FULL, [1s,2s frozen] FCI energy %.12f \n" % BO_IAO_external_solver.solve_with_fci()[0])

SOLVER = FCI_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+FCI [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())
SOLVER = FCI_QSE_solver(BO_IAO,BO_IAO_external)
outfile.write("FCI+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

VQE_settings = vqe_data()
SOLVER = VQE_QSE_solver(BO_IAO,BO_IAO_external)
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(q-UCCSD)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_q_uccsd_output.npy',allow_pickle=True).item()
outfile.write("VQE(q-UCCSD) energy %.12f \n" % x['energy'])
VQE_settings.ansatz = 'su2'
VQE_settings.optimizer = 'cg'
VQE_settings.reps = 3
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (I) %.12f \n" % x['energy'])
VQE_settings.instance = 'statevector_simulator'
VQE_settings.optimizer = 'cobyla'
VQE_settings.max_iter = 0
VQE_settings.initial_point = x['opt_params']
SOLVER.set_quantum_variables(VQE_settings)
outfile.write("VQE(Ry)+QSE [1s,2s frozen] NEVPT2 energy %.12f \n" % SOLVER.compute_nevpt2_energy())

#  -----------------------------------------------------------------------------

x = np.load('vqe_su2_output.npy',allow_pickle=True).item()
outfile.write("VQE(Ry) energy (II) %.12f \n" % x['energy'])
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64')  Threads 1
Python 3.9.7 | packaged by conda-forge | (default, Sep  2 2021, 17:58:46) 
[Clang 11.1.0 ]
numpy 1.21.2  scipy 1.7.1
Date: Wed Dec 29 21:10:23 2021
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/caltech_entanglement/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        21.09

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpkco_wv2c
max_memory 4000 MB (current use 0 MB)
num. doubly occ = 2  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpkco_wv2c
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.22866930675126  LUMO = 0.165266109487071
Initial guess E= -75.3383128335432  |g|= 0.00475021
macro= 0  E= -75.338323298425  delta_E= -1.04649e-05  |g|= 2.11477e-05  2 KF 6 JK
macro= 1  E= -75.338323298425  delta_E= 0  |g|= 2.36039e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.338323298425  |g|= 2.36039e-06  total 4 KF 11 JK
converged SCF energy = -75.338323298425
u+d contributions  -0.015023555107018974
uu+dd contributions  -0.02200585700136154
ud contributions  -0.04131515202538857
u+d contributions  -0.004017223574800014
uu+dd contributions  -0.010981164113443595
ud contributions  -0.030284966385617902
----- VQE data ------
target_sector:  None
optimizer:  bfgs
max_iter:  1000
instance:  statevector_simulator
shots:  1000
ansatz:  q_uccsd
initial_point:  None


 >>>>> AM I PREPARED?  False
qse operators prepared for  u
qse operators prepared for  d
qse operators prepared for  uu
qse operators prepared for  dd
qse operators prepared for  ud
In the tapering subroutine, i=0, E(i)=-74.946262, i_min=-1
In the tapering subroutine, i=1, E(i)=-75.180428, i_min=0
In the tapering subroutine, i=2, E(i)=-75.338262, i_min=1
In the tapering subroutine, i=3, E(i)=-75.053502, i_min=2
In the tapering subroutine, i=4, E(i)=-75.335946, i_min=2
In the tapering subroutine, i=5, E(i)=-75.046723, i_min=2
In the tapering subroutine, i=6, E(i)=-74.791398, i_min=2
In the tapering subroutine, i=7, E(i)=-75.090304, i_min=2
In the tapering subroutine, i=8, E(i)=-75.180428, i_min=2
In the tapering subroutine, i=9, E(i)=-75.165115, i_min=2
In the tapering subroutine, i=10, E(i)=-75.076121, i_min=2
In the tapering subroutine, i=11, E(i)=-75.338262, i_min=2
In the tapering subroutine, i=12, E(i)=-75.068727, i_min=2
In the tapering subroutine, i=13, E(i)=-75.335946, i_min=2
In the tapering subroutine, i=14, E(i)=-75.090304, i_min=2
In the tapering subroutine, i=15, E(i)=-74.831179, i_min=2
after tapering qubits(H) =  4
qse operators tapered for  hamiltonian
qse operators tapered for  qse_s_u
qse operators tapered for  qse_h_u
qse operators tapered for  qse_s_d
qse operators tapered for  qse_h_d
qse operators tapered for  qse_s_uu
qse operators tapered for  qse_h_uu
qse operators tapered for  qse_s_dd
qse operators tapered for  qse_h_dd
qse operators tapered for  qse_s_ud
qse operators tapered for  qse_h_ud
          
q_0: ─────
     ┌───┐
q_1: ┤ X ├
     └───┘
q_2: ─────
          
q_3: ─────
          
u+d contributions  -0.004017152903409245
uu+dd contributions  -0.01098110957112984
ud contributions  -0.030265450818487954
 >>>>> AM I PREPARED?  True
          
q_0: ─────
     ┌───┐
q_1: ┤ X ├
     └───┘
q_2: ─────
          
q_3: ─────
          
u+d contributions  -0.0040179440306612035
uu+dd contributions  -0.010981888899931897
ud contributions  -0.030266133888831964
 >>>>> AM I PREPARED?  True
          
q_0: ─────
     ┌───┐
q_1: ┤ X ├
     └───┘
q_2: ─────
          
q_3: ─────
          
u+d contributions  -0.0040179440306612035
uu+dd contributions  -0.010981888899931897
ud contributions  -0.030266133888831964
