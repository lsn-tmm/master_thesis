/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf/lib/misc.py:46: H5pyDeprecationWarning: Using default_file_mode other than 'r' is deprecated. Pass the mode to h5py.File() instead.
  h5py.get_config().default_file_mode = 'a'
#####################################################
START: sto-6g
#####################################################
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:41 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 9
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry True subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.969700000000 AA    0.000000000000   0.000000000000   1.832467422991 Bohr

nuclear repulsion = 4.36569834728266
point group symmetry = Coov
num. orbitals of irrep A1 = 4
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 4
number of NR pGTOs = 36
number of NR cGTOs = 6
basis = sto-6g
ecp = {}
CPU time:         0.76


******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> ********
method = SymAdaptedROHF-ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmp213xjg4n
max_memory 4000 MB (current use 68 MB)
num. doubly occ = 4  num. singly occ = 1
Freeze 0 electrons in irreps []
    9 free electrons in irreps A1 E1x E1y
Set gradient conv threshold to 3.16228e-05
init E= -74.7062883594831
HOMO (E1y) = -0.342720850757893  LUMO (A1) = 0.479940048466636
cycle= 1 E= -75.058842175396  delta_E= -0.353  |g|= 0.188  |ddm|= 1.19
HOMO (E1y) = -0.0333932368560539  LUMO (A1) = 0.622673093606806
cycle= 2 E= -75.0752515219489  delta_E= -0.0164  |g|= 0.026  |ddm|= 0.23
HOMO (E1y) = -0.0887985739525584  LUMO (A1) = 0.626102922199024
cycle= 3 E= -75.0755950257288  delta_E= -0.000344  |g|= 0.00359  |ddm|= 0.0401
HOMO (E1y) = -0.0896981371991359  LUMO (A1) = 0.626173265050759
cycle= 4 E= -75.0756000327174  delta_E= -5.01e-06  |g|= 0.000173  |ddm|= 0.00504
HOMO (E1y) = -0.0896999484220666  LUMO (A1) = 0.626305894007266
cycle= 5 E= -75.0756000459099  delta_E= -1.32e-08  |g|= 2.46e-06  |ddm|= 0.000285
HOMO (E1y) = -0.0896990532374145  LUMO (A1) = 0.626301194870446
cycle= 6 E= -75.0756000459128  delta_E= -2.87e-12  |g|= 1.05e-08  |ddm|= 3.59e-06
HOMO (E1y) = -0.0896990504556008  LUMO (A1) = 0.626301204960854
Extra cycle  E= -75.0756000459128  delta_E= 1.42e-14  |g|= 1.64e-09  |ddm|= 1.37e-08
converged SCF energy = -75.0756000459128
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:41 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         2.41

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Overwritten attributes  get_hcore get_ovlp  of <class 'pyscf.soscf.newton_ah.newton.<locals>.SecondOrderROHF'>
Overwritten attributes  get_hcore get_ovlp  of <class 'pyscf.scf.rohf.ROHF'>




******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpiw02fhpw
max_memory 4000 MB (current use 85 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpiw02fhpw
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 85 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.0896990531664338  LUMO = 0.626301205005442
Initial guess E= -75.0756000459128  |g|= 3.73186e-10
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf/gto/mole.py:1089: UserWarning: Function mol.dumps drops attribute nao_nr because it is not JSON-serializable
  warnings.warn(msg)
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf/gto/mole.py:1089: UserWarning: Function mol.dumps drops attribute energy_nuc because it is not JSON-serializable
  warnings.warn(msg)
macro= 0  E= -75.0756000459128  delta_E= 0  |g|= 3.73186e-10  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.0756000459128  |g|= 3.73186e-10  total 2 KF 4 JK
converged SCF energy = -75.0756000459128
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:41 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         2.47

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpx795xsa8
max_memory 4000 MB (current use 86 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpx795xsa8
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 86 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.0896990534651661  LUMO = 0.626301205045716
Initial guess E= -75.0756000459128  |g|= 3.82677e-11
macro= 0  E= -75.0756000459128  delta_E= 0  |g|= 3.82677e-11  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.0756000459128  |g|= 3.82677e-11  total 2 KF 4 JK
converged SCF energy = -75.0756000459128
-----------------------------------------------------
number of orbitals   6
number of electrons  (5, 4)
energy offset        4.365698347282665
irreps of orbitals   ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
-----------------------------------------------------
reconstruction of HF energy  -75.07560004591278 -75.07560004591275
-----------------------------------------------------
number of orbitals   5
number of electrons  (4, 3)
energy offset        -55.79934135122457
irreps of orbitals   ['A1', 'A1', 'E1x', 'E1y', 'A1']
-----------------------------------------------------
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:41 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         2.49

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpoh36f550
max_memory 4000 MB (current use 86 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpoh36f550
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 86 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.0896990534651652  LUMO = 0.626301205045716
Initial guess E= -75.0756000459128  |g|= 3.49072e-11
macro= 0  E= -75.0756000459128  delta_E= -1.42109e-14  |g|= 3.49072e-11  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.0756000459128  |g|= 3.49072e-11  total 2 KF 4 JK
converged SCF energy = -75.0756000459128
reconstruction of HF energy  -75.07560004591278 -75.07560004591278
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:41 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         2.51

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpkc2maocg
max_memory 4000 MB (current use 86 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpkc2maocg
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 86 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.0896990534651652  LUMO = 0.626301205045716
Initial guess E= -75.0756000459128  |g|= 3.49072e-11
macro= 0  E= -75.0756000459128  delta_E= -1.42109e-14  |g|= 3.49072e-11  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.0756000459128  |g|= 3.49072e-11  total 2 KF 4 JK
converged SCF energy = -75.0756000459128

WARN: RMP2 method does not support ROHF method. ROHF object is converted to UHF object and UMP2 method is called.


******** <class 'pyscf.mp.ump2.UMP2'> ********
nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_memory 4000 MB (current use 86 MB)
E(UMP2) = -75.0916946217523  E_corr = -0.0160945758394753

WARN: RCISD method does not support ROHF method. ROHF object is converted to UHF object and UCISD method is called.


******** <class 'pyscf.ci.ucisd.UCISD'> ********
CISD nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-09
max_cycle = 50
max_space = 12
lindep = 0
nroots = 1
max_memory 4000 MB (current use 86 MB)
Init t2, MP2 energy = -0.0160945758394753
UCISD converged
E(UCISD) = -75.10140007934099  E_corr = -0.02580003342820807

WARN: RCCSD method does not support ROHF method. ROHF object is converted to UHF object and UCCSD method is called.


******** <class 'pyscf.cc.uccsd.UCCSD'> ********
CC2 = 0
CCSD nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-07
conv_tol_normt = 1e-06
diis_space = 6
diis_start_cycle = 0
diis_start_energy_diff = 1e+09
max_memory 4000 MB (current use 86 MB)
Init t2, MP2 energy = -0.0160945758394753
Init E_corr(CCSD) = -0.0166525562301549
cycle = 1  E_corr(CCSD) = -0.0223010962832961  dE = -0.00564854005  norm(t1,t2) = 0.0296278
cycle = 2  E_corr(CCSD) = -0.0243707867661665  dE = -0.00206969048  norm(t1,t2) = 0.0122536
cycle = 3  E_corr(CCSD) = -0.0257541963605578  dE = -0.00138340959  norm(t1,t2) = 0.00573737
cycle = 4  E_corr(CCSD) = -0.025769798633938  dE = -1.56022734e-05  norm(t1,t2) = 0.00177121
cycle = 5  E_corr(CCSD) = -0.0258034305857353  dE = -3.36319518e-05  norm(t1,t2) = 0.000559011
cycle = 6  E_corr(CCSD) = -0.0257978241741393  dE = 5.6064116e-06  norm(t1,t2) = 0.000114374
cycle = 7  E_corr(CCSD) = -0.0258003818885013  dE = -2.55771436e-06  norm(t1,t2) = 2.26312e-05
cycle = 8  E_corr(CCSD) = -0.0257998543593077  dE = 5.27529194e-07  norm(t1,t2) = 4.67184e-06
cycle = 9  E_corr(CCSD) = -0.0257998238615035  dE = 3.04978043e-08  norm(t1,t2) = 6.34389e-07
UCCSD converged
E(UCCSD) = -75.10139986977428  E_corr = -0.02579982386150345
UCCSD(T) correction = -1.71999743032911e-07
<class 'pyscf.mcscf.casci.CASCI'> does not have attributes  frozen

******** CASCI flags ********
CAS (4e+3e, 5o), ncore = 0, nvir = 0
natorb = False
canonicalization = True
sorting_mo_energy = False
max_memory 4000 (MB)
******** <class 'pyscf.fci.direct_spin1.FCISolver'> ********
max. cycles = 200
conv_tol = 1e-08
davidson only = False
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 400
spin = None
Density matrix diagonal elements [1.99394649 1.97626903 1.         1.99930187 0.03048261]
CASCI converged
CASCI E = -75.1014003300179  E(CI) = -19.3020589787933  S^2 = 0.7500000
Hartree-Fock    -75.07560004591278
Moller-Plesset  -75.09169462175225
CISD            -75.10140007934099
CCSD            -75.10139986977428
CCSD(T)         -75.10140004177403
CASCI           -75.10140033001791
#####################################################
END: sto-6g
#####################################################
#####################################################
START: 6-31g
#####################################################
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:41 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 9
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry True subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.969700000000 AA    0.000000000000   0.000000000000   1.832467422991 Bohr

nuclear repulsion = 4.36569834728266
point group symmetry = Coov
num. orbitals of irrep A1 = 7
num. orbitals of irrep E1x = 2
num. orbitals of irrep E1y = 2
number of shells = 7
number of NR pGTOs = 26
number of NR cGTOs = 11
basis = 6-31g
ecp = {}
CPU time:         2.76


******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> ********
method = SymAdaptedROHF-ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmp1j5vfrz7
max_memory 4000 MB (current use 87 MB)
num. doubly occ = 4  num. singly occ = 1
Freeze 0 electrons in irreps []
    9 free electrons in irreps A1 E1x E1y
Set gradient conv threshold to 3.16228e-05
init E= -75.0131614249433
HOMO (E1x) = -0.430456755694774  LUMO (A1) = 0.172052130326994
cycle= 1 E= -75.3508958363397  delta_E= -0.338  |g|= 0.183  |ddm|= 0.819
HOMO (E1x) = -0.224342470260284  LUMO (A1) = 0.202804919470467
cycle= 2 E= -75.3612955716881  delta_E= -0.0104  |g|= 0.0344  |ddm|= 0.143
HOMO (E1x) = -0.244171812933266  LUMO (A1) = 0.214246262496891
cycle= 3 E= -75.3617767949349  delta_E= -0.000481  |g|= 0.0163  |ddm|= 0.0317
HOMO (E1x) = -0.235970340065773  LUMO (A1) = 0.217421659901784
cycle= 4 E= -75.3618428813642  delta_E= -6.61e-05  |g|= 0.00305  |ddm|= 0.00857
HOMO (E1x) = -0.235943303329286  LUMO (A1) = 0.217697768375114
cycle= 5 E= -75.3618483016309  delta_E= -5.42e-06  |g|= 0.000348  |ddm|= 0.00358
HOMO (E1x) = -0.235977689564488  LUMO (A1) = 0.217708339773587
cycle= 6 E= -75.3618483783363  delta_E= -7.67e-08  |g|= 7.07e-05  |ddm|= 0.000503
HOMO (E1x) = -0.236001763777192  LUMO (A1) = 0.217711653906207
cycle= 7 E= -75.3618483804035  delta_E= -2.07e-09  |g|= 2.83e-06  |ddm|= 7.76e-05
HOMO (E1x) = -0.236001441668617  LUMO (A1) = 0.217711955014742
cycle= 8 E= -75.3618483804075  delta_E= -4.06e-12  |g|= 3.38e-07  |ddm|= 3.31e-06
HOMO (E1x) = -0.236001502521473  LUMO (A1) = 0.217711919079801
Extra cycle  E= -75.3618483804075  delta_E=    0  |g|= 1.07e-07  |ddm|= 3.3e-07
converged SCF energy = -75.3618483804075
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:41 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         2.90

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpkrr14h31
max_memory 4000 MB (current use 87 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpkrr14h31
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 87 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.236001436037899  LUMO = 0.423120478963475
Initial guess E= -75.3618483804075  |g|= 1.43597e-08
macro= 0  E= -75.3618483804075  delta_E= 0  |g|= 1.43597e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3618483804075  |g|= 1.43597e-08  total 2 KF 4 JK
converged SCF energy = -75.3618483804075
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:42 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         2.94

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmp981rtx0e
max_memory 4000 MB (current use 87 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmp981rtx0e
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 87 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.236001435653239  LUMO = 0.423120476795119
Initial guess E= -75.3618483804076  |g|= 1.35693e-09
macro= 0  E= -75.3618483804076  delta_E= 0  |g|= 1.35693e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3618483804076  |g|= 1.35693e-09  total 2 KF 4 JK
converged SCF energy = -75.3618483804076
-----------------------------------------------------
number of orbitals   6
number of electrons  (5, 4)
energy offset        4.365698347282665
irreps of orbitals   ['A1', 'A1', 'A1', 'E1y', 'E1x', 'A1']
-----------------------------------------------------
reconstruction of HF energy  -75.36184838040754 -75.36184838040757
-----------------------------------------------------
number of orbitals   5
number of electrons  (4, 3)
energy offset        -55.8270029286076
irreps of orbitals   ['A1', 'A1', 'E1y', 'E1x', 'A1']
-----------------------------------------------------
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:42 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         2.96

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmp43lejls3
max_memory 4000 MB (current use 87 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmp43lejls3
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 87 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.236001435653239  LUMO = 0.423120476795119
Initial guess E= -75.3618483804075  |g|= 1.23192e-09
macro= 0  E= -75.3618483804075  delta_E= 0  |g|= 1.23192e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3618483804075  |g|= 1.23192e-09  total 2 KF 4 JK
converged SCF energy = -75.3618483804075
reconstruction of HF energy  -75.36184838040754 -75.36184838040751
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:42 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         2.98

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpoo3wjll8
max_memory 4000 MB (current use 87 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpoo3wjll8
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 87 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.236001435653239  LUMO = 0.423120476795119
Initial guess E= -75.3618483804075  |g|= 1.23192e-09
macro= 0  E= -75.3618483804075  delta_E= 0  |g|= 1.23192e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3618483804075  |g|= 1.23192e-09  total 2 KF 4 JK
converged SCF energy = -75.3618483804075

WARN: RMP2 method does not support ROHF method. ROHF object is converted to UHF object and UMP2 method is called.


******** <class 'pyscf.mp.ump2.UMP2'> ********
nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_memory 4000 MB (current use 87 MB)
E(UMP2) = -75.3747054805172  E_corr = -0.0128571001097156

WARN: RCISD method does not support ROHF method. ROHF object is converted to UHF object and UCISD method is called.


******** <class 'pyscf.ci.ucisd.UCISD'> ********
CISD nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-09
max_cycle = 50
max_space = 12
lindep = 0
nroots = 1
max_memory 4000 MB (current use 87 MB)
Init t2, MP2 energy = -0.0128571001097156
UCISD converged
E(UCISD) = -75.38215999366808  E_corr = -0.02031161326057174

WARN: RCCSD method does not support ROHF method. ROHF object is converted to UHF object and UCCSD method is called.


******** <class 'pyscf.cc.uccsd.UCCSD'> ********
CC2 = 0
CCSD nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-07
conv_tol_normt = 1e-06
diis_space = 6
diis_start_cycle = 0
diis_start_energy_diff = 1e+09
max_memory 4000 MB (current use 87 MB)
Init t2, MP2 energy = -0.0128571001097156
Init E_corr(CCSD) = -0.0132660148143726
cycle = 1  E_corr(CCSD) = -0.0176628480890048  dE = -0.00439683327  norm(t1,t2) = 0.0266183
cycle = 2  E_corr(CCSD) = -0.0192452285648694  dE = -0.00158238048  norm(t1,t2) = 0.0109625
cycle = 3  E_corr(CCSD) = -0.020286351004386  dE = -0.00104112244  norm(t1,t2) = 0.00506356
cycle = 4  E_corr(CCSD) = -0.0202875547114749  dE = -1.20370709e-06  norm(t1,t2) = 0.00148621
cycle = 5  E_corr(CCSD) = -0.0203132334472776  dE = -2.56787358e-05  norm(t1,t2) = 0.000484273
cycle = 6  E_corr(CCSD) = -0.0203103169420664  dE = 2.91650521e-06  norm(t1,t2) = 0.00010298
cycle = 7  E_corr(CCSD) = -0.0203115515776121  dE = -1.23463555e-06  norm(t1,t2) = 1.92698e-05
cycle = 8  E_corr(CCSD) = -0.0203111493144128  dE = 4.02263199e-07  norm(t1,t2) = 2.89913e-06
cycle = 9  E_corr(CCSD) = -0.0203111401511856  dE = 9.16322722e-09  norm(t1,t2) = 4.47831e-07
UCCSD converged
E(UCCSD) = -75.38215952055869  E_corr = -0.02031114015118562
UCCSD(T) correction = -1.56455246560424e-06

******** CASCI flags ********
CAS (4e+3e, 5o), ncore = 0, nvir = 0
natorb = False
canonicalization = True
sorting_mo_energy = False
max_memory 4000 (MB)
******** <class 'pyscf.fci.direct_spin1.FCISolver'> ********
max. cycles = 200
conv_tol = 1e-08
davidson only = False
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 400
spin = None
Density matrix diagonal elements [1.99345614 1.98210571 1.99955464 1.         0.02488351]
CASCI converged
CASCI E = -75.382162599613  E(CI) = -19.5551596710054  S^2 = 0.7500000
Hartree-Fock    -75.36184838040751
Moller-Plesset  -75.37470548051722
CISD            -75.38215999366808
CCSD            -75.38215952055869
CCSD(T)         -75.38216108511115
CASCI           -75.382162599613
#####################################################
END: 6-31g
#####################################################
#####################################################
START: 6-31++g
#####################################################
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:42 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 9
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry True subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.969700000000 AA    0.000000000000   0.000000000000   1.832467422991 Bohr

nuclear repulsion = 4.36569834728266
point group symmetry = Coov
num. orbitals of irrep A1 = 10
num. orbitals of irrep E1x = 3
num. orbitals of irrep E1y = 3
number of shells = 10
number of NR pGTOs = 31
number of NR cGTOs = 16
basis = 6-31++g
ecp = {}
CPU time:         3.19


******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> ********
method = SymAdaptedROHF-ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpch0bn2y_
max_memory 4000 MB (current use 88 MB)
num. doubly occ = 4  num. singly occ = 1
Freeze 0 electrons in irreps []
    9 free electrons in irreps A1 E1x E1y
Set gradient conv threshold to 3.16228e-05
init E= -75.0230793636618
HOMO (E1y) = -0.428212614631262  LUMO (A1) = 0.0396401781638414
cycle= 1 E= -75.3557998850465  delta_E= -0.333  |g|= 0.167  |ddm|= 0.792
HOMO (E1y) = -0.25899467135298  LUMO (A1) = 0.0370687773707732
cycle= 2 E= -75.3665708184958  delta_E= -0.0108  |g|= 0.0317  |ddm|= 0.175
HOMO (E1y) = -0.247879424969271  LUMO (A1) = 0.0417410729324826
cycle= 3 E= -75.3670490300608  delta_E= -0.000478  |g|= 0.00733  |ddm|= 0.0528
HOMO (E1y) = -0.252525969913061  LUMO (A1) = 0.0419005615486243
cycle= 4 E= -75.3670775582476  delta_E= -2.85e-05  |g|= 0.00409  |ddm|= 0.01
HOMO (E1y) = -0.250752919101825  LUMO (A1) = 0.0420447649877449
cycle= 5 E= -75.3670832547085  delta_E= -5.7e-06  |g|= 0.000532  |ddm|= 0.00416
HOMO (E1y) = -0.250723061523488  LUMO (A1) = 0.0420644846444795
cycle= 6 E= -75.3670834970761  delta_E= -2.42e-07  |g|= 0.000169  |ddm|= 0.00105
HOMO (E1y) = -0.250751085833746  LUMO (A1) = 0.04206503383286
cycle= 7 E= -75.3670835186607  delta_E= -2.16e-08  |g|= 2.07e-05  |ddm|= 0.000338
HOMO (E1y) = -0.250749514822357  LUMO (A1) = 0.0420660133930292
cycle= 8 E= -75.367083519221  delta_E= -5.6e-10  |g|= 2.59e-06  |ddm|= 4.91e-05
HOMO (E1y) = -0.250749295683663  LUMO (A1) = 0.0420661505304734
Extra cycle  E= -75.3670835192251  delta_E= -4.04e-12  |g|= 8.09e-07  |ddm|= 4.74e-06
converged SCF energy = -75.3670835192251
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:42 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         3.34

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpki76pt3c
max_memory 4000 MB (current use 87 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpki76pt3c
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 87 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.250748855139493  LUMO = 0.411593674321638
Initial guess E= -75.367083519225  |g|= 5.03809e-08
macro= 0  E= -75.367083519225  delta_E= 0  |g|= 5.03809e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.367083519225  |g|= 5.03809e-08  total 2 KF 4 JK
converged SCF energy = -75.367083519225
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:42 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         3.39

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmp0kga_yw3
max_memory 4000 MB (current use 87 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmp0kga_yw3
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 87 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.250748965319083  LUMO = 0.411593664594308
Initial guess E= -75.3670835192252  |g|= 1.99927e-09
macro= 0  E= -75.3670835192252  delta_E= 0  |g|= 1.99927e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3670835192252  |g|= 1.99927e-09  total 2 KF 4 JK
converged SCF energy = -75.3670835192252
-----------------------------------------------------
number of orbitals   6
number of electrons  (5, 4)
energy offset        4.365698347282665
irreps of orbitals   ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
-----------------------------------------------------
reconstruction of HF energy  -75.36708351922506 -75.36708351922519
-----------------------------------------------------
number of orbitals   5
number of electrons  (4, 3)
energy offset        -55.826984528212684
irreps of orbitals   ['A1', 'A1', 'E1x', 'E1y', 'A1']
-----------------------------------------------------
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:42 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         3.41

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpi7vb7bk9
max_memory 4000 MB (current use 87 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpi7vb7bk9
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 87 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.250748965319082  LUMO = 0.411593664594307
Initial guess E= -75.3670835192251  |g|= 1.09324e-09
macro= 0  E= -75.3670835192251  delta_E= 0  |g|= 1.09324e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3670835192251  |g|= 1.09324e-09  total 2 KF 4 JK
converged SCF energy = -75.3670835192251
reconstruction of HF energy  -75.36708351922506 -75.36708351922513
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:42 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         3.43

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmp3o0wgh9w
max_memory 4000 MB (current use 87 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmp3o0wgh9w
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 87 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.250748965319082  LUMO = 0.411593664594307
Initial guess E= -75.3670835192251  |g|= 1.09324e-09
macro= 0  E= -75.3670835192251  delta_E= 0  |g|= 1.09324e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3670835192251  |g|= 1.09324e-09  total 2 KF 4 JK
converged SCF energy = -75.3670835192251

WARN: RMP2 method does not support ROHF method. ROHF object is converted to UHF object and UMP2 method is called.


******** <class 'pyscf.mp.ump2.UMP2'> ********
nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_memory 4000 MB (current use 87 MB)
E(UMP2) = -75.3798130757486  E_corr = -0.012729556523504

WARN: RCISD method does not support ROHF method. ROHF object is converted to UHF object and UCISD method is called.


******** <class 'pyscf.ci.ucisd.UCISD'> ********
CISD nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-09
max_cycle = 50
max_space = 12
lindep = 0
nroots = 1
max_memory 4000 MB (current use 87 MB)
Init t2, MP2 energy = -0.012729556523504
UCISD converged
E(UCISD) = -75.38715780569501  E_corr = -0.02007428646987417

WARN: RCCSD method does not support ROHF method. ROHF object is converted to UHF object and UCCSD method is called.


******** <class 'pyscf.cc.uccsd.UCCSD'> ********
CC2 = 0
CCSD nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-07
conv_tol_normt = 1e-06
diis_space = 6
diis_start_cycle = 0
diis_start_energy_diff = 1e+09
max_memory 4000 MB (current use 87 MB)
Init t2, MP2 energy = -0.012729556523504
Init E_corr(CCSD) = -0.0131331244310511
cycle = 1  E_corr(CCSD) = -0.0174741985052139  dE = -0.00434107407  norm(t1,t2) = 0.0263754
cycle = 2  E_corr(CCSD) = -0.0190314724581878  dE = -0.00155727395  norm(t1,t2) = 0.010828
cycle = 3  E_corr(CCSD) = -0.0200502847574617  dE = -0.0010188123  norm(t1,t2) = 0.00498412
cycle = 4  E_corr(CCSD) = -0.0200509746608278  dE = -6.89903366e-07  norm(t1,t2) = 0.00145751
cycle = 5  E_corr(CCSD) = -0.0200758210575578  dE = -2.48463967e-05  norm(t1,t2) = 0.000470258
cycle = 6  E_corr(CCSD) = -0.0200730518425199  dE = 2.76921504e-06  norm(t1,t2) = 9.88339e-05
cycle = 7  E_corr(CCSD) = -0.0200741944048448  dE = -1.14256232e-06  norm(t1,t2) = 1.8155e-05
cycle = 8  E_corr(CCSD) = -0.0200738157637363  dE = 3.78641109e-07  norm(t1,t2) = 2.65362e-06
cycle = 9  E_corr(CCSD) = -0.0200738082509711  dE = 7.51276516e-09  norm(t1,t2) = 4.08905e-07
UCCSD converged
E(UCCSD) = -75.3871573274761  E_corr = -0.02007380825097114
UCCSD(T) correction = -1.709600732818e-06

******** CASCI flags ********
CAS (4e+3e, 5o), ncore = 0, nvir = 0
natorb = False
canonicalization = True
sorting_mo_energy = False
max_memory 4000 (MB)
******** <class 'pyscf.fci.direct_spin1.FCISolver'> ********
max. cycles = 200
conv_tol = 1e-08
davidson only = False
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 400
spin = None
Density matrix diagonal elements [1.99347827 1.98247698 1.99956993 1.         0.02447483]
CASCI converged
CASCI E = -75.3871606547171  E(CI) = -19.5601761265044  S^2 = 0.7500000
Hartree-Fock    -75.36708351922513
Moller-Plesset  -75.37981307574864
CISD            -75.38715780569501
CCSD            -75.3871573274761
CCSD(T)         -75.38715903707684
CASCI           -75.38716065471705
#####################################################
END: 6-31++g
#####################################################
#####################################################
START: 6-31g**
#####################################################
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:42 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 9
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry True subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.969700000000 AA    0.000000000000   0.000000000000   1.832467422991 Bohr

nuclear repulsion = 4.36569834728266
point group symmetry = Coov
num. orbitals of irrep A1 = 9
num. orbitals of irrep E1x = 4
num. orbitals of irrep E1y = 4
num. orbitals of irrep E2x = 1
num. orbitals of irrep E2y = 1
number of shells = 9
number of NR pGTOs = 34
number of NR cGTOs = 19
basis = 6-31g**
ecp = {}
CPU time:         3.65


******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> ********
method = SymAdaptedROHF-ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpg4s1uep5
max_memory 4000 MB (current use 87 MB)
num. doubly occ = 4  num. singly occ = 1
Freeze 0 electrons in irreps []
    9 free electrons in irreps A1 E1x E1y E2x E2y
Set gradient conv threshold to 3.16228e-05
init E= -75.015781549247
HOMO (E1x) = -0.432114552535777  LUMO (A1) = 0.172124848144614
cycle= 1 E= -75.371917639215  delta_E= -0.356  |g|= 0.213  |ddm|= 0.814
HOMO (E1x) = -0.225551074238014  LUMO (A1) = 0.209630388925469
cycle= 2 E= -75.3830060220761  delta_E= -0.0111  |g|= 0.0369  |ddm|= 0.112
HOMO (E1x) = -0.23962099877732  LUMO (A1) = 0.22411932252235
cycle= 3 E= -75.3834621151819  delta_E= -0.000456  |g|= 0.015  |ddm|= 0.0257
HOMO (E1x) = -0.23085904948164  LUMO (A1) = 0.226750250422052
cycle= 4 E= -75.3835184733485  delta_E= -5.64e-05  |g|= 0.00414  |ddm|= 0.00858
HOMO (E1x) = -0.233300680694028  LUMO (A1) = 0.226630409808991
cycle= 5 E= -75.3835248213359  delta_E= -6.35e-06  |g|= 0.000659  |ddm|= 0.00319
HOMO (E1x) = -0.233233691616022  LUMO (A1) = 0.226704139707241
cycle= 6 E= -75.3835250653665  delta_E= -2.44e-07  |g|= 9.82e-05  |ddm|= 0.000789
HOMO (E1x) = -0.233242202190608  LUMO (A1) = 0.226717402095874
cycle= 7 E= -75.3835250710892  delta_E= -5.72e-09  |g|= 2.76e-05  |ddm|= 0.000121
HOMO (E1x) = -0.23324406278103  LUMO (A1) = 0.226715923881255
cycle= 8 E= -75.3835250702051  delta_E= 8.84e-10  |g|= 4.71e-05  |ddm|= 3.4e-05
HOMO (E1x) = -0.233242541800351  LUMO (A1) = 0.226716091256358
cycle= 9 E= -75.3835250700299  delta_E= 1.75e-10  |g|= 5e-05  |ddm|= 6.62e-06
HOMO (E1x) = -0.233236444101887  LUMO (A1) = 0.226715463188628
cycle= 10 E= -75.383525068293  delta_E= 1.74e-09  |g|= 7.24e-05  |ddm|= 4.12e-05
HOMO (E1x) = -0.23323712393515  LUMO (A1) = 0.226715534033761
cycle= 11 E= -75.3835250681293  delta_E= 1.64e-10  |g|= 7.44e-05  |ddm|= 6.19e-06
HOMO (E1x) = -0.233236995035376  LUMO (A1) = 0.2267179401157
cycle= 12 E= -75.3835250680223  delta_E= 1.07e-10  |g|= 7.36e-05  |ddm|= 1.03e-05
HOMO (E1x) = -0.233235680760353  LUMO (A1) = 0.226718985202243
cycle= 13 E= -75.3835250681415  delta_E= -1.19e-10  |g|= 7.4e-05  |ddm|= 7.51e-06
HOMO (E1x) = -0.233230856752821  LUMO (A1) = 0.22672147213462
cycle= 14 E= -75.3835250680511  delta_E= 9.04e-11  |g|= 7.82e-05  |ddm|= 1.48e-05
HOMO (E1x) = -0.23323207355613  LUMO (A1) = 0.226719133818443
cycle= 15 E= -75.3835250680432  delta_E= 7.87e-12  |g|= 7.8e-05  |ddm|= 1.08e-05
HOMO (E1x) = -0.233239732605376  LUMO (A1) = 0.226717426153638
cycle= 16 E= -75.3835250689652  delta_E= -9.22e-10  |g|= 6.6e-05  |ddm|= 2.16e-05
HOMO (E1x) = -0.233243727544967  LUMO (A1) = 0.226715277771149
cycle= 17 E= -75.3835250687379  delta_E= 2.27e-10  |g|= 6.76e-05  |ddm|= 7.52e-06
HOMO (E1x) = -0.233248952643227  LUMO (A1) = 0.226714107295848
cycle= 18 E= -75.3835250691258  delta_E= -3.88e-10  |g|= 6.38e-05  |ddm|= 2.13e-05
HOMO (E1x) = -0.233256615775181  LUMO (A1) = 0.22671347191481
cycle= 19 E= -75.3835250697782  delta_E= -6.52e-10  |g|= 5.97e-05  |ddm|= 2.08e-05
HOMO (E1x) = -0.233253887212765  LUMO (A1) = 0.226713237728534
cycle= 20 E= -75.3835250698949  delta_E= -1.17e-10  |g|= 5.56e-05  |ddm|= 1.07e-05
HOMO (E1x) = -0.233261332468744  LUMO (A1) = 0.226710105917061
cycle= 21 E= -75.3835250690315  delta_E= 8.63e-10  |g|= 7.45e-05  |ddm|= 4.47e-05
HOMO (E1x) = -0.233259555536427  LUMO (A1) = 0.226711692294668
cycle= 22 E= -75.3835250690207  delta_E= 1.08e-11  |g|= 7.48e-05  |ddm|= 7.97e-06
HOMO (E1x) = -0.233249203543569  LUMO (A1) = 0.226713388639454
cycle= 23 E= -75.3835250685936  delta_E= 4.27e-10  |g|= 7.22e-05  |ddm|= 2.35e-05
HOMO (E1x) = -0.233244024792042  LUMO (A1) = 0.226719447494954
cycle= 24 E= -75.3835250694174  delta_E= -8.24e-10  |g|= 6.02e-05  |ddm|= 3.81e-05
HOMO (E1x) = -0.233236753931828  LUMO (A1) = 0.226716245058861
cycle= 25 E= -75.3835250678357  delta_E= 1.58e-09  |g|= 8.04e-05  |ddm|= 4.2e-05
HOMO (E1x) = -0.233245505336787  LUMO (A1) = 0.226714027417549
cycle= 26 E= -75.3835250682828  delta_E= -4.47e-10  |g|= 7.66e-05  |ddm|= 1.33e-05
HOMO (E1x) = -0.233242466754011  LUMO (A1) = 0.226715591045084
cycle= 27 E= -75.3835250680078  delta_E= 2.75e-10  |g|= 7.99e-05  |ddm|= 2.11e-05
HOMO (E1x) = -0.233241115644946  LUMO (A1) = 0.226716753822801
cycle= 28 E= -75.3835250682471  delta_E= -2.39e-10  |g|= 7.68e-05  |ddm|= 1.48e-05
HOMO (E1x) = -0.233239396547008  LUMO (A1) = 0.226717199614671
cycle= 29 E= -75.3835250690515  delta_E= -8.04e-10  |g|= 6.68e-05  |ddm|= 2.16e-05
HOMO (E1x) = -0.233236838983991  LUMO (A1) = 0.226716149045936
cycle= 30 E= -75.3835250683495  delta_E= 7.02e-10  |g|= 7.36e-05  |ddm|= 1.83e-05
HOMO (E1x) = -0.233238361735174  LUMO (A1) = 0.226718474456452
cycle= 31 E= -75.3835250685532  delta_E= -2.04e-10  |g|= 7.5e-05  |ddm|= 2.04e-05
HOMO (E1x) = -0.23323417792826  LUMO (A1) = 0.226717892677969
cycle= 32 E= -75.3835250683096  delta_E= 2.44e-10  |g|= 7.54e-05  |ddm|= 2.2e-05
HOMO (E1x) = -0.233237814096192  LUMO (A1) = 0.22671914843352
cycle= 33 E= -75.3835250704198  delta_E= -2.11e-09  |g|= 4.47e-05  |ddm|= 4.13e-05
HOMO (E1x) = -0.233236471813333  LUMO (A1) = 0.226716991622984
cycle= 34 E= -75.3835250680402  delta_E= 2.38e-09  |g|= 7.83e-05  |ddm|= 5.17e-05
HOMO (E1x) = -0.233236490229588  LUMO (A1) = 0.226717938425556
cycle= 35 E= -75.3835250683523  delta_E= -3.12e-10  |g|= 7.52e-05  |ddm|= 2.2e-05
HOMO (E1x) = -0.233236897996076  LUMO (A1) = 0.226716472866232
cycle= 36 E= -75.3835250682142  delta_E= 1.38e-10  |g|= 7.66e-05  |ddm|= 1.06e-05
HOMO (E1x) = -0.233240764754427  LUMO (A1) = 0.226716018797861
cycle= 37 E= -75.3835250683395  delta_E= -1.25e-10  |g|= 7.39e-05  |ddm|= 1.96e-05
HOMO (E1x) = -0.233246112953834  LUMO (A1) = 0.226715480281365
cycle= 38 E= -75.3835250683591  delta_E= -1.96e-11  |g|= 7.47e-05  |ddm|= 5.93e-06
HOMO (E1x) = -0.233241022808917  LUMO (A1) = 0.226715271906121
cycle= 39 E= -75.3835250681898  delta_E= 1.69e-10  |g|= 7.56e-05  |ddm|= 2.23e-05
HOMO (E1x) = -0.233242091937131  LUMO (A1) = 0.22671657501708
cycle= 40 E= -75.3835250684067  delta_E= -2.17e-10  |g|= 7.54e-05  |ddm|= 1.08e-05
HOMO (E1x) = -0.233237794472362  LUMO (A1) = 0.226719792269688
cycle= 41 E= -75.3835250681358  delta_E= 2.71e-10  |g|= 7.78e-05  |ddm|= 2.68e-05
HOMO (E1x) = -0.233241949514517  LUMO (A1) = 0.226719977304428
cycle= 42 E= -75.383525070635  delta_E= -2.5e-09  |g|= 3.99e-05  |ddm|= 6.47e-05
HOMO (E1x) = -0.2332470975383  LUMO (A1) = 0.226717712535029
cycle= 43 E= -75.3835250688419  delta_E= 1.79e-09  |g|= 7.29e-05  |ddm|= 5.34e-05
HOMO (E1x) = -0.233234445784077  LUMO (A1) = 0.226721459836586
cycle= 44 E= -75.3835250684246  delta_E= 4.17e-10  |g|= 7.46e-05  |ddm|= 2.9e-05
HOMO (E1x) = -0.233229339409577  LUMO (A1) = 0.226722447127836
cycle= 45 E= -75.3835250685966  delta_E= -1.72e-10  |g|= 7.45e-05  |ddm|= 1.33e-05
HOMO (E1x) = -0.233238446302408  LUMO (A1) = 0.226717199373742
cycle= 46 E= -75.3835250682939  delta_E= 3.03e-10  |g|= 7.57e-05  |ddm|= 1.68e-05
HOMO (E1x) = -0.233234801072426  LUMO (A1) = 0.22671808658994
cycle= 47 E= -75.3835250682171  delta_E= 7.68e-11  |g|= 7.69e-05  |ddm|= 7.69e-06
HOMO (E1x) = -0.233257852300218  LUMO (A1) = 0.226711982101586
cycle= 48 E= -75.3835250683773  delta_E= -1.6e-10  |g|= 8.18e-05  |ddm|= 2.5e-05
HOMO (E1x) = -0.233251469843363  LUMO (A1) = 0.226712475243689
cycle= 49 E= -75.3835250683692  delta_E= 8.07e-12  |g|= 7.76e-05  |ddm|= 2.34e-05
HOMO (E1x) = -0.233240340014536  LUMO (A1) = 0.226718959523513
cycle= 50 E= -75.3835250679782  delta_E= 3.91e-10  |g|= 7.92e-05  |ddm|= 4.1e-05
SCF not converged.
SCF energy = -75.3835250679782
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:42 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         4.13

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmp0s_bmvri
max_memory 4000 MB (current use 88 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmp0s_bmvri
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 88 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.233233964125235  LUMO = 0.44276867745511
Initial guess E= -75.3835250679968  |g|= 1.74773e-06
macro= 0  E= -75.3835250679978  delta_E= -1.02318e-12  |g|= 1.74773e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3835250679978  |g|= 1.74773e-06  total 2 KF 4 JK
converged SCF energy = -75.3835250679978
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:42 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         4.18

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpjsr0awlc
max_memory 4000 MB (current use 88 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpjsr0awlc
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 88 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.233234060543316  LUMO = 0.442768410535642
Initial guess E= -75.3835250679981  |g|= 1.46294e-07
macro= 0  E= -75.3835250679981  delta_E= 1.42109e-14  |g|= 1.46294e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3835250679981  |g|= 1.46294e-07  total 2 KF 4 JK
converged SCF energy = -75.3835250679981
-----------------------------------------------------
number of orbitals   6
number of electrons  (5, 4)
energy offset        4.365698347282665
irreps of orbitals   ['A1', 'A1', 'A1', 'E1y', 'E1x', 'A1']
-----------------------------------------------------
reconstruction of HF energy  -75.38352506797816 -75.38352506799806
-----------------------------------------------------
number of orbitals   5
number of electrons  (4, 3)
energy offset        -55.82702757260717
irreps of orbitals   ['A1', 'A1', 'E1y', 'E1x', 'A1']
-----------------------------------------------------
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:42 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         4.20

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpjp1ryt5m
max_memory 4000 MB (current use 88 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpjp1ryt5m
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 88 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.233234060543315  LUMO = 0.442768410535541
Initial guess E= -75.3835250679979  |g|= 1.29441e-07
macro= 0  E= -75.383525067998  delta_E= -1.42109e-14  |g|= 1.29441e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.383525067998  |g|= 1.29441e-07  total 2 KF 4 JK
converged SCF energy = -75.383525067998
reconstruction of HF energy  -75.38352506797816 -75.38352506799795
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:42 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         4.22

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpr__piy1u
max_memory 4000 MB (current use 88 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpr__piy1u
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 88 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.233234060543315  LUMO = 0.442768410535541
Initial guess E= -75.3835250679979  |g|= 1.29441e-07
macro= 0  E= -75.383525067998  delta_E= -1.42109e-14  |g|= 1.29441e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.383525067998  |g|= 1.29441e-07  total 2 KF 4 JK
converged SCF energy = -75.383525067998

WARN: RMP2 method does not support ROHF method. ROHF object is converted to UHF object and UMP2 method is called.


******** <class 'pyscf.mp.ump2.UMP2'> ********
nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_memory 4000 MB (current use 88 MB)
E(UMP2) = -75.3953449617016  E_corr = -0.011819893703669

WARN: RCISD method does not support ROHF method. ROHF object is converted to UHF object and UCISD method is called.


******** <class 'pyscf.ci.ucisd.UCISD'> ********
CISD nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-09
max_cycle = 50
max_space = 12
lindep = 0
nroots = 1
max_memory 4000 MB (current use 88 MB)
Init t2, MP2 energy = -0.011819893703669
UCISD converged
E(UCISD) = -75.40227000007563  E_corr = -0.01874493207768164

WARN: RCCSD method does not support ROHF method. ROHF object is converted to UHF object and UCCSD method is called.


******** <class 'pyscf.cc.uccsd.UCCSD'> ********
CC2 = 0
CCSD nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-07
conv_tol_normt = 1e-06
diis_space = 6
diis_start_cycle = 0
diis_start_energy_diff = 1e+09
max_memory 4000 MB (current use 88 MB)
Init t2, MP2 energy = -0.011819893703669
Init E_corr(CCSD) = -0.0122598019575386
cycle = 1  E_corr(CCSD) = -0.0163061677623863  dE = -0.0040463658  norm(t1,t2) = 0.0253335
cycle = 2  E_corr(CCSD) = -0.0177609334722469  dE = -0.00145476571  norm(t1,t2) = 0.0104558
cycle = 3  E_corr(CCSD) = -0.0187221536159424  dE = -0.000961220144  norm(t1,t2) = 0.00483196
cycle = 4  E_corr(CCSD) = -0.0187230909374536  dE = -9.37321511e-07  norm(t1,t2) = 0.00138871
cycle = 5  E_corr(CCSD) = -0.0187460278331133  dE = -2.29368957e-05  norm(t1,t2) = 0.000450693
cycle = 6  E_corr(CCSD) = -0.0187437692359709  dE = 2.25859714e-06  norm(t1,t2) = 9.31341e-05
cycle = 7  E_corr(CCSD) = -0.0187447662820661  dE = -9.97046095e-07  norm(t1,t2) = 1.62104e-05
cycle = 8  E_corr(CCSD) = -0.0187444251476349  dE = 3.41134431e-07  norm(t1,t2) = 2.28484e-06
cycle = 9  E_corr(CCSD) = -0.0187444206764532  dE = 4.47118167e-09  norm(t1,t2) = 3.53215e-07
UCCSD converged
E(UCCSD) = -75.40226948867441  E_corr = -0.01874442067645321
UCCSD(T) correction = -2.12604613636522e-06

******** CASCI flags ********
CAS (4e+3e, 5o), ncore = 0, nvir = 0
natorb = False
canonicalization = True
sorting_mo_energy = False
max_memory 4000 (MB)
******** <class 'pyscf.fci.direct_spin1.FCISolver'> ********
max. cycles = 200
conv_tol = 1e-08
davidson only = False
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 400
spin = None
Density matrix diagonal elements [1.99386977 1.98418254 1.99952506 1.         0.02242263]
CASCI converged
CASCI E = -75.4022735659201  E(CI) = -19.5752459933129  S^2 = 0.7500000
Hartree-Fock    -75.38352506799795
Moller-Plesset  -75.39534496170162
CISD            -75.40227000007563
CCSD            -75.4022694886744
CCSD(T)         -75.40227161472055
CASCI           -75.40227356592007
#####################################################
END: 6-31g**
#####################################################
#####################################################
START: 6-31++g**
#####################################################
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:42 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 9
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry True subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.969700000000 AA    0.000000000000   0.000000000000   1.832467422991 Bohr

nuclear repulsion = 4.36569834728266
point group symmetry = Coov
num. orbitals of irrep A1 = 12
num. orbitals of irrep E1x = 5
num. orbitals of irrep E1y = 5
num. orbitals of irrep E2x = 1
num. orbitals of irrep E2y = 1
number of shells = 12
number of NR pGTOs = 39
number of NR cGTOs = 24
basis = 6-31++g**
ecp = {}
CPU time:         4.44


******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> ********
method = SymAdaptedROHF-ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmp0k0uy0x4
max_memory 4000 MB (current use 88 MB)
num. doubly occ = 4  num. singly occ = 1
Freeze 0 electrons in irreps []
    9 free electrons in irreps A1 E1x E1y E2x E2y
Set gradient conv threshold to 3.16228e-05
init E= -75.0262356189692
HOMO (E1x) = -0.430215079684692  LUMO (A1) = 0.0392520254488001
cycle= 1 E= -75.3769818288196  delta_E= -0.351  |g|= 0.199  |ddm|= 0.782
HOMO (E1x) = -0.260197616236561  LUMO (A1) = 0.0387553692497542
cycle= 2 E= -75.3883694363552  delta_E= -0.0114  |g|= 0.0332  |ddm|= 0.142
HOMO (E1x) = -0.247463765390282  LUMO (A1) = 0.0435438228290141
cycle= 3 E= -75.388760943218  delta_E= -0.000392  |g|= 0.00802  |ddm|= 0.0302
HOMO (E1x) = -0.2497623949041  LUMO (A1) = 0.043804053604995
cycle= 4 E= -75.3888003621811  delta_E= -3.94e-05  |g|= 0.00313  |ddm|= 0.0125
HOMO (E1x) = -0.248087181855483  LUMO (A1) = 0.0438805334041268
cycle= 5 E= -75.3888035487744  delta_E= -3.19e-06  |g|= 0.000745  |ddm|= 0.00293
HOMO (E1x) = -0.248356997594143  LUMO (A1) = 0.0439027773957424
cycle= 6 E= -75.3888037814388  delta_E= -2.33e-07  |g|= 0.000149  |ddm|= 0.000743
HOMO (E1x) = -0.248359446520085  LUMO (A1) = 0.0439040308023747
cycle= 7 E= -75.3888037896262  delta_E= -8.19e-09  |g|= 0.00011  |ddm|= 7.12e-05
HOMO (E1x) = -0.248333195921222  LUMO (A1) = 0.0439082000046151
cycle= 8 E= -75.388803776343  delta_E= 1.33e-08  |g|= 0.000152  |ddm|= 0.000205
HOMO (E1x) = -0.248344114424919  LUMO (A1) = 0.0439074018325569
cycle= 9 E= -75.3888037666376  delta_E= 9.71e-09  |g|= 0.000189  |ddm|= 0.000129
HOMO (E1x) = -0.248349851419094  LUMO (A1) = 0.0439065168860613
cycle= 10 E= -75.388803765995  delta_E= 6.43e-10  |g|= 0.000193  |ddm|= 2.37e-05
HOMO (E1x) = -0.24835353980368  LUMO (A1) = 0.0439061954547837
cycle= 11 E= -75.3888037660035  delta_E= -8.44e-12  |g|= 0.000194  |ddm|= 1.85e-05
HOMO (E1x) = -0.248341648915634  LUMO (A1) = 0.0439073337407769
cycle= 12 E= -75.388803766601  delta_E= -5.98e-10  |g|= 0.000202  |ddm|= 4.08e-05
HOMO (E1x) = -0.248338639603406  LUMO (A1) = 0.0439073986482076
cycle= 13 E= -75.3888037668326  delta_E= -2.32e-10  |g|= 0.000203  |ddm|= 1.61e-05
HOMO (E1x) = -0.248322847509528  LUMO (A1) = 0.0439095892618619
cycle= 14 E= -75.3888037653758  delta_E= 1.46e-09  |g|= 0.000226  |ddm|= 6.22e-05
HOMO (E1x) = -0.248341224082703  LUMO (A1) = 0.0439083789980625
cycle= 15 E= -75.388803762139  delta_E= 3.24e-09  |g|= 0.000233  |ddm|= 9.18e-05
HOMO (E1x) = -0.24840570778151  LUMO (A1) = 0.0439060639812479
cycle= 16 E= -75.3888037802731  delta_E= -1.81e-08  |g|= 0.000164  |ddm|= 0.000219
HOMO (E1x) = -0.24835444911466  LUMO (A1) = 0.043911191425312
cycle= 17 E= -75.3888037749144  delta_E= 5.36e-09  |g|= 0.000193  |ddm|= 0.00014
HOMO (E1x) = -0.248319959700716  LUMO (A1) = 0.0439111173925871
cycle= 18 E= -75.3888037715899  delta_E= 3.32e-09  |g|= 0.000223  |ddm|= 0.000108
HOMO (E1x) = -0.248323895930781  LUMO (A1) = 0.0439107864589587
cycle= 19 E= -75.3888037708337  delta_E= 7.56e-10  |g|= 0.000224  |ddm|= 1.76e-05
HOMO (E1x) = -0.248328503895482  LUMO (A1) = 0.0439114480463122
cycle= 20 E= -75.3888037698396  delta_E= 9.94e-10  |g|= 0.000221  |ddm|= 2.2e-05
HOMO (E1x) = -0.248348459385413  LUMO (A1) = 0.0439109468780961
cycle= 21 E= -75.3888037690536  delta_E= 7.86e-10  |g|= 0.000207  |ddm|= 0.000113
HOMO (E1x) = -0.248345535860567  LUMO (A1) = 0.04391050860211
cycle= 22 E= -75.3888037674437  delta_E= 1.61e-09  |g|= 0.000214  |ddm|= 1.25e-05
HOMO (E1x) = -0.248346185430236  LUMO (A1) = 0.0439110932904016
cycle= 23 E= -75.3888037725582  delta_E= -5.11e-09  |g|= 0.000193  |ddm|= 4.31e-05
HOMO (E1x) = -0.248360031676762  LUMO (A1) = 0.0439100592026949
cycle= 24 E= -75.3888037750952  delta_E= -2.54e-09  |g|= 0.000181  |ddm|= 4.43e-05
HOMO (E1x) = -0.248362532633944  LUMO (A1) = 0.0439087018529739
cycle= 25 E= -75.38880377245  delta_E= 2.65e-09  |g|= 0.000188  |ddm|= 3.04e-05
HOMO (E1x) = -0.248345655336322  LUMO (A1) = 0.0439099986288802
cycle= 26 E= -75.3888037683334  delta_E= 4.12e-09  |g|= 0.000205  |ddm|= 6.6e-05
HOMO (E1x) = -0.248315994286574  LUMO (A1) = 0.0439105158019133
cycle= 27 E= -75.3888037679313  delta_E= 4.02e-10  |g|= 0.00022  |ddm|= 0.000114
HOMO (E1x) = -0.248324284717709  LUMO (A1) = 0.0439098596178295
cycle= 28 E= -75.3888037646493  delta_E= 3.28e-09  |g|= 0.000234  |ddm|= 7.2e-05
HOMO (E1x) = -0.248330883974907  LUMO (A1) = 0.0439090372656695
cycle= 29 E= -75.388803765343  delta_E= -6.94e-10  |g|= 0.000227  |ddm|= 2.02e-05
HOMO (E1x) = -0.248325710148952  LUMO (A1) = 0.0439119770845068
cycle= 30 E= -75.3888037657061  delta_E= -3.63e-10  |g|= 0.000228  |ddm|= 6e-05
HOMO (E1x) = -0.248349440865167  LUMO (A1) = 0.0439078237195776
cycle= 31 E= -75.3888037627707  delta_E= 2.94e-09  |g|= 0.000232  |ddm|= 7.83e-05
HOMO (E1x) = -0.2483928953065  LUMO (A1) = 0.043907641622399
cycle= 32 E= -75.3888037844185  delta_E= -2.16e-08  |g|= 0.00015  |ddm|= 0.000204
HOMO (E1x) = -0.248386763469232  LUMO (A1) = 0.0439085407658138
cycle= 33 E= -75.3888037849367  delta_E= -5.18e-10  |g|= 0.000147  |ddm|= 3.33e-05
HOMO (E1x) = -0.248342452779293  LUMO (A1) = 0.0439100296177603
cycle= 34 E= -75.3888037674008  delta_E= 1.75e-08  |g|= 0.000219  |ddm|= 0.000173
HOMO (E1x) = -0.248347640855898  LUMO (A1) = 0.0439112465354702
cycle= 35 E= -75.3888037675895  delta_E= -1.89e-10  |g|= 0.000215  |ddm|= 3.87e-05
HOMO (E1x) = -0.248331996607571  LUMO (A1) = 0.0439108826833189
cycle= 36 E= -75.388803769993  delta_E= -2.4e-09  |g|= 0.000203  |ddm|= 8.27e-05
HOMO (E1x) = -0.248362941760464  LUMO (A1) = 0.0439063284318527
cycle= 37 E= -75.3888037798204  delta_E= -9.83e-09  |g|= 0.00017  |ddm|= 0.000187
HOMO (E1x) = -0.248359947080508  LUMO (A1) = 0.0439076046346303
cycle= 38 E= -75.3888037785962  delta_E= 1.22e-09  |g|= 0.000178  |ddm|= 2.92e-05
HOMO (E1x) = -0.248366818128143  LUMO (A1) = 0.0439090726402653
cycle= 39 E= -75.3888037709144  delta_E= 7.68e-09  |g|= 0.00019  |ddm|= 0.000147
HOMO (E1x) = -0.248353587592936  LUMO (A1) = 0.0439080224066038
cycle= 40 E= -75.3888037553437  delta_E= 1.56e-08  |g|= 0.000232  |ddm|= 0.000126
HOMO (E1x) = -0.24835250565709  LUMO (A1) = 0.0439081920161335
cycle= 41 E= -75.388803755231  delta_E= 1.13e-10  |g|= 0.000233  |ddm|= 1.89e-06
HOMO (E1x) = -0.248349679953659  LUMO (A1) = 0.0439092991486766
cycle= 42 E= -75.3888037553191  delta_E= -8.81e-11  |g|= 0.000233  |ddm|= 2.22e-05
HOMO (E1x) = -0.248351384460796  LUMO (A1) = 0.0439082492829347
cycle= 43 E= -75.3888037652769  delta_E= -9.96e-09  |g|= 0.000213  |ddm|= 9.6e-05
HOMO (E1x) = -0.248347487994809  LUMO (A1) = 0.0439103037939047
cycle= 44 E= -75.3888037595094  delta_E= 5.77e-09  |g|= 0.000229  |ddm|= 8.39e-05
HOMO (E1x) = -0.248325711788567  LUMO (A1) = 0.0439101633996629
cycle= 45 E= -75.388803761293  delta_E= -1.78e-09  |g|= 0.000221  |ddm|= 8.42e-05
HOMO (E1x) = -0.248334201357721  LUMO (A1) = 0.0439090991808952
cycle= 46 E= -75.3888037566559  delta_E= 4.64e-09  |g|= 0.000243  |ddm|= 7.44e-05
HOMO (E1x) = -0.2484053498171  LUMO (A1) = 0.0439075446306216
cycle= 47 E= -75.3888037859383  delta_E= -2.93e-08  |g|= 0.000136  |ddm|= 0.000322
HOMO (E1x) = -0.248335866698626  LUMO (A1) = 0.0439112716662277
cycle= 48 E= -75.388803773634  delta_E= 1.23e-08  |g|= 0.000207  |ddm|= 0.000178
HOMO (E1x) = -0.248347693574176  LUMO (A1) = 0.0439123692204941
cycle= 49 E= -75.3888037701148  delta_E= 3.52e-09  |g|= 0.000202  |ddm|= 8.88e-05
HOMO (E1x) = -0.248339021729558  LUMO (A1) = 0.0439086638360978
cycle= 50 E= -75.388803759557  delta_E= 1.06e-08  |g|= 0.000241  |ddm|= 6.55e-05
SCF not converged.
SCF energy = -75.388803759557
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:43 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         4.96

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmp074fip6v
max_memory 4000 MB (current use 88 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmp074fip6v
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 88 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.248438016740961  LUMO = 0.428217709714077
Initial guess E= -75.3888037604612  |g|= 6.25629e-06
macro= 0  E= -75.388803760482  delta_E= -2.07621e-11  |g|= 6.25629e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.388803760482  |g|= 6.25629e-06  total 2 KF 4 JK
converged SCF energy = -75.388803760482
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:43 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         5.02

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmp9ukymet9
max_memory 4000 MB (current use 88 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmp9ukymet9
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 88 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.248425353586444  LUMO = 0.428218014468
Initial guess E= -75.3888037604827  |g|= 3.20127e-07
macro= 0  E= -75.3888037604828  delta_E= -2.84217e-14  |g|= 3.20127e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3888037604828  |g|= 3.20127e-07  total 2 KF 4 JK
converged SCF energy = -75.3888037604828
-----------------------------------------------------
number of orbitals   6
number of electrons  (5, 4)
energy offset        4.365698347282665
irreps of orbitals   ['A1', 'A1', 'A1', 'E1y', 'E1x', 'A1']
-----------------------------------------------------
reconstruction of HF energy  -75.38880375955699 -75.38880376048277
-----------------------------------------------------
number of orbitals   5
number of electrons  (4, 3)
energy offset        -55.827008841952455
irreps of orbitals   ['A1', 'A1', 'E1y', 'E1x', 'A1']
-----------------------------------------------------
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:43 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         5.04

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpuww8cm__
max_memory 4000 MB (current use 88 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpuww8cm__
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 88 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.248425353586446  LUMO = 0.428218014467894
Initial guess E= -75.3888037604825  |g|= 3.21126e-07
macro= 0  E= -75.3888037604825  delta_E= -4.26326e-14  |g|= 3.21126e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3888037604825  |g|= 3.21126e-07  total 2 KF 4 JK
converged SCF energy = -75.3888037604825
reconstruction of HF energy  -75.38880375955699 -75.38880376048253
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:43 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         5.06

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpxikyc2ho
max_memory 4000 MB (current use 88 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpxikyc2ho
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 88 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.248425353586446  LUMO = 0.428218014467894
Initial guess E= -75.3888037604825  |g|= 3.21126e-07
macro= 0  E= -75.3888037604825  delta_E= -4.26326e-14  |g|= 3.21126e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3888037604825  |g|= 3.21126e-07  total 2 KF 4 JK
converged SCF energy = -75.3888037604825

WARN: RMP2 method does not support ROHF method. ROHF object is converted to UHF object and UMP2 method is called.


******** <class 'pyscf.mp.ump2.UMP2'> ********
nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_memory 4000 MB (current use 88 MB)
E(UMP2) = -75.4004730825395  E_corr = -0.0116693220569777

WARN: RCISD method does not support ROHF method. ROHF object is converted to UHF object and UCISD method is called.


******** <class 'pyscf.ci.ucisd.UCISD'> ********
CISD nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-09
max_cycle = 50
max_space = 12
lindep = 0
nroots = 1
max_memory 4000 MB (current use 88 MB)
Init t2, MP2 energy = -0.0116693220569777
UCISD converged
E(UCISD) = -75.40727073760023  E_corr = -0.01846697711769144

WARN: RCCSD method does not support ROHF method. ROHF object is converted to UHF object and UCCSD method is called.


******** <class 'pyscf.cc.uccsd.UCCSD'> ********
CC2 = 0
CCSD nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-07
conv_tol_normt = 1e-06
diis_space = 6
diis_start_cycle = 0
diis_start_energy_diff = 1e+09
max_memory 4000 MB (current use 88 MB)
Init t2, MP2 energy = -0.0116693220569777
Init E_corr(CCSD) = -0.0121017105069219
cycle = 1  E_corr(CCSD) = -0.0160795551072288  dE = -0.0039778446  norm(t1,t2) = 0.0251057
cycle = 2  E_corr(CCSD) = -0.0175059841587746  dE = -0.00142642905  norm(t1,t2) = 0.0103491
cycle = 3  E_corr(CCSD) = -0.0184457021224563  dE = -0.000939717964  norm(t1,t2) = 0.00477005
cycle = 4  E_corr(CCSD) = -0.0184456774651312  dE = 2.46573252e-08  norm(t1,t2) = 0.00135897
cycle = 5  E_corr(CCSD) = -0.0184679916649336  dE = -2.23141998e-05  norm(t1,t2) = 0.00044107
cycle = 6  E_corr(CCSD) = -0.0184658511265067  dE = 2.14053843e-06  norm(t1,t2) = 9.04287e-05
cycle = 7  E_corr(CCSD) = -0.01846677325799  dE = -9.22131483e-07  norm(t1,t2) = 1.56638e-05
cycle = 8  E_corr(CCSD) = -0.0184664563323177  dE = 3.16925672e-07  norm(t1,t2) = 2.15109e-06
cycle = 9  E_corr(CCSD) = -0.0184664524608095  dE = 3.8715082e-09  norm(t1,t2) = 3.39135e-07
UCCSD converged
E(UCCSD) = -75.40727021294335  E_corr = -0.01846645246080954
UCCSD(T) correction = -2.23148134918089e-06

******** CASCI flags ********
CAS (4e+3e, 5o), ncore = 0, nvir = 0
natorb = False
canonicalization = True
sorting_mo_energy = False
max_memory 4000 (MB)
******** <class 'pyscf.fci.direct_spin1.FCISolver'> ********
max. cycles = 200
conv_tol = 1e-08
davidson only = False
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 400
spin = None
Density matrix diagonal elements [1.99392911 1.98447449 1.99954196 1.         0.02205444]
CASCI converged
CASCI E = -75.4072744684829  E(CI) = -19.5802656265304  S^2 = 0.7500000
Hartree-Fock    -75.38880376048253
Moller-Plesset  -75.4004730825395
CISD            -75.40727073760023
CCSD            -75.40727021294335
CCSD(T)         -75.40727244442469
CASCI           -75.4072744684829
#####################################################
END: 6-31++g**
#####################################################
#####################################################
START: cc-pvdz
#####################################################
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:43 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 9
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry True subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.969700000000 AA    0.000000000000   0.000000000000   1.832467422991 Bohr

nuclear repulsion = 4.36569834728266
point group symmetry = Coov
num. orbitals of irrep A1 = 9
num. orbitals of irrep E1x = 4
num. orbitals of irrep E1y = 4
num. orbitals of irrep E2x = 1
num. orbitals of irrep E2y = 1
number of shells = 8
number of NR pGTOs = 33
number of NR cGTOs = 19
basis = cc-pvdz
ecp = {}
CPU time:         5.28


******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> ********
method = SymAdaptedROHF-ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpdo7ile6w
max_memory 4000 MB (current use 88 MB)
num. doubly occ = 4  num. singly occ = 1
Freeze 0 electrons in irreps []
    9 free electrons in irreps A1 E1x E1y E2x E2y
Set gradient conv threshold to 3.16228e-05
init E= -75.0280086112802
HOMO (E1y) = -0.43157936963096  LUMO (A1) = 0.142147960201031
cycle= 1 E= -75.378282244309  delta_E= -0.35  |g|= 0.214  |ddm|= 0.857
HOMO (E1y) = -0.219920346374462  LUMO (A1) = 0.176507783116895
cycle= 2 E= -75.3894331748492  delta_E= -0.0112  |g|= 0.0401  |ddm|= 0.14
HOMO (E1y) = -0.235234264906349  LUMO (A1) = 0.188003586340371
cycle= 3 E= -75.3899286811598  delta_E= -0.000496  |g|= 0.0151  |ddm|= 0.0255
HOMO (E1y) = -0.226531804387289  LUMO (A1) = 0.190404729209856
cycle= 4 E= -75.3899872111903  delta_E= -5.85e-05  |g|= 0.00413  |ddm|= 0.00898
HOMO (E1y) = -0.228791802634879  LUMO (A1) = 0.190441829046597
cycle= 5 E= -75.3899935332222  delta_E= -6.32e-06  |g|= 0.000603  |ddm|= 0.00317
HOMO (E1y) = -0.228734066524194  LUMO (A1) = 0.190471193402282
cycle= 6 E= -75.389993733239  delta_E= -2e-07  |g|= 9.99e-05  |ddm|= 0.000647
HOMO (E1y) = -0.228740029237542  LUMO (A1) = 0.190477135468297
cycle= 7 E= -75.3899937372838  delta_E= -4.04e-09  |g|= 6.02e-05  |ddm|= 6.32e-05
HOMO (E1y) = -0.228740958216844  LUMO (A1) = 0.190474091412375
cycle= 8 E= -75.3899937315499  delta_E= 5.73e-09  |g|= 0.000113  |ddm|= 8.17e-05
HOMO (E1y) = -0.228722583036913  LUMO (A1) = 0.190470743705135
cycle= 9 E= -75.3899937211785  delta_E= 1.04e-08  |g|= 0.000179  |ddm|= 9.02e-05
HOMO (E1y) = -0.228732857927148  LUMO (A1) = 0.190466050045744
cycle= 10 E= -75.389993708833  delta_E= 1.23e-08  |g|= 0.000228  |ddm|= 8.55e-05
HOMO (E1y) = -0.22873507420003  LUMO (A1) = 0.190462989312124
cycle= 11 E= -75.389993705383  delta_E= 3.45e-09  |g|= 0.00024  |ddm|= 3.04e-05
HOMO (E1y) = -0.228730480384915  LUMO (A1) = 0.190472593402403
cycle= 12 E= -75.3899936992836  delta_E= 6.1e-09  |g|= 0.000266  |ddm|= 7.22e-05
HOMO (E1y) = -0.22873565705546  LUMO (A1) = 0.19047231630188
cycle= 13 E= -75.3899936975842  delta_E= 1.7e-09  |g|= 0.00027  |ddm|= 3.17e-05
HOMO (E1y) = -0.228727053842121  LUMO (A1) = 0.19047791478868
cycle= 14 E= -75.3899936967194  delta_E= 8.65e-10  |g|= 0.000276  |ddm|= 3.13e-05
HOMO (E1y) = -0.228718588388091  LUMO (A1) = 0.19047757771124
cycle= 15 E= -75.3899936953446  delta_E= 1.37e-09  |g|= 0.000285  |ddm|= 2.57e-05
HOMO (E1y) = -0.228722984026566  LUMO (A1) = 0.190473946991387
cycle= 16 E= -75.3899936979906  delta_E= -2.65e-09  |g|= 0.00028  |ddm|= 5.69e-05
HOMO (E1y) = -0.228726206042745  LUMO (A1) = 0.19048662062628
cycle= 17 E= -75.3899937088905  delta_E= -1.09e-08  |g|= 0.000238  |ddm|= 6.88e-05
HOMO (E1y) = -0.22872309727655  LUMO (A1) = 0.19047112579466
cycle= 18 E= -75.3899937026082  delta_E= 6.28e-09  |g|= 0.000263  |ddm|= 6.68e-05
HOMO (E1y) = -0.228710851387083  LUMO (A1) = 0.190473845466839
cycle= 19 E= -75.3899937015399  delta_E= 1.07e-09  |g|= 0.000275  |ddm|= 3.55e-05
HOMO (E1y) = -0.228727348899931  LUMO (A1) = 0.190468751622601
cycle= 20 E= -75.3899936990478  delta_E= 2.49e-09  |g|= 0.000264  |ddm|= 6.8e-05
HOMO (E1y) = -0.228735140758289  LUMO (A1) = 0.190463685958993
cycle= 21 E= -75.3899937049225  delta_E= -5.87e-09  |g|= 0.000247  |ddm|= 4.12e-05
HOMO (E1y) = -0.228733344065747  LUMO (A1) = 0.19046693002521
cycle= 22 E= -75.3899937000902  delta_E= 4.83e-09  |g|= 0.000264  |ddm|= 3.57e-05
HOMO (E1y) = -0.228719826689245  LUMO (A1) = 0.190474188103005
cycle= 23 E= -75.3899936947747  delta_E= 5.32e-09  |g|= 0.000288  |ddm|= 5.66e-05
HOMO (E1y) = -0.22872533596249  LUMO (A1) = 0.190476949204298
cycle= 24 E= -75.3899937021274  delta_E= -7.35e-09  |g|= 0.000266  |ddm|= 6.74e-05
HOMO (E1y) = -0.228726320918659  LUMO (A1) = 0.190479083350696
cycle= 25 E= -75.3899937006439  delta_E= 1.48e-09  |g|= 0.000264  |ddm|= 7.58e-05
HOMO (E1y) = -0.228739997413033  LUMO (A1) = 0.190485247648978
cycle= 26 E= -75.3899937050488  delta_E= -4.4e-09  |g|= 0.000242  |ddm|= 5.67e-05
HOMO (E1y) = -0.228755214474118  LUMO (A1) = 0.190481906310694
cycle= 27 E= -75.3899937128874  delta_E= -7.84e-09  |g|= 0.000198  |ddm|= 6.55e-05
HOMO (E1y) = -0.228769791237939  LUMO (A1) = 0.190477175416976
cycle= 28 E= -75.3899937133208  delta_E= -4.33e-10  |g|= 0.000219  |ddm|= 0.000174
HOMO (E1y) = -0.228776068376674  LUMO (A1) = 0.190470907771311
cycle= 29 E= -75.3899937108259  delta_E= 2.49e-09  |g|= 0.000218  |ddm|= 4.78e-05
HOMO (E1y) = -0.22877144371502  LUMO (A1) = 0.190471418394848
cycle= 30 E= -75.3899937096065  delta_E= 1.22e-09  |g|= 0.000222  |ddm|= 1.73e-05
HOMO (E1y) = -0.228776835856988  LUMO (A1) = 0.190466637176871
cycle= 31 E= -75.3899937103144  delta_E= -7.08e-10  |g|= 0.000218  |ddm|= 5.37e-05
HOMO (E1y) = -0.228783638378048  LUMO (A1) = 0.190463529987913
cycle= 32 E= -75.3899937164933  delta_E= -6.18e-09  |g|= 0.000198  |ddm|= 6.54e-05
HOMO (E1y) = -0.228748934066618  LUMO (A1) = 0.190470664649708
cycle= 33 E= -75.3899937089388  delta_E= 7.55e-09  |g|= 0.000221  |ddm|= 5.62e-05
HOMO (E1y) = -0.228782343907273  LUMO (A1) = 0.190466181584595
cycle= 34 E= -75.3899937198113  delta_E= -1.09e-08  |g|= 0.000189  |ddm|= 7.91e-05
HOMO (E1y) = -0.228763376535047  LUMO (A1) = 0.19046264601831
cycle= 35 E= -75.3899937092526  delta_E= 1.06e-08  |g|= 0.000222  |ddm|= 7.46e-05
HOMO (E1y) = -0.22875640557876  LUMO (A1) = 0.190465716556874
cycle= 36 E= -75.3899937111401  delta_E= -1.89e-09  |g|= 0.000212  |ddm|= 3.51e-05
HOMO (E1y) = -0.228744280087432  LUMO (A1) = 0.190463922078768
cycle= 37 E= -75.3899937061486  delta_E= 4.99e-09  |g|= 0.000231  |ddm|= 5.1e-05
HOMO (E1y) = -0.228723073867331  LUMO (A1) = 0.19047774657842
cycle= 38 E= -75.3899937074147  delta_E= -1.27e-09  |g|= 0.00024  |ddm|= 6.26e-05
HOMO (E1y) = -0.228686742025727  LUMO (A1) = 0.190487939489689
cycle= 39 E= -75.3899936892384  delta_E= 1.82e-08  |g|= 0.000311  |ddm|= 0.000143
HOMO (E1y) = -0.228725031030603  LUMO (A1) = 0.190485521717508
cycle= 40 E= -75.3899936970361  delta_E= -7.8e-09  |g|= 0.000274  |ddm|= 0.000101
HOMO (E1y) = -0.228760925821039  LUMO (A1) = 0.190465949224588
cycle= 41 E= -75.3899937058101  delta_E= -8.77e-09  |g|= 0.00024  |ddm|= 0.000101
HOMO (E1y) = -0.228749123506774  LUMO (A1) = 0.190472555401491
cycle= 42 E= -75.3899936984897  delta_E= 7.32e-09  |g|= 0.000266  |ddm|= 4.58e-05
HOMO (E1y) = -0.228738458072666  LUMO (A1) = 0.190476347520178
cycle= 43 E= -75.3899937137601  delta_E= -1.53e-08  |g|= 0.000215  |ddm|= 9.25e-05
HOMO (E1y) = -0.228771736473482  LUMO (A1) = 0.190465383718864
cycle= 44 E= -75.389993708731  delta_E= 5.03e-09  |g|= 0.000229  |ddm|= 7.25e-05
HOMO (E1y) = -0.228760033180159  LUMO (A1) = 0.190461102091795
cycle= 45 E= -75.3899937008024  delta_E= 7.93e-09  |g|= 0.000258  |ddm|= 4.89e-05
HOMO (E1y) = -0.228762818620479  LUMO (A1) = 0.190460432836903
cycle= 46 E= -75.3899936987592  delta_E= 2.04e-09  |g|= 0.000265  |ddm|= 1.33e-05
HOMO (E1y) = -0.228762800169071  LUMO (A1) = 0.190461650261106
cycle= 47 E= -75.3899936995769  delta_E= -8.18e-10  |g|= 0.000265  |ddm|= 2.13e-05
HOMO (E1y) = -0.228760011362669  LUMO (A1) = 0.19045983951519
cycle= 48 E= -75.3899936992108  delta_E= 3.66e-10  |g|= 0.000261  |ddm|= 2.82e-05
HOMO (E1y) = -0.228763423647496  LUMO (A1) = 0.190463668158677
cycle= 49 E= -75.3899937028482  delta_E= -3.64e-09  |g|= 0.000252  |ddm|= 8.43e-05
HOMO (E1y) = -0.228766004177271  LUMO (A1) = 0.19046168900746
cycle= 50 E= -75.3899937002584  delta_E= 2.59e-09  |g|= 0.000261  |ddm|= 6.4e-05
SCF not converged.
SCF energy = -75.3899937002584
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:43 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         5.76

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpqyg7urzl
max_memory 4000 MB (current use 88 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpqyg7urzl
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 88 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.228730108133959  LUMO = 0.440161668439418
Initial guess E= -75.3899937018575  |g|= 7.92608e-06
macro= 0  E= -75.3899937018807  delta_E= -2.32632e-11  |g|= 7.92608e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3899937018807  |g|= 7.92608e-06  total 2 KF 4 JK
converged SCF energy = -75.3899937018807
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:43 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         5.81

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmp_t6hwrit
max_memory 4000 MB (current use 85 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmp_t6hwrit
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 85 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.228746642415213  LUMO = 0.44016009494996
Initial guess E= -75.3899937018828  |g|= 4.74051e-07
macro= 0  E= -75.3899937018828  delta_E= 1.42109e-14  |g|= 4.74051e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3899937018828  |g|= 4.74051e-07  total 2 KF 4 JK
converged SCF energy = -75.3899937018828
-----------------------------------------------------
number of orbitals   6
number of electrons  (5, 4)
energy offset        4.365698347282665
irreps of orbitals   ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
-----------------------------------------------------
reconstruction of HF energy  -75.38999370025839 -75.38999370188282
-----------------------------------------------------
number of orbitals   5
number of electrons  (4, 3)
energy offset        -55.831001839596105
irreps of orbitals   ['A1', 'A1', 'E1x', 'E1y', 'A1']
-----------------------------------------------------
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:43 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         5.83

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpr9i5s6e0
max_memory 4000 MB (current use 88 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpr9i5s6e0
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 88 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.228746642415213  LUMO = 0.440160094949493
Initial guess E= -75.3899937018818  |g|= 3.90637e-07
macro= 0  E= -75.3899937018819  delta_E= -8.52651e-14  |g|= 3.90637e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3899937018819  |g|= 3.90637e-07  total 2 KF 4 JK
converged SCF energy = -75.3899937018819
reconstruction of HF energy  -75.38999370025839 -75.38999370188193
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:43 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         5.85

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmp63zseysw
max_memory 4000 MB (current use 88 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmp63zseysw
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 88 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.228746642415213  LUMO = 0.440160094949493
Initial guess E= -75.3899937018818  |g|= 3.90637e-07
macro= 0  E= -75.3899937018819  delta_E= -8.52651e-14  |g|= 3.90637e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3899937018819  |g|= 3.90637e-07  total 2 KF 4 JK
converged SCF energy = -75.3899937018819

WARN: RMP2 method does not support ROHF method. ROHF object is converted to UHF object and UMP2 method is called.


******** <class 'pyscf.mp.ump2.UMP2'> ********
nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_memory 4000 MB (current use 88 MB)
E(UMP2) = -75.4018765010615  E_corr = -0.0118827991796046

WARN: RCISD method does not support ROHF method. ROHF object is converted to UHF object and UCISD method is called.


******** <class 'pyscf.ci.ucisd.UCISD'> ********
CISD nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-09
max_cycle = 50
max_space = 12
lindep = 0
nroots = 1
max_memory 4000 MB (current use 88 MB)
Init t2, MP2 energy = -0.0118827991796046
UCISD converged
E(UCISD) = -75.40888113256048  E_corr = -0.01888743067854216

WARN: RCCSD method does not support ROHF method. ROHF object is converted to UHF object and UCCSD method is called.


******** <class 'pyscf.cc.uccsd.UCCSD'> ********
CC2 = 0
CCSD nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-07
conv_tol_normt = 1e-06
diis_space = 6
diis_start_cycle = 0
diis_start_energy_diff = 1e+09
max_memory 4000 MB (current use 88 MB)
Init t2, MP2 energy = -0.0118827991796046
Init E_corr(CCSD) = -0.0123212485863147
cycle = 1  E_corr(CCSD) = -0.0164115228251242  dE = -0.00409027424  norm(t1,t2) = 0.0255496
cycle = 2  E_corr(CCSD) = -0.0178865552625301  dE = -0.00147503244  norm(t1,t2) = 0.0105569
cycle = 3  E_corr(CCSD) = -0.0188641103690331  dE = -0.000977555107  norm(t1,t2) = 0.00488433
cycle = 4  E_corr(CCSD) = -0.0188653779363928  dE = -1.26756736e-06  norm(t1,t2) = 0.00140556
cycle = 5  E_corr(CCSD) = -0.0188885714436609  dE = -2.31935073e-05  norm(t1,t2) = 0.000461486
cycle = 6  E_corr(CCSD) = -0.0188862284947445  dE = 2.34294892e-06  norm(t1,t2) = 9.70624e-05
cycle = 7  E_corr(CCSD) = -0.0188873212786499  dE = -1.09278391e-06  norm(t1,t2) = 1.72223e-05
cycle = 8  E_corr(CCSD) = -0.0188869468714732  dE = 3.74407177e-07  norm(t1,t2) = 2.48127e-06
cycle = 9  E_corr(CCSD) = -0.0188869414993693  dE = 5.37210391e-09  norm(t1,t2) = 3.90729e-07
UCCSD converged
E(UCCSD) = -75.40888064338129  E_corr = -0.01888694149936929
UCCSD(T) correction = -2.03295455216144e-06

******** CASCI flags ********
CAS (4e+3e, 5o), ncore = 0, nvir = 0
natorb = False
canonicalization = True
sorting_mo_energy = False
max_memory 4000 (MB)
******** <class 'pyscf.fci.direct_spin1.FCISolver'> ********
max. cycles = 200
conv_tol = 1e-08
davidson only = False
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 400
spin = None
Density matrix diagonal elements [1.99382462 1.98389765 1.99950416 1.         0.02277356]
CASCI converged
CASCI E = -75.4088845604336  E(CI) = -19.5778827208375  S^2 = 0.7500000
Hartree-Fock    -75.38999370188193
Moller-Plesset  -75.40187650106154
CISD            -75.40888113256048
CCSD            -75.40888064338131
CCSD(T)         -75.40888267633586
CASCI           -75.40888456043365
#####################################################
END: cc-pvdz
#####################################################
#####################################################
START: cc-pvtz
#####################################################
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:43 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 9
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry True subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.969700000000 AA    0.000000000000   0.000000000000   1.832467422991 Bohr

nuclear repulsion = 4.36569834728266
point group symmetry = Coov
num. orbitals of irrep A1 = 16
num. orbitals of irrep E1x = 9
num. orbitals of irrep E1y = 9
num. orbitals of irrep E2x = 4
num. orbitals of irrep E2y = 4
num. orbitals of irrep E3x = 1
num. orbitals of irrep E3y = 1
number of shells = 15
number of NR pGTOs = 58
number of NR cGTOs = 44
basis = cc-pvtz
ecp = {}
CPU time:         6.08


******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> ********
method = SymAdaptedROHF-ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpqyczd1x6
max_memory 4000 MB (current use 88 MB)
num. doubly occ = 4  num. singly occ = 1
Freeze 0 electrons in irreps []
    9 free electrons in irreps A1 E1x E1y E2x E2y E3x E3y
Set gradient conv threshold to 3.16228e-05
init E= -75.0493975709608
HOMO (E1y) = -0.432654589657936  LUMO (A1) = 0.11464817120519
cycle= 1 E= -75.4022007256536  delta_E= -0.353  |g|= 0.213  |ddm|= 0.653
HOMO (E1y) = -0.242459106046999  LUMO (A1) = 0.134226474615674
cycle= 2 E= -75.4135094858565  delta_E= -0.0113  |g|= 0.0403  |ddm|= 0.139
HOMO (E1y) = -0.245001171345906  LUMO (A1) = 0.145651596314386
cycle= 3 E= -75.4139505144329  delta_E= -0.000441  |g|= 0.0131  |ddm|= 0.0193
HOMO (E1y) = -0.237863543122387  LUMO (A1) = 0.147262934537676
cycle= 4 E= -75.4139977553579  delta_E= -4.72e-05  |g|= 0.00554  |ddm|= 0.011
HOMO (E1y) = -0.240858421078542  LUMO (A1) = 0.147053828412926
cycle= 5 E= -75.4140039189442  delta_E= -6.16e-06  |g|= 0.000788  |ddm|= 0.00218
HOMO (E1y) = -0.240735830070617  LUMO (A1) = 0.147090227786467
cycle= 6 E= -75.4140041961014  delta_E= -2.77e-07  |g|= 0.000177  |ddm|= 0.000546
HOMO (E1y) = -0.240719066442118  LUMO (A1) = 0.147078972619792
cycle= 7 E= -75.414004155762  delta_E= 4.03e-08  |g|= 0.000305  |ddm|= 0.000145
HOMO (E1y) = -0.240724371706619  LUMO (A1) = 0.147063687310271
cycle= 8 E= -75.4140040716999  delta_E= 8.41e-08  |g|= 0.000461  |ddm|= 0.000249
HOMO (E1y) = -0.240749747062682  LUMO (A1) = 0.147022054694229
cycle= 9 E= -75.4140038793347  delta_E= 1.92e-07  |g|= 0.00074  |ddm|= 0.000359
HOMO (E1y) = -0.24081778357868  LUMO (A1) = 0.147018656720038
cycle= 10 E= -75.4140038678989  delta_E= 1.14e-08  |g|= 0.000753  |ddm|= 0.000104
HOMO (E1y) = -0.240812958631328  LUMO (A1) = 0.147024752786987
cycle= 11 E= -75.4140038682479  delta_E= -3.49e-10  |g|= 0.000756  |ddm|= 3.81e-05
HOMO (E1y) = -0.240867827110008  LUMO (A1) = 0.147003165816454
cycle= 12 E= -75.4140038524325  delta_E= 1.58e-08  |g|= 0.000793  |ddm|= 0.000141
HOMO (E1y) = -0.240917718566453  LUMO (A1) = 0.147008293690081
cycle= 13 E= -75.4140038258906  delta_E= 2.65e-08  |g|= 0.000857  |ddm|= 0.000153
HOMO (E1y) = -0.240894171298362  LUMO (A1) = 0.146997981218735
cycle= 14 E= -75.4140038308991  delta_E= -5.01e-09  |g|= 0.000849  |ddm|= 9.96e-05
HOMO (E1y) = -0.240860676977187  LUMO (A1) = 0.147013793230931
cycle= 15 E= -75.4140038706676  delta_E= -3.98e-08  |g|= 0.000802  |ddm|= 0.000106
HOMO (E1y) = -0.240899957638753  LUMO (A1) = 0.147016195185062
cycle= 16 E= -75.4140039244822  delta_E= -5.38e-08  |g|= 0.000759  |ddm|= 0.000107
HOMO (E1y) = -0.240693736975449  LUMO (A1) = 0.147065026657658
cycle= 17 E= -75.414003848807  delta_E= 7.57e-08  |g|= 0.000836  |ddm|= 0.000165
HOMO (E1y) = -0.2406739366938  LUMO (A1) = 0.147072053547322
cycle= 18 E= -75.41400387746  delta_E= -2.87e-08  |g|= 0.000828  |ddm|= 0.000151
HOMO (E1y) = -0.240738253439179  LUMO (A1) = 0.147061948078963
cycle= 19 E= -75.4140038422759  delta_E= 3.52e-08  |g|= 0.000841  |ddm|= 0.000118
HOMO (E1y) = -0.240743656109055  LUMO (A1) = 0.147067021160871
cycle= 20 E= -75.4140037992615  delta_E= 4.3e-08  |g|= 0.000888  |ddm|= 8.89e-05
HOMO (E1y) = -0.240788011971645  LUMO (A1) = 0.147059133272956
cycle= 21 E= -75.4140038093377  delta_E= -1.01e-08  |g|= 0.000868  |ddm|= 7.84e-05
HOMO (E1y) = -0.240852652915261  LUMO (A1) = 0.147045936790624
cycle= 22 E= -75.4140037497953  delta_E= 5.95e-08  |g|= 0.000939  |ddm|= 0.00014
HOMO (E1y) = -0.240780410818979  LUMO (A1) = 0.147051272163716
cycle= 23 E= -75.4140037213879  delta_E= 2.84e-08  |g|= 0.000969  |ddm|= 0.000126
HOMO (E1y) = -0.240796722814423  LUMO (A1) = 0.147045846769686
cycle= 24 E= -75.4140037194485  delta_E= 1.94e-09  |g|= 0.000968  |ddm|= 5.57e-05
HOMO (E1y) = -0.24088993013489  LUMO (A1) = 0.147051383344978
cycle= 25 E= -75.4140038477555  delta_E= -1.28e-07  |g|= 0.00085  |ddm|= 0.000234
HOMO (E1y) = -0.240822442006135  LUMO (A1) = 0.147038336541632
cycle= 26 E= -75.4140037084496  delta_E= 1.39e-07  |g|= 0.000975  |ddm|= 0.000271
HOMO (E1y) = -0.240823269936349  LUMO (A1) = 0.147041785873826
cycle= 27 E= -75.4140037026575  delta_E= 5.79e-09  |g|= 0.00098  |ddm|= 2.79e-05
HOMO (E1y) = -0.240805833045094  LUMO (A1) = 0.147041565292225
cycle= 28 E= -75.4140038028967  delta_E= -1e-07  |g|= 0.000881  |ddm|= 0.000178
HOMO (E1y) = -0.240785959803303  LUMO (A1) = 0.147051725717961
cycle= 29 E= -75.4140037159658  delta_E= 8.69e-08  |g|= 0.00096  |ddm|= 0.000136
HOMO (E1y) = -0.240782682365613  LUMO (A1) = 0.147057463705311
cycle= 30 E= -75.4140037977985  delta_E= -8.18e-08  |g|= 0.000866  |ddm|= 0.000151
HOMO (E1y) = -0.240839534891576  LUMO (A1) = 0.147041762657456
cycle= 31 E= -75.4140037429954  delta_E= 5.48e-08  |g|= 0.000928  |ddm|= 0.000183
HOMO (E1y) = -0.240843720736399  LUMO (A1) = 0.14704462029904
cycle= 32 E= -75.414003748249  delta_E= -5.25e-09  |g|= 0.000924  |ddm|= 0.000177
HOMO (E1y) = -0.240851784838705  LUMO (A1) = 0.147056899511388
cycle= 33 E= -75.4140037748557  delta_E= -2.66e-08  |g|= 0.000901  |ddm|= 0.000102
HOMO (E1y) = -0.240888941558379  LUMO (A1) = 0.147037158360846
cycle= 34 E= -75.4140037967724  delta_E= -2.19e-08  |g|= 0.000886  |ddm|= 0.000152
HOMO (E1y) = -0.240886640252233  LUMO (A1) = 0.147040605852466
cycle= 35 E= -75.4140037884877  delta_E= 8.28e-09  |g|= 0.000893  |ddm|= 5.57e-05
HOMO (E1y) = -0.240907690516812  LUMO (A1) = 0.147030364663523
cycle= 36 E= -75.4140038295372  delta_E= -4.1e-08  |g|= 0.000845  |ddm|= 0.000167
HOMO (E1y) = -0.240915953697721  LUMO (A1) = 0.147019328900641
cycle= 37 E= -75.4140038954773  delta_E= -6.59e-08  |g|= 0.000803  |ddm|= 0.000189
HOMO (E1y) = -0.24087014851141  LUMO (A1) = 0.147041099288616
cycle= 38 E= -75.4140037642756  delta_E= 1.31e-07  |g|= 0.000896  |ddm|= 0.000276
HOMO (E1y) = -0.240858930240167  LUMO (A1) = 0.14704799274411
cycle= 39 E= -75.4140038132026  delta_E= -4.89e-08  |g|= 0.000837  |ddm|= 0.000102
HOMO (E1y) = -0.240833105178166  LUMO (A1) = 0.147058474758315
cycle= 40 E= -75.4140037930737  delta_E= 2.01e-08  |g|= 0.000873  |ddm|= 0.000192
HOMO (E1y) = -0.240794991832126  LUMO (A1) = 0.14705078807383
cycle= 41 E= -75.4140037830665  delta_E= 1e-08  |g|= 0.000869  |ddm|= 0.000418
HOMO (E1y) = -0.240775568067536  LUMO (A1) = 0.14704651428765
cycle= 42 E= -75.4140037485575  delta_E= 3.45e-08  |g|= 0.000911  |ddm|= 0.000128
HOMO (E1y) = -0.240770743812227  LUMO (A1) = 0.14704795249761
cycle= 43 E= -75.4140037492893  delta_E= -7.32e-10  |g|= 0.000912  |ddm|= 1.42e-05
HOMO (E1y) = -0.240799872691477  LUMO (A1) = 0.147035252028072
cycle= 44 E= -75.4140037938089  delta_E= -4.45e-08  |g|= 0.000854  |ddm|= 0.000147
HOMO (E1y) = -0.240851609421543  LUMO (A1) = 0.147032016331247
cycle= 45 E= -75.4140038026587  delta_E= -8.85e-09  |g|= 0.000847  |ddm|= 9.91e-05
HOMO (E1y) = -0.240846503846234  LUMO (A1) = 0.147022029772257
cycle= 46 E= -75.4140038134864  delta_E= -1.08e-08  |g|= 0.000867  |ddm|= 0.000333
HOMO (E1y) = -0.240918047854093  LUMO (A1) = 0.14703721346624
cycle= 47 E= -75.4140039676331  delta_E= -1.54e-07  |g|= 0.000701  |ddm|= 0.000496
HOMO (E1y) = -0.240771512875821  LUMO (A1) = 0.147048159899049
cycle= 48 E= -75.4140036593312  delta_E= 3.08e-07  |g|= 0.000977  |ddm|= 0.000456
HOMO (E1y) = -0.240806506937784  LUMO (A1) = 0.147031554119711
cycle= 49 E= -75.4140036689595  delta_E= -9.63e-09  |g|= 0.000957  |ddm|= 0.000128
HOMO (E1y) = -0.240830277763589  LUMO (A1) = 0.147027211161334
cycle= 50 E= -75.4140036739042  delta_E= -4.94e-09  |g|= 0.00095  |ddm|= 7.01e-05
SCF not converged.
SCF energy = -75.4140036739042
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:44 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         7.17

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmp5ap2djgi
max_memory 4000 MB (current use 95 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmp5ap2djgi
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 95 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.240693950258965  LUMO = 0.43082505916651
Initial guess E= -75.414003699309  |g|= 3.57126e-05
macro= 0  E= -75.4140037000483  delta_E= -7.39334e-10  |g|= 3.57126e-05  1 KF 3 JK
macro= 1  E= -75.4140037000483  delta_E= 1.42109e-14  |g|= 1.62696e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.4140037000483  |g|= 1.62696e-06  total 3 KF 8 JK
converged SCF energy = -75.4140037000483
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:44 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         7.31

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpocqn9w66
max_memory 4000 MB (current use 102 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpocqn9w66
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 102 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.240760072543609  LUMO = 0.430824022040812
Initial guess E= -75.4140037000487  |g|= 1.86787e-07
macro= 0  E= -75.4140037000487  delta_E= -1.42109e-14  |g|= 1.86787e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.4140037000487  |g|= 1.86787e-07  total 2 KF 4 JK
converged SCF energy = -75.4140037000487
-----------------------------------------------------
number of orbitals   6
number of electrons  (5, 4)
energy offset        4.365698347282665
irreps of orbitals   ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
-----------------------------------------------------
reconstruction of HF energy  -75.4140036739042 -75.41400370004874
-----------------------------------------------------
number of orbitals   5
number of electrons  (4, 3)
energy offset        -55.831377726470684
irreps of orbitals   ['A1', 'A1', 'E1x', 'E1y', 'A1']
-----------------------------------------------------
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:44 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         7.33

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpofpc41py
max_memory 4000 MB (current use 102 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpofpc41py
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 102 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.240760072543607  LUMO = 0.43082402204079
Initial guess E= -75.4140037000487  |g|= 1.73359e-07
macro= 0  E= -75.4140037000487  delta_E= 0  |g|= 1.73359e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.4140037000487  |g|= 1.73359e-07  total 2 KF 4 JK
converged SCF energy = -75.4140037000487
reconstruction of HF energy  -75.4140036739042 -75.41400370004865
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:44 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         7.35

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpbvqn_zdi
max_memory 4000 MB (current use 102 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpbvqn_zdi
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 102 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.240760072543607  LUMO = 0.43082402204079
Initial guess E= -75.4140037000487  |g|= 1.73359e-07
macro= 0  E= -75.4140037000487  delta_E= 0  |g|= 1.73359e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.4140037000487  |g|= 1.73359e-07  total 2 KF 4 JK
converged SCF energy = -75.4140037000487

WARN: RMP2 method does not support ROHF method. ROHF object is converted to UHF object and UMP2 method is called.


******** <class 'pyscf.mp.ump2.UMP2'> ********
nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_memory 4000 MB (current use 102 MB)
E(UMP2) = -75.4257460877769  E_corr = -0.0117423877282405

WARN: RCISD method does not support ROHF method. ROHF object is converted to UHF object and UCISD method is called.


******** <class 'pyscf.ci.ucisd.UCISD'> ********
CISD nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-09
max_cycle = 50
max_space = 12
lindep = 0
nroots = 1
max_memory 4000 MB (current use 102 MB)
Init t2, MP2 energy = -0.0117423877282405
UCISD converged
E(UCISD) = -75.43262681257531  E_corr = -0.01862311252665759

WARN: RCCSD method does not support ROHF method. ROHF object is converted to UHF object and UCCSD method is called.


******** <class 'pyscf.cc.uccsd.UCCSD'> ********
CC2 = 0
CCSD nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-07
conv_tol_normt = 1e-06
diis_space = 6
diis_start_cycle = 0
diis_start_energy_diff = 1e+09
max_memory 4000 MB (current use 102 MB)
Init t2, MP2 energy = -0.0117423877282405
Init E_corr(CCSD) = -0.0121782279343232
cycle = 1  E_corr(CCSD) = -0.016199602899128  dE = -0.00402137496  norm(t1,t2) = 0.0253174
cycle = 2  E_corr(CCSD) = -0.0176453904315614  dE = -0.00144578753  norm(t1,t2) = 0.0104526
cycle = 3  E_corr(CCSD) = -0.0186009716743395  dE = -0.000955581243  norm(t1,t2) = 0.00482533
cycle = 4  E_corr(CCSD) = -0.018601297426564  dE = -3.25752225e-07  norm(t1,t2) = 0.00137795
cycle = 5  E_corr(CCSD) = -0.0186241497965751  dE = -2.285237e-05  norm(t1,t2) = 0.000453822
cycle = 6  E_corr(CCSD) = -0.0186219291686154  dE = 2.22062796e-06  norm(t1,t2) = 9.46104e-05
cycle = 7  E_corr(CCSD) = -0.0186229326219273  dE = -1.00345331e-06  norm(t1,t2) = 1.6583e-05
cycle = 8  E_corr(CCSD) = -0.0186225867576777  dE = 3.4586425e-07  norm(t1,t2) = 2.31682e-06
cycle = 9  E_corr(CCSD) = -0.0186225824623777  dE = 4.29530004e-09  norm(t1,t2) = 3.69248e-07
UCCSD converged
E(UCCSD) = -75.43262628251104  E_corr = -0.0186225824623777
UCCSD(T) correction = -2.29431345998541e-06

******** CASCI flags ********
CAS (4e+3e, 5o), ncore = 0, nvir = 0
natorb = False
canonicalization = True
sorting_mo_energy = False
max_memory 4000 (MB)
******** <class 'pyscf.fci.direct_spin1.FCISolver'> ********
max. cycles = 200
conv_tol = 1e-08
davidson only = False
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 400
spin = None
Density matrix diagonal elements [1.99388144 1.98421744 1.99951829 1.         0.02238283]
CASCI converged
CASCI E = -75.4326306714433  E(CI) = -19.6012529449726  S^2 = 0.7500000
Hartree-Fock    -75.41400370004865
Moller-Plesset  -75.42574608777689
CISD            -75.43262681257531
CCSD            -75.43262628251104
CCSD(T)         -75.4326285768245
CASCI           -75.43263067144329
#####################################################
END: cc-pvtz
#####################################################
#####################################################
START: cc-pvqz
#####################################################
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:44 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 9
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry True subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.969700000000 AA    0.000000000000   0.000000000000   1.832467422991 Bohr

nuclear repulsion = 4.36569834728266
point group symmetry = Coov
num. orbitals of irrep A1 = 25
num. orbitals of irrep E1x = 16
num. orbitals of irrep E1y = 16
num. orbitals of irrep E2x = 9
num. orbitals of irrep E2y = 9
num. orbitals of irrep E3x = 4
num. orbitals of irrep E3y = 4
num. orbitals of irrep E4x = 1
num. orbitals of irrep E4y = 1
number of shells = 24
number of NR pGTOs = 100
number of NR cGTOs = 85
basis = cc-pvqz
ecp = {}
CPU time:         7.58


******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> ********
method = SymAdaptedROHF-ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpekehfxdj
max_memory 4000 MB (current use 102 MB)
num. doubly occ = 4  num. singly occ = 1
Freeze 0 electrons in irreps []
    9 free electrons in irreps A1 E1x E1y E2x E2y E3x E3y E4x E4y
Set gradient conv threshold to 3.16228e-05
init E= -75.0562534163352
HOMO (E1y) = -0.433611953912707  LUMO (A1) = 0.0966010647943685
cycle= 1 E= -75.4083682895149  delta_E= -0.352  |g|= 0.216  |ddm|= 0.644
HOMO (E1y) = -0.248924811910824  LUMO (A1) = 0.10981001638927
cycle= 2 E= -75.4198449485807  delta_E= -0.0115  |g|= 0.042  |ddm|= 0.133
HOMO (E1y) = -0.2483564218101  LUMO (A1) = 0.119863472229933
cycle= 3 E= -75.4202853543745  delta_E= -0.00044  |g|= 0.0124  |ddm|= 0.0186
HOMO (E1y) = -0.242054605674946  LUMO (A1) = 0.121119882925871
cycle= 4 E= -75.4203315201919  delta_E= -4.62e-05  |g|= 0.0051  |ddm|= 0.0112
HOMO (E1y) = -0.244946020779363  LUMO (A1) = 0.120943807537185
cycle= 5 E= -75.4203367422246  delta_E= -5.22e-06  |g|= 0.000992  |ddm|= 0.00193
HOMO (E1y) = -0.244738077405794  LUMO (A1) = 0.120979553219074
cycle= 6 E= -75.4203370900571  delta_E= -3.48e-07  |g|= 0.000242  |ddm|= 0.000598
HOMO (E1y) = -0.244713575152549  LUMO (A1) = 0.120963207276975
cycle= 7 E= -75.4203369794335  delta_E= 1.11e-07  |g|= 0.000463  |ddm|= 0.000255
HOMO (E1y) = -0.244718759744404  LUMO (A1) = 0.120935064891676
cycle= 8 E= -75.4203366898806  delta_E= 2.9e-07  |g|= 0.000773  |ddm|= 0.000509
HOMO (E1y) = -0.24478756757579  LUMO (A1) = 0.12088610239774
cycle= 9 E= -75.4203359961032  delta_E= 6.94e-07  |g|= 0.00132  |ddm|= 0.000849
HOMO (E1y) = -0.244872443016361  LUMO (A1) = 0.120859237831498
cycle= 10 E= -75.4203359955893  delta_E= 5.14e-10  |g|= 0.00132  |ddm|= 0.000372
HOMO (E1y) = -0.244860348648476  LUMO (A1) = 0.120860014579811
cycle= 11 E= -75.4203360024723  delta_E= -6.88e-09  |g|= 0.00131  |ddm|= 3.9e-05
HOMO (E1y) = -0.244926334557135  LUMO (A1) = 0.120847723392618
cycle= 12 E= -75.4203360100904  delta_E= -7.62e-09  |g|= 0.00133  |ddm|= 0.000136
HOMO (E1y) = -0.244920232099524  LUMO (A1) = 0.120848759157091
cycle= 13 E= -75.420336019384  delta_E= -9.29e-09  |g|= 0.00132  |ddm|= 0.000185
HOMO (E1y) = -0.244898317128494  LUMO (A1) = 0.120905299289289
cycle= 14 E= -75.4203358548315  delta_E= 1.65e-07  |g|= 0.00145  |ddm|= 0.000727
HOMO (E1y) = -0.244705912002662  LUMO (A1) = 0.120944599476838
cycle= 15 E= -75.4203356024893  delta_E= 2.52e-07  |g|= 0.00162  |ddm|= 0.000414
HOMO (E1y) = -0.244941194849951  LUMO (A1) = 0.12090950599426
cycle= 16 E= -75.4203359831885  delta_E= -3.81e-07  |g|= 0.00142  |ddm|= 0.000464
HOMO (E1y) = -0.244728252228244  LUMO (A1) = 0.120960571392007
cycle= 17 E= -75.4203357582627  delta_E= 2.25e-07  |g|= 0.00155  |ddm|= 0.00045
HOMO (E1y) = -0.244819433587151  LUMO (A1) = 0.12090690180678
cycle= 18 E= -75.420335561805  delta_E= 1.96e-07  |g|= 0.00161  |ddm|= 0.000548
HOMO (E1y) = -0.24479635498861  LUMO (A1) = 0.120893106981244
cycle= 19 E= -75.4203355700051  delta_E= -8.2e-09  |g|= 0.00159  |ddm|= 0.000427
HOMO (E1y) = -0.244793167188669  LUMO (A1) = 0.120895887074605
cycle= 20 E= -75.4203356249138  delta_E= -5.49e-08  |g|= 0.00156  |ddm|= 8.82e-05
HOMO (E1y) = -0.244715982767307  LUMO (A1) = 0.120918721870581
cycle= 21 E= -75.4203355888473  delta_E= 3.61e-08  |g|= 0.00159  |ddm|= 0.000123
HOMO (E1y) = -0.244637045960483  LUMO (A1) = 0.120929230950786
cycle= 22 E= -75.4203355541841  delta_E= 3.47e-08  |g|= 0.00163  |ddm|= 0.000806
HOMO (E1y) = -0.244714597542672  LUMO (A1) = 0.120883526867272
cycle= 23 E= -75.4203357856492  delta_E= -2.31e-07  |g|= 0.00143  |ddm|= 0.00052
HOMO (E1y) = -0.244832921386545  LUMO (A1) = 0.120915497834572
cycle= 24 E= -75.4203357004876  delta_E= 8.52e-08  |g|= 0.00151  |ddm|= 0.000487
HOMO (E1y) = -0.244861822205261  LUMO (A1) = 0.120904930642972
cycle= 25 E= -75.4203360649664  delta_E= -3.64e-07  |g|= 0.00131  |ddm|= 0.000728
HOMO (E1y) = -0.244868245150457  LUMO (A1) = 0.120942843703376
cycle= 26 E= -75.4203361443219  delta_E= -7.94e-08  |g|= 0.00127  |ddm|= 0.00114
HOMO (E1y) = -0.244900423541312  LUMO (A1) = 0.120907166570377
cycle= 27 E= -75.4203357477607  delta_E= 3.97e-07  |g|= 0.00149  |ddm|= 0.000449
HOMO (E1y) = -0.244881912492039  LUMO (A1) = 0.120923674411258
cycle= 28 E= -75.4203358707375  delta_E= -1.23e-07  |g|= 0.00141  |ddm|= 0.000162
HOMO (E1y) = -0.244919699975512  LUMO (A1) = 0.120902330822245
cycle= 29 E= -75.4203357878191  delta_E= 8.29e-08  |g|= 0.00148  |ddm|= 0.000545
HOMO (E1y) = -0.244943920961259  LUMO (A1) = 0.120872780647587
cycle= 30 E= -75.4203358128978  delta_E= -2.51e-08  |g|= 0.00146  |ddm|= 0.000347
HOMO (E1y) = -0.244902335834035  LUMO (A1) = 0.120863296058462
cycle= 31 E= -75.4203358484765  delta_E= -3.56e-08  |g|= 0.00143  |ddm|= 0.000141
HOMO (E1y) = -0.244868100630205  LUMO (A1) = 0.120872733566871
cycle= 32 E= -75.4203358341431  delta_E= 1.43e-08  |g|= 0.00144  |ddm|= 9.33e-05
HOMO (E1y) = -0.2449318360232  LUMO (A1) = 0.120870076940414
cycle= 33 E= -75.4203358530347  delta_E= -1.89e-08  |g|= 0.00144  |ddm|= 0.000178
HOMO (E1y) = -0.244944092584811  LUMO (A1) = 0.120868089191752
cycle= 34 E= -75.4203360474113  delta_E= -1.94e-07  |g|= 0.00134  |ddm|= 0.000532
HOMO (E1y) = -0.244921520708145  LUMO (A1) = 0.1208845947501
cycle= 35 E= -75.4203360964831  delta_E= -4.91e-08  |g|= 0.00132  |ddm|= 0.000654
HOMO (E1y) = -0.24476345187976  LUMO (A1) = 0.120930462690964
cycle= 36 E= -75.4203362987992  delta_E= -2.02e-07  |g|= 0.00114  |ddm|= 0.000449
HOMO (E1y) = -0.244744095089138  LUMO (A1) = 0.120908538738205
cycle= 37 E= -75.4203355348423  delta_E= 7.64e-07  |g|= 0.00163  |ddm|= 0.000786
HOMO (E1y) = -0.244864433988128  LUMO (A1) = 0.120869037437649
cycle= 38 E= -75.4203355523764  delta_E= -1.75e-08  |g|= 0.00159  |ddm|= 0.000356
HOMO (E1y) = -0.244892977460567  LUMO (A1) = 0.120873850712584
cycle= 39 E= -75.4203355754417  delta_E= -2.31e-08  |g|= 0.00158  |ddm|= 0.000129
HOMO (E1y) = -0.244865338752493  LUMO (A1) = 0.120873488491158
cycle= 40 E= -75.420335564687  delta_E= 1.08e-08  |g|= 0.00158  |ddm|= 9.05e-05
HOMO (E1y) = -0.24490417158734  LUMO (A1) = 0.120869796813539
cycle= 41 E= -75.420335585008  delta_E= -2.03e-08  |g|= 0.00157  |ddm|= 0.000101
HOMO (E1y) = -0.244908674876704  LUMO (A1) = 0.120855936494435
cycle= 42 E= -75.4203357243305  delta_E= -1.39e-07  |g|= 0.0015  |ddm|= 0.000334
HOMO (E1y) = -0.244945256710046  LUMO (A1) = 0.12085637819231
cycle= 43 E= -75.4203356414755  delta_E= 8.29e-08  |g|= 0.00154  |ddm|= 0.000248
HOMO (E1y) = -0.244928544569203  LUMO (A1) = 0.120867763342154
cycle= 44 E= -75.4203356703646  delta_E= -2.89e-08  |g|= 0.00153  |ddm|= 0.000248
HOMO (E1y) = -0.244919806692571  LUMO (A1) = 0.120880635620282
cycle= 45 E= -75.4203360401321  delta_E= -3.7e-07  |g|= 0.0013  |ddm|= 0.000628
HOMO (E1y) = -0.244934587527089  LUMO (A1) = 0.120901052712308
cycle= 46 E= -75.4203359005022  delta_E= 1.4e-07  |g|= 0.00142  |ddm|= 0.00085
HOMO (E1y) = -0.244927890957347  LUMO (A1) = 0.120866947354155
cycle= 47 E= -75.4203356762131  delta_E= 2.24e-07  |g|= 0.00152  |ddm|= 0.000373
HOMO (E1y) = -0.24490776398368  LUMO (A1) = 0.120871931695435
cycle= 48 E= -75.4203356394393  delta_E= 3.68e-08  |g|= 0.00155  |ddm|= 0.000138
HOMO (E1y) = -0.244931985745439  LUMO (A1) = 0.12085769767559
cycle= 49 E= -75.4203356797657  delta_E= -4.03e-08  |g|= 0.00154  |ddm|= 0.000141
HOMO (E1y) = -0.244869722804751  LUMO (A1) = 0.120871173057313
cycle= 50 E= -75.4203356081573  delta_E= 7.16e-08  |g|= 0.00155  |ddm|= 0.000367
SCF not converged.
SCF energy = -75.4203356081573
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:47 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        32.66

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmplx9hopcs
max_memory 4000 MB (current use 170 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmplx9hopcs
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 170 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.244689902275574  LUMO = 0.428318113854208
Initial guess E= -75.4203356395564  |g|= 3.46849e-05
macro= 0  E= -75.420335640113  delta_E= -5.56597e-10  |g|= 3.46849e-05  1 KF 2 JK
macro= 1  E= -75.420335640113  delta_E= 1.42109e-14  |g|= 1.16671e-05  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.420335640113  |g|= 1.16671e-05  total 3 KF 7 JK
converged SCF energy = -75.420335640113
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:48 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        34.00

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpe0g79ckg
max_memory 4000 MB (current use 167 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpe0g79ckg
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 167 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.244765120524657  LUMO = 0.428313787860289
Initial guess E= -75.4203356401493  |g|= 2.38216e-06
macro= 0  E= -75.4203356401518  delta_E= -2.51532e-12  |g|= 2.38216e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.4203356401518  |g|= 2.38216e-06  total 2 KF 4 JK
converged SCF energy = -75.4203356401518
-----------------------------------------------------
number of orbitals   6
number of electrons  (5, 4)
energy offset        4.365698347282665
irreps of orbitals   ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
-----------------------------------------------------
reconstruction of HF energy  -75.42033560815727 -75.42033564015185
-----------------------------------------------------
number of orbitals   5
number of electrons  (4, 3)
energy offset        -55.83261301708134
irreps of orbitals   ['A1', 'A1', 'E1x', 'E1y', 'A1']
-----------------------------------------------------
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:48 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        34.02

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpo9qjzzag
max_memory 4000 MB (current use 167 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpo9qjzzag
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 167 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.244765120524659  LUMO = 0.428313787859663
Initial guess E= -75.4203356401481  |g|= 2.39747e-06
macro= 0  E= -75.4203356401507  delta_E= -2.57216e-12  |g|= 2.39747e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.4203356401507  |g|= 2.39747e-06  total 2 KF 4 JK
converged SCF energy = -75.4203356401507
reconstruction of HF energy  -75.42033560815727 -75.4203356401507
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:48 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        34.04

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpliprx2uw
max_memory 4000 MB (current use 167 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpliprx2uw
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 167 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.244765120524659  LUMO = 0.428313787859663
Initial guess E= -75.4203356401481  |g|= 2.39747e-06
macro= 0  E= -75.4203356401507  delta_E= -2.57216e-12  |g|= 2.39747e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.4203356401507  |g|= 2.39747e-06  total 2 KF 4 JK
converged SCF energy = -75.4203356401507

WARN: RMP2 method does not support ROHF method. ROHF object is converted to UHF object and UMP2 method is called.


******** <class 'pyscf.mp.ump2.UMP2'> ********
nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_memory 4000 MB (current use 167 MB)
E(UMP2) = -75.4320432486119  E_corr = -0.0117076084612374

WARN: RCISD method does not support ROHF method. ROHF object is converted to UHF object and UCISD method is called.


******** <class 'pyscf.ci.ucisd.UCISD'> ********
CISD nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-09
max_cycle = 50
max_space = 12
lindep = 0
nroots = 1
max_memory 4000 MB (current use 167 MB)
Init t2, MP2 energy = -0.0117076084612374
UCISD converged
E(UCISD) = -75.43888950134645  E_corr = -0.01855386119576219

WARN: RCCSD method does not support ROHF method. ROHF object is converted to UHF object and UCCSD method is called.


******** <class 'pyscf.cc.uccsd.UCCSD'> ********
CC2 = 0
CCSD nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-07
conv_tol_normt = 1e-06
diis_space = 6
diis_start_cycle = 0
diis_start_energy_diff = 1e+09
max_memory 4000 MB (current use 167 MB)
Init t2, MP2 energy = -0.0117076084612374
Init E_corr(CCSD) = -0.0121437528881748
cycle = 1  E_corr(CCSD) = -0.0161461081482337  dE = -0.00400235526  norm(t1,t2) = 0.0252341
cycle = 2  E_corr(CCSD) = -0.0175833127803588  dE = -0.00143720463  norm(t1,t2) = 0.0104124
cycle = 3  E_corr(CCSD) = -0.0185320075371025  dE = -0.000948694757  norm(t1,t2) = 0.00480307
cycle = 4  E_corr(CCSD) = -0.0185321726874158  dE = -1.65150313e-07  norm(t1,t2) = 0.00136933
cycle = 5  E_corr(CCSD) = -0.0185548756471108  dE = -2.27029597e-05  norm(t1,t2) = 0.000450529
cycle = 6  E_corr(CCSD) = -0.0185526886065024  dE = 2.18704061e-06  norm(t1,t2) = 9.36729e-05
cycle = 7  E_corr(CCSD) = -0.0185536635023629  dE = -9.74895861e-07  norm(t1,t2) = 1.63133e-05
cycle = 8  E_corr(CCSD) = -0.0185533267327154  dE = 3.36769648e-07  norm(t1,t2) = 2.25876e-06
cycle = 9  E_corr(CCSD) = -0.0185533226395059  dE = 4.09320948e-09  norm(t1,t2) = 3.60805e-07
UCCSD converged
E(UCCSD) = -75.43888896279019  E_corr = -0.0185533226395059
UCCSD(T) correction = -2.36326209833097e-06

******** CASCI flags ********
CAS (4e+3e, 5o), ncore = 0, nvir = 0
natorb = False
canonicalization = True
sorting_mo_energy = False
max_memory 4000 (MB)
******** <class 'pyscf.fci.direct_spin1.FCISolver'> ********
max. cycles = 200
conv_tol = 1e-08
davidson only = False
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 400
spin = None
Density matrix diagonal elements [1.99388389 1.98434768 1.99952242 1.         0.022246  ]
CASCI converged
CASCI E = -75.4388934733419  E(CI) = -19.6062804562605  S^2 = 0.7500000
Hartree-Fock    -75.4203356401507
Moller-Plesset  -75.43204324861193
CISD            -75.43888950134645
CCSD            -75.4388889627902
CCSD(T)         -75.4388913260523
CASCI           -75.43889347334186
#####################################################
END: cc-pvqz
#####################################################
#####################################################
START: aug-cc-pvdz
#####################################################
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:48 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 9
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry True subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.969700000000 AA    0.000000000000   0.000000000000   1.832467422991 Bohr

nuclear repulsion = 4.36569834728266
point group symmetry = Coov
num. orbitals of irrep A1 = 14
num. orbitals of irrep E1x = 7
num. orbitals of irrep E1y = 7
num. orbitals of irrep E2x = 2
num. orbitals of irrep E2y = 2
number of shells = 13
number of NR pGTOs = 46
number of NR cGTOs = 32
basis = aug-cc-pvdz
ecp = {}
CPU time:        34.24


******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> ********
method = SymAdaptedROHF-ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpv0qs1a_j
max_memory 4000 MB (current use 167 MB)
num. doubly occ = 4  num. singly occ = 1
Freeze 0 electrons in irreps []
    9 free electrons in irreps A1 E1x E1y E2x E2y
Set gradient conv threshold to 3.16228e-05
init E= -75.0393360308304
HOMO (E1x) = -0.430550357826207  LUMO (A1) = 0.0319646230464341
cycle= 1 E= -75.3874760433986  delta_E= -0.348  |g|= 0.199  |ddm|= 0.872
HOMO (E1x) = -0.259010294344657  LUMO (A1) = 0.0323049607321093
cycle= 2 E= -75.3988150653508  delta_E= -0.0113  |g|= 0.0351  |ddm|= 0.131
HOMO (E1x) = -0.249012257248627  LUMO (A1) = 0.0362157105836307
cycle= 3 E= -75.3992431192971  delta_E= -0.000428  |g|= 0.00832  |ddm|= 0.0291
HOMO (E1x) = -0.248677874482982  LUMO (A1) = 0.0363934251290032
cycle= 4 E= -75.3992848384883  delta_E= -4.17e-05  |g|= 0.00189  |ddm|= 0.0123
HOMO (E1x) = -0.247969051916053  LUMO (A1) = 0.0364482597659515
cycle= 5 E= -75.3992871783726  delta_E= -2.34e-06  |g|= 0.001  |ddm|= 0.00514
HOMO (E1x) = -0.248442295118157  LUMO (A1) = 0.036437597203326
cycle= 6 E= -75.3992877264165  delta_E= -5.48e-07  |g|= 0.000219  |ddm|= 0.00113
HOMO (E1x) = -0.248393024949287  LUMO (A1) = 0.0364375266495973
cycle= 7 E= -75.3992877705407  delta_E= -4.41e-08  |g|= 6.67e-05  |ddm|= 0.00045
HOMO (E1x) = -0.248407089956818  LUMO (A1) = 0.0364421168893439
cycle= 8 E= -75.3992877607931  delta_E= 9.75e-09  |g|= 9.36e-05  |ddm|= 0.000275
HOMO (E1x) = -0.248409349590126  LUMO (A1) = 0.0364414579220006
cycle= 9 E= -75.3992877613941  delta_E= -6.01e-10  |g|= 9.51e-05  |ddm|= 3.56e-05
HOMO (E1x) = -0.248407589717546  LUMO (A1) = 0.0364417553778108
cycle= 10 E= -75.3992877584542  delta_E= 2.94e-09  |g|= 0.000103  |ddm|= 4.26e-05
HOMO (E1x) = -0.248408614444497  LUMO (A1) = 0.0364417732312114
cycle= 11 E= -75.3992877598082  delta_E= -1.35e-09  |g|= 9.91e-05  |ddm|= 1.6e-05
HOMO (E1x) = -0.248410438397148  LUMO (A1) = 0.0364413760721578
cycle= 12 E= -75.3992877589504  delta_E= 8.58e-10  |g|= 0.000101  |ddm|= 1.23e-05
HOMO (E1x) = -0.24840987537825  LUMO (A1) = 0.0364418362541051
cycle= 13 E= -75.399287756133  delta_E= 2.82e-09  |g|= 0.000111  |ddm|= 5.3e-05
HOMO (E1x) = -0.248397286757868  LUMO (A1) = 0.0364420016838723
cycle= 14 E= -75.3992877592222  delta_E= -3.09e-09  |g|= 0.000104  |ddm|= 5.42e-05
HOMO (E1x) = -0.248388525200319  LUMO (A1) = 0.0364422751779654
cycle= 15 E= -75.3992877587086  delta_E= 5.14e-10  |g|= 0.00011  |ddm|= 1.93e-05
HOMO (E1x) = -0.248406320673457  LUMO (A1) = 0.0364412779983323
cycle= 16 E= -75.3992877578721  delta_E= 8.37e-10  |g|= 0.000104  |ddm|= 5.7e-05
HOMO (E1x) = -0.248433219573758  LUMO (A1) = 0.0364374594346359
cycle= 17 E= -75.3992877683896  delta_E= -1.05e-08  |g|= 7.49e-05  |ddm|= 0.000149
HOMO (E1x) = -0.24842681764055  LUMO (A1) = 0.0364378064086278
cycle= 18 E= -75.3992877674381  delta_E= 9.52e-10  |g|= 7.67e-05  |ddm|= 2.46e-05
HOMO (E1x) = -0.248389274210497  LUMO (A1) = 0.0364427760468575
cycle= 19 E= -75.3992877610044  delta_E= 6.43e-09  |g|= 0.000102  |ddm|= 0.000124
HOMO (E1x) = -0.248393742645292  LUMO (A1) = 0.0364420101782345
cycle= 20 E= -75.3992877654877  delta_E= -4.48e-09  |g|= 8.3e-05  |ddm|= 6.44e-05
HOMO (E1x) = -0.248389115263805  LUMO (A1) = 0.036441763514421
cycle= 21 E= -75.3992877672251  delta_E= -1.74e-09  |g|= 7.72e-05  |ddm|= 3.6e-05
HOMO (E1x) = -0.24838503510835  LUMO (A1) = 0.0364402987420769
cycle= 22 E= -75.3992877713401  delta_E= -4.11e-09  |g|= 5.69e-05  |ddm|= 0.000136
HOMO (E1x) = -0.248397936471662  LUMO (A1) = 0.0364408672156981
cycle= 23 E= -75.3992877695491  delta_E= 1.79e-09  |g|= 5.75e-05  |ddm|= 7.89e-05
HOMO (E1x) = -0.248398040729903  LUMO (A1) = 0.036441709069053
cycle= 24 E= -75.3992877676188  delta_E= 1.93e-09  |g|= 7.13e-05  |ddm|= 5.08e-05
HOMO (E1x) = -0.24840612155388  LUMO (A1) = 0.0364417809307025
cycle= 25 E= -75.3992877682996  delta_E= -6.81e-10  |g|= 6.56e-05  |ddm|= 2.93e-05
HOMO (E1x) = -0.248406791278831  LUMO (A1) = 0.036441803112915
cycle= 26 E= -75.3992877690154  delta_E= -7.16e-10  |g|= 6.09e-05  |ddm|= 2.48e-05
HOMO (E1x) = -0.24839441152203  LUMO (A1) = 0.0364426504894033
cycle= 27 E= -75.399287765774  delta_E= 3.24e-09  |g|= 8.05e-05  |ddm|= 5.58e-05
HOMO (E1x) = -0.248394845135412  LUMO (A1) = 0.036441749954664
cycle= 28 E= -75.3992877629113  delta_E= 2.86e-09  |g|= 9.68e-05  |ddm|= 5.89e-05
HOMO (E1x) = -0.248392407594305  LUMO (A1) = 0.0364420594327798
cycle= 29 E= -75.3992877621737  delta_E= 7.38e-10  |g|= 0.0001  |ddm|= 1.15e-05
HOMO (E1x) = -0.248385942947774  LUMO (A1) = 0.0364424586448311
cycle= 30 E= -75.3992877636694  delta_E= -1.5e-09  |g|= 9.66e-05  |ddm|= 3.03e-05
HOMO (E1x) = -0.248389167721048  LUMO (A1) = 0.0364412986023769
cycle= 31 E= -75.3992877669654  delta_E= -3.3e-09  |g|= 8.14e-05  |ddm|= 5.87e-05
HOMO (E1x) = -0.248401063980581  LUMO (A1) = 0.0364389619061675
cycle= 32 E= -75.3992877714039  delta_E= -4.44e-09  |g|= 4.69e-05  |ddm|= 0.00014
HOMO (E1x) = -0.24840296294366  LUMO (A1) = 0.0364390185814837
cycle= 33 E= -75.3992877714038  delta_E= 8.53e-14  |g|= 4.78e-05  |ddm|= 2.34e-05
HOMO (E1x) = -0.248396034477909  LUMO (A1) = 0.0364384543114147
cycle= 34 E= -75.3992877714224  delta_E= -1.86e-11  |g|= 5.09e-05  |ddm|= 3.45e-05
HOMO (E1x) = -0.248402894147265  LUMO (A1) = 0.036438293062251
cycle= 35 E= -75.3992877711805  delta_E= 2.42e-10  |g|= 5.02e-05  |ddm|= 4.71e-05
HOMO (E1x) = -0.248408070806545  LUMO (A1) = 0.0364401621013411
cycle= 36 E= -75.3992877642244  delta_E= 6.96e-09  |g|= 8.45e-05  |ddm|= 0.000147
HOMO (E1x) = -0.248415309289383  LUMO (A1) = 0.0364396354012917
cycle= 37 E= -75.3992877691296  delta_E= -4.91e-09  |g|= 6.99e-05  |ddm|= 0.000121
HOMO (E1x) = -0.2484128473969  LUMO (A1) = 0.036440218327744
cycle= 38 E= -75.399287769585  delta_E= -4.55e-10  |g|= 6.57e-05  |ddm|= 4.83e-05
HOMO (E1x) = -0.248404734394904  LUMO (A1) = 0.0364417648454579
cycle= 39 E= -75.399287769516  delta_E= 6.91e-11  |g|= 5.38e-05  |ddm|= 6.64e-05
HOMO (E1x) = -0.248418761182116  LUMO (A1) = 0.0364395378176585
cycle= 40 E= -75.3992877699299  delta_E= -4.14e-10  |g|= 6.65e-05  |ddm|= 8.19e-05
HOMO (E1x) = -0.248420095236178  LUMO (A1) = 0.036441378102346
cycle= 41 E= -75.3992877700216  delta_E= -9.17e-11  |g|= 7.07e-05  |ddm|= 6.84e-05
HOMO (E1x) = -0.248425427905358  LUMO (A1) = 0.0364403601428654
cycle= 42 E= -75.3992877685362  delta_E= 1.49e-09  |g|= 8.78e-05  |ddm|= 5.8e-05
HOMO (E1x) = -0.248433373256654  LUMO (A1) = 0.0364405475796827
cycle= 43 E= -75.3992877670885  delta_E= 1.45e-09  |g|= 9.98e-05  |ddm|= 4.7e-05
HOMO (E1x) = -0.248434838838471  LUMO (A1) = 0.0364406101441185
cycle= 44 E= -75.3992877655523  delta_E= 1.54e-09  |g|= 0.000104  |ddm|= 4.23e-05
HOMO (E1x) = -0.248420010196326  LUMO (A1) = 0.0364421886506265
cycle= 45 E= -75.3992877543319  delta_E= 1.12e-08  |g|= 0.000124  |ddm|= 0.000165
HOMO (E1x) = -0.248418481900993  LUMO (A1) = 0.0364416143591481
cycle= 46 E= -75.3992877552761  delta_E= -9.44e-10  |g|= 0.00012  |ddm|= 3.22e-05
HOMO (E1x) = -0.248423008443592  LUMO (A1) = 0.0364413791523263
cycle= 47 E= -75.3992877569233  delta_E= -1.65e-09  |g|= 0.000119  |ddm|= 3.19e-05
HOMO (E1x) = -0.248397026761322  LUMO (A1) = 0.0364423711063174
cycle= 48 E= -75.3992877605151  delta_E= -3.59e-09  |g|= 9.83e-05  |ddm|= 7.21e-05
HOMO (E1x) = -0.24839626525645  LUMO (A1) = 0.0364432089332948
cycle= 49 E= -75.3992877598472  delta_E= 6.68e-10  |g|= 9.73e-05  |ddm|= 5.75e-05
HOMO (E1x) = -0.248387568839156  LUMO (A1) = 0.0364412566399525
cycle= 50 E= -75.3992877602582  delta_E= -4.11e-10  |g|= 0.000102  |ddm|= 5.86e-05
SCF not converged.
SCF energy = -75.3992877602582
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:48 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        34.91

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpd5_or0en
max_memory 4000 MB (current use 167 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpd5_or0en
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 167 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.248430027970786  LUMO = 0.425890192290019
Initial guess E= -75.399287760436  |g|= 3.91551e-06
macro= 0  E= -75.3992877604408  delta_E= -4.8459e-12  |g|= 3.91551e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3992877604408  |g|= 3.91551e-06  total 2 KF 4 JK
converged SCF energy = -75.3992877604408
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:48 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        34.99

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpn8vzkn6v
max_memory 4000 MB (current use 114 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpn8vzkn6v
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 114 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.248425824413751  LUMO = 0.425890965403706
Initial guess E= -75.3992877604416  |g|= 2.06727e-07
macro= 0  E= -75.3992877604416  delta_E= 0  |g|= 2.06727e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3992877604416  |g|= 2.06727e-07  total 2 KF 4 JK
converged SCF energy = -75.3992877604416
-----------------------------------------------------
number of orbitals   6
number of electrons  (5, 4)
energy offset        4.365698347282665
irreps of orbitals   ['A1', 'A1', 'A1', 'E1y', 'E1x', 'A1']
-----------------------------------------------------
reconstruction of HF energy  -75.39928776025822 -75.39928776044155
-----------------------------------------------------
number of orbitals   5
number of electrons  (4, 3)
energy offset        -55.83096845390876
irreps of orbitals   ['A1', 'A1', 'E1y', 'E1x', 'A1']
-----------------------------------------------------
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:48 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        35.01

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpzbu8e0ja
max_memory 4000 MB (current use 114 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpzbu8e0ja
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 114 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.248425824413751  LUMO = 0.425890965403442
Initial guess E= -75.399287760441  |g|= 1.71285e-07
macro= 0  E= -75.3992877604411  delta_E= -2.84217e-14  |g|= 1.71285e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3992877604411  |g|= 1.71285e-07  total 2 KF 4 JK
converged SCF energy = -75.3992877604411
reconstruction of HF energy  -75.39928776025822 -75.39928776044107
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:48 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        35.03

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmp_btxgowu
max_memory 4000 MB (current use 114 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmp_btxgowu
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 114 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.248425824413751  LUMO = 0.425890965403442
Initial guess E= -75.399287760441  |g|= 1.71285e-07
macro= 0  E= -75.3992877604411  delta_E= -2.84217e-14  |g|= 1.71285e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3992877604411  |g|= 1.71285e-07  total 2 KF 4 JK
converged SCF energy = -75.3992877604411

WARN: RMP2 method does not support ROHF method. ROHF object is converted to UHF object and UMP2 method is called.


******** <class 'pyscf.mp.ump2.UMP2'> ********
nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_memory 4000 MB (current use 114 MB)
E(UMP2) = -75.4109874400253  E_corr = -0.0116996795842593

WARN: RCISD method does not support ROHF method. ROHF object is converted to UHF object and UCISD method is called.


******** <class 'pyscf.ci.ucisd.UCISD'> ********
CISD nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-09
max_cycle = 50
max_space = 12
lindep = 0
nroots = 1
max_memory 4000 MB (current use 114 MB)
Init t2, MP2 energy = -0.0116996795842593
UCISD converged
E(UCISD) = -75.41779500604567  E_corr = -0.01850724560459945

WARN: RCCSD method does not support ROHF method. ROHF object is converted to UHF object and UCCSD method is called.


******** <class 'pyscf.cc.uccsd.UCCSD'> ********
CC2 = 0
CCSD nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-07
conv_tol_normt = 1e-06
diis_space = 6
diis_start_cycle = 0
diis_start_energy_diff = 1e+09
max_memory 4000 MB (current use 114 MB)
Init t2, MP2 energy = -0.0116996795842593
Init E_corr(CCSD) = -0.0121266156636414
cycle = 1  E_corr(CCSD) = -0.0161158391111051  dE = -0.00398922345  norm(t1,t2) = 0.0251574
cycle = 2  E_corr(CCSD) = -0.0175457673651713  dE = -0.00142992825  norm(t1,t2) = 0.0103588
cycle = 3  E_corr(CCSD) = -0.0184863316350678  dE = -0.00094056427  norm(t1,t2) = 0.00476632
cycle = 4  E_corr(CCSD) = -0.0184860375951518  dE = 2.94039916e-07  norm(t1,t2) = 0.00135397
cycle = 5  E_corr(CCSD) = -0.0185082341406204  dE = -2.21965455e-05  norm(t1,t2) = 0.000442615
cycle = 6  E_corr(CCSD) = -0.0185061044410264  dE = 2.12969959e-06  norm(t1,t2) = 9.15655e-05
cycle = 7  E_corr(CCSD) = -0.0185070473824163  dE = -9.4294139e-07  norm(t1,t2) = 1.59327e-05
cycle = 8  E_corr(CCSD) = -0.0185067222912354  dE = 3.25091181e-07  norm(t1,t2) = 2.19266e-06
cycle = 9  E_corr(CCSD) = -0.0185067183733422  dE = 3.91789321e-09  norm(t1,t2) = 3.49836e-07
UCCSD converged
E(UCCSD) = -75.41779447881441  E_corr = -0.01850671837334217
UCCSD(T) correction = -2.32983818119477e-06

******** CASCI flags ********
CAS (4e+3e, 5o), ncore = 0, nvir = 0
natorb = False
canonicalization = True
sorting_mo_energy = False
max_memory 4000 (MB)
******** <class 'pyscf.fci.direct_spin1.FCISolver'> ********
max. cycles = 200
conv_tol = 1e-08
davidson only = False
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 400
spin = None
Density matrix diagonal elements [1.99394461 1.9843632  1.99952853 1.         0.02216366]
CASCI converged
CASCI E = -75.4177989123377  E(CI) = -19.586830458429  S^2 = 0.7500000
Hartree-Fock    -75.39928776044107
Moller-Plesset  -75.41098744002532
CISD            -75.41779500604567
CCSD            -75.41779447881441
CCSD(T)         -75.4177968086526
CASCI           -75.41779891233772
#####################################################
END: aug-cc-pvdz
#####################################################
#####################################################
START: aug-cc-pvtz
#####################################################
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:48 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 9
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry True subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.969700000000 AA    0.000000000000   0.000000000000   1.832467422991 Bohr

nuclear repulsion = 4.36569834728266
point group symmetry = Coov
num. orbitals of irrep A1 = 23
num. orbitals of irrep E1x = 14
num. orbitals of irrep E1y = 14
num. orbitals of irrep E2x = 7
num. orbitals of irrep E2y = 7
num. orbitals of irrep E3x = 2
num. orbitals of irrep E3y = 2
number of shells = 22
number of NR pGTOs = 83
number of NR cGTOs = 69
basis = aug-cc-pvtz
ecp = {}
CPU time:        35.26


******** <class 'pyscf.scf.hf_symm.SymAdaptedROHF'> ********
method = SymAdaptedROHF-ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmppq4_qp9i
max_memory 4000 MB (current use 114 MB)
num. doubly occ = 4  num. singly occ = 1
Freeze 0 electrons in irreps []
    9 free electrons in irreps A1 E1x E1y E2x E2y E3x E3y
Set gradient conv threshold to 3.16228e-05
init E= -75.0538101994473
HOMO (E1x) = -0.433224305236268  LUMO (A1) = 0.026918804039456
cycle= 1 E= -75.4040318834428  delta_E= -0.35  |g|= 0.211  |ddm|= 0.558
HOMO (E1x) = -0.254904419075758  LUMO (A1) = 0.0271031293786971
cycle= 2 E= -75.4155836687581  delta_E= -0.0116  |g|= 0.0403  |ddm|= 0.105
HOMO (E1x) = -0.249541428461261  LUMO (A1) = 0.0302314846806295
cycle= 3 E= -75.4160519530687  delta_E= -0.000468  |g|= 0.0103  |ddm|= 0.0287
HOMO (E1x) = -0.246336859218384  LUMO (A1) = 0.0303989758373105
cycle= 4 E= -75.4160982442622  delta_E= -4.63e-05  |g|= 0.00274  |ddm|= 0.014
HOMO (E1x) = -0.247716842773919  LUMO (A1) = 0.0304186657960223
cycle= 5 E= -75.4161021032447  delta_E= -3.86e-06  |g|= 0.000872  |ddm|= 0.00665
HOMO (E1x) = -0.247511067063876  LUMO (A1) = 0.0304212981595861
cycle= 6 E= -75.4161025444894  delta_E= -4.41e-07  |g|= 0.000217  |ddm|= 0.00152
HOMO (E1x) = -0.247499047862811  LUMO (A1) = 0.030419968211526
cycle= 7 E= -75.41610252903  delta_E= 1.55e-08  |g|= 0.000258  |ddm|= 0.00016
HOMO (E1x) = -0.247513422055819  LUMO (A1) = 0.0304192185378312
cycle= 8 E= -75.4161025215082  delta_E= 7.52e-09  |g|= 0.000277  |ddm|= 0.000269
HOMO (E1x) = -0.247363307587858  LUMO (A1) = 0.0304183192615503
cycle= 9 E= -75.4161021906033  delta_E= 3.31e-07  |g|= 0.000682  |ddm|= 0.00135
HOMO (E1x) = -0.247461173221614  LUMO (A1) = 0.0304086621114815
cycle= 10 E= -75.4161021465812  delta_E= 4.4e-08  |g|= 0.000703  |ddm|= 0.00184
HOMO (E1x) = -0.247415193942802  LUMO (A1) = 0.0304137301414195
cycle= 11 E= -75.4161019128111  delta_E= 2.34e-07  |g|= 0.00085  |ddm|= 0.00371
HOMO (E1x) = -0.24744309904235  LUMO (A1) = 0.0304116796584652
cycle= 12 E= -75.4161017727696  delta_E= 1.4e-07  |g|= 0.000892  |ddm|= 0.000592
HOMO (E1x) = -0.247404629274701  LUMO (A1) = 0.0304117285257335
cycle= 13 E= -75.416101636752  delta_E= 1.36e-07  |g|= 0.000968  |ddm|= 0.000673
HOMO (E1x) = -0.247393983042693  LUMO (A1) = 0.0304111361024833
cycle= 14 E= -75.4161017490488  delta_E= -1.12e-07  |g|= 0.000934  |ddm|= 0.000321
HOMO (E1x) = -0.247372444802379  LUMO (A1) = 0.0304153884867196
cycle= 15 E= -75.4161019109859  delta_E= -1.62e-07  |g|= 0.000892  |ddm|= 0.000653
HOMO (E1x) = -0.247412148957512  LUMO (A1) = 0.0304159613559715
cycle= 16 E= -75.4161019485986  delta_E= -3.76e-08  |g|= 0.000819  |ddm|= 0.000436
HOMO (E1x) = -0.247486035374917  LUMO (A1) = 0.0304134125949898
cycle= 17 E= -75.4161016152673  delta_E= 3.33e-07  |g|= 0.000967  |ddm|= 0.000995
HOMO (E1x) = -0.247329628815247  LUMO (A1) = 0.0304181570069322
cycle= 18 E= -75.4161019081957  delta_E= -2.93e-07  |g|= 0.000927  |ddm|= 0.0016
HOMO (E1x) = -0.2474236047296  LUMO (A1) = 0.0304109418573598
cycle= 19 E= -75.4161021369196  delta_E= -2.29e-07  |g|= 0.000763  |ddm|= 0.000689
HOMO (E1x) = -0.247351479400319  LUMO (A1) = 0.0304183682136219
cycle= 20 E= -75.4161019066434  delta_E= 2.3e-07  |g|= 0.000928  |ddm|= 0.000424
HOMO (E1x) = -0.247379524764291  LUMO (A1) = 0.0304167864028694
cycle= 21 E= -75.4161016311326  delta_E= 2.76e-07  |g|= 0.000998  |ddm|= 0.00169
HOMO (E1x) = -0.247408274634957  LUMO (A1) = 0.0304184377941235
cycle= 22 E= -75.4161017713299  delta_E= -1.4e-07  |g|= 0.000922  |ddm|= 0.000927
HOMO (E1x) = -0.247398599248788  LUMO (A1) = 0.0304213087071417
cycle= 23 E= -75.4161011957585  delta_E= 5.76e-07  |g|= 0.00113  |ddm|= 0.000959
HOMO (E1x) = -0.247362679461685  LUMO (A1) = 0.030422271419566
cycle= 24 E= -75.4161012548558  delta_E= -5.91e-08  |g|= 0.00113  |ddm|= 0.000114
HOMO (E1x) = -0.247379929481567  LUMO (A1) = 0.0304277770092123
cycle= 25 E= -75.4161015565403  delta_E= -3.02e-07  |g|= 0.000943  |ddm|= 0.000539
HOMO (E1x) = -0.247412911706608  LUMO (A1) = 0.030420427697828
cycle= 26 E= -75.4161011017138  delta_E= 4.55e-07  |g|= 0.00117  |ddm|= 0.000594
HOMO (E1x) = -0.247383937328679  LUMO (A1) = 0.0304198279918216
cycle= 27 E= -75.4161012037094  delta_E= -1.02e-07  |g|= 0.00114  |ddm|= 0.000143
HOMO (E1x) = -0.247419619372274  LUMO (A1) = 0.0304194102692795
cycle= 28 E= -75.4161012427614  delta_E= -3.91e-08  |g|= 0.00113  |ddm|= 0.000209
HOMO (E1x) = -0.247379071091338  LUMO (A1) = 0.0304220884404665
cycle= 29 E= -75.4161018687551  delta_E= -6.26e-07  |g|= 0.000935  |ddm|= 0.00222
HOMO (E1x) = -0.247384199165874  LUMO (A1) = 0.0304222253300953
cycle= 30 E= -75.4161018112681  delta_E= 5.75e-08  |g|= 0.000953  |ddm|= 0.000293
HOMO (E1x) = -0.247471312002266  LUMO (A1) = 0.0304215241903664
cycle= 31 E= -75.4161020098064  delta_E= -1.99e-07  |g|= 0.000823  |ddm|= 0.000543
HOMO (E1x) = -0.24738143476691  LUMO (A1) = 0.0304262469905596
cycle= 32 E= -75.4161015258614  delta_E= 4.84e-07  |g|= 0.00105  |ddm|= 0.00104
HOMO (E1x) = -0.24736766024106  LUMO (A1) = 0.0304257242113148
cycle= 33 E= -75.4161015414847  delta_E= -1.56e-08  |g|= 0.00105  |ddm|= 0.000216
HOMO (E1x) = -0.24740178685059  LUMO (A1) = 0.0304310831364124
cycle= 34 E= -75.4161019355726  delta_E= -3.94e-07  |g|= 0.000797  |ddm|= 0.00166
HOMO (E1x) = -0.247412798703445  LUMO (A1) = 0.0304254784979964
cycle= 35 E= -75.4161016147062  delta_E= 3.21e-07  |g|= 0.000996  |ddm|= 0.000627
HOMO (E1x) = -0.247424041970038  LUMO (A1) = 0.0304202832098503
cycle= 36 E= -75.4161013521028  delta_E= 2.63e-07  |g|= 0.00105  |ddm|= 0.00134
HOMO (E1x) = -0.24743370042802  LUMO (A1) = 0.0304216121443961
cycle= 37 E= -75.4161013105136  delta_E= 4.16e-08  |g|= 0.0011  |ddm|= 0.000137
HOMO (E1x) = -0.247426103026791  LUMO (A1) = 0.0304157466789994
cycle= 38 E= -75.4161022079  delta_E= -8.97e-07  |g|= 0.000746  |ddm|= 0.00332
HOMO (E1x) = -0.247427145365184  LUMO (A1) = 0.0304153575008569
cycle= 39 E= -75.4161022114962  delta_E= -3.6e-09  |g|= 0.000745  |ddm|= 8.4e-05
HOMO (E1x) = -0.247609558954618  LUMO (A1) = 0.0304182345122346
cycle= 40 E= -75.4161021891697  delta_E= 2.23e-08  |g|= 0.000703  |ddm|= 0.00105
HOMO (E1x) = -0.247466769996302  LUMO (A1) = 0.0304248077860199
cycle= 41 E= -75.4161021132661  delta_E= 7.59e-08  |g|= 0.000724  |ddm|= 0.000272
HOMO (E1x) = -0.247514715314375  LUMO (A1) = 0.0304131720705601
cycle= 42 E= -75.4161021642361  delta_E= -5.1e-08  |g|= 0.000735  |ddm|= 0.000632
HOMO (E1x) = -0.2475015107598  LUMO (A1) = 0.0304169756116338
cycle= 43 E= -75.4161022788645  delta_E= -1.15e-07  |g|= 0.000611  |ddm|= 0.00127
HOMO (E1x) = -0.247487858911741  LUMO (A1) = 0.0304150792679858
cycle= 44 E= -75.41610213316  delta_E= 1.46e-07  |g|= 0.000755  |ddm|= 0.000306
HOMO (E1x) = -0.247510438669322  LUMO (A1) = 0.0304117946158662
cycle= 45 E= -75.4161020640759  delta_E= 6.91e-08  |g|= 0.00076  |ddm|= 0.000703
HOMO (E1x) = -0.247485166762647  LUMO (A1) = 0.0304167226590162
cycle= 46 E= -75.4161019449139  delta_E= 1.19e-07  |g|= 0.000861  |ddm|= 0.000523
HOMO (E1x) = -0.247509317823114  LUMO (A1) = 0.0304101981675602
cycle= 47 E= -75.4161020907485  delta_E= -1.46e-07  |g|= 0.000776  |ddm|= 0.000278
HOMO (E1x) = -0.247513706407895  LUMO (A1) = 0.0304113678769529
cycle= 48 E= -75.4161021014159  delta_E= -1.07e-08  |g|= 0.000763  |ddm|= 0.000121
HOMO (E1x) = -0.247535933810737  LUMO (A1) = 0.0304092290651585
cycle= 49 E= -75.4161019013856  delta_E= 2e-07  |g|= 0.00086  |ddm|= 0.000471
HOMO (E1x) = -0.24747027291995  LUMO (A1) = 0.0304154580266048
cycle= 50 E= -75.4161020515705  delta_E= -1.5e-07  |g|= 0.000783  |ddm|= 0.000315
SCF not converged.
SCF energy = -75.4161020515705
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:50 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        47.56

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpx5vdvkvs
max_memory 4000 MB (current use 143 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpx5vdvkvs
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 143 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.247573610480659  LUMO = 0.426063559488083
Initial guess E= -75.416102054436  |g|= 2.17816e-05
macro= 0  E= -75.4161020546681  delta_E= -2.32049e-10  |g|= 2.17816e-05  1 KF 3 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.4161020546681  |g|= 2.17816e-05  total 2 KF 5 JK
converged SCF energy = -75.4161020546681
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:50 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        48.34

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpnw0dahli
max_memory 4000 MB (current use 143 MB)
num. doubly occ = 4  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmpnw0dahli
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 143 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.247578204077877  LUMO = 0.426066748706321
Initial guess E= -75.4161020546681  |g|= 5.40049e-08
macro= 0  E= -75.4161020546681  delta_E= 0  |g|= 5.40049e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.4161020546681  |g|= 5.40049e-08  total 2 KF 4 JK
converged SCF energy = -75.4161020546681
-----------------------------------------------------
number of orbitals   6
number of electrons  (5, 4)
energy offset        4.365698347282665
irreps of orbitals   ['A1', 'A1', 'A1', 'E1y', 'E1x', 'A1']
-----------------------------------------------------
reconstruction of HF energy  -75.41610205157052 -75.41610205466813
-----------------------------------------------------
number of orbitals   5
number of electrons  (4, 3)
energy offset        -55.8313930593119
irreps of orbitals   ['A1', 'A1', 'E1y', 'E1x', 'A1']
-----------------------------------------------------
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:50 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        48.37

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmp0xvvpgtu
max_memory 4000 MB (current use 143 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmp0xvvpgtu
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 143 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.247578204077877  LUMO = 0.426066748706316
Initial guess E= -75.4161020546682  |g|= 5.08054e-08
macro= 0  E= -75.4161020546682  delta_E= 0  |g|= 5.08054e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.4161020546682  |g|= 5.08054e-08  total 2 KF 4 JK
converged SCF energy = -75.4161020546682
reconstruction of HF energy  -75.41610205157052 -75.41610205466816
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/iao_radical.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_radical'] = []
res['E_MP_radical'] = []
res['E_CISD_radical'] = []
res['E_CCSD_radical'] = []
res['E_CCSD(T)_radical'] = []
res['E_CASCI_radical'] = []
res['E_CASSCF_radical'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.9697)]],charge=0,spin=1,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    #mol_info = get_integrals(mol,mf,C=iao,n=mf.mo_occ)
    #print_dictionary(mol_info)
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
            res[k+'_radical'].append(BO._res[k])
            
    print("#"*53)
    print("END:", i)
    print("#"*53)
            
try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:42:50 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        48.40

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.rohf.ROHF'> ********
method = ROHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmprph0w3eo
max_memory 4000 MB (current use 143 MB)
num. doubly occ = 3  num. singly occ = 1
******** <class 'pyscf.scf.rohf.ROHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_radical/tmprph0w3eo
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 143 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.247578204077877  LUMO = 0.426066748706316
Initial guess E= -75.4161020546682  |g|= 5.08054e-08
macro= 0  E= -75.4161020546682  delta_E= 0  |g|= 5.08054e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.4161020546682  |g|= 5.08054e-08  total 2 KF 4 JK
converged SCF energy = -75.4161020546682

WARN: RMP2 method does not support ROHF method. ROHF object is converted to UHF object and UMP2 method is called.


******** <class 'pyscf.mp.ump2.UMP2'> ********
nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_memory 4000 MB (current use 143 MB)
E(UMP2) = -75.4277831587766  E_corr = -0.0116811041084649

WARN: RCISD method does not support ROHF method. ROHF object is converted to UHF object and UCISD method is called.


******** <class 'pyscf.ci.ucisd.UCISD'> ********
CISD nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-09
max_cycle = 50
max_space = 12
lindep = 0
nroots = 1
max_memory 4000 MB (current use 143 MB)
Init t2, MP2 energy = -0.0116811041084649
UCISD converged
E(UCISD) = -75.43460367834628  E_corr = -0.01850162367811597

WARN: RCCSD method does not support ROHF method. ROHF object is converted to UHF object and UCCSD method is called.


******** <class 'pyscf.cc.uccsd.UCCSD'> ********
CC2 = 0
CCSD nocc = (4, 3), nmo = (5, 5)
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-07
conv_tol_normt = 1e-06
diis_space = 6
diis_start_cycle = 0
diis_start_energy_diff = 1e+09
max_memory 4000 MB (current use 143 MB)
Init t2, MP2 energy = -0.0116811041084649
Init E_corr(CCSD) = -0.0121145744074349
cycle = 1  E_corr(CCSD) = -0.0161037285656472  dE = -0.00398915416  norm(t1,t2) = 0.0251887
cycle = 2  E_corr(CCSD) = -0.0175354804697498  dE = -0.0014317519  norm(t1,t2) = 0.0103914
cycle = 3  E_corr(CCSD) = -0.0184800568612771  dE = -0.000944576392  norm(t1,t2) = 0.00479148
cycle = 4  E_corr(CCSD) = -0.0184800430146157  dE = 1.38466614e-08  norm(t1,t2) = 0.00136444
cycle = 5  E_corr(CCSD) = -0.0185026200752121  dE = -2.25770606e-05  norm(t1,t2) = 0.000448062
cycle = 6  E_corr(CCSD) = -0.0185004613395027  dE = 2.15873571e-06  norm(t1,t2) = 9.29127e-05
cycle = 7  E_corr(CCSD) = -0.01850142058952  dE = -9.59250017e-07  norm(t1,t2) = 1.61482e-05
cycle = 8  E_corr(CCSD) = -0.0185010894862925  dE = 3.31103227e-07  norm(t1,t2) = 2.22824e-06
cycle = 9  E_corr(CCSD) = -0.0185010855483016  dE = 3.93799094e-09  norm(t1,t2) = 3.56112e-07
UCCSD converged
E(UCCSD) = -75.43460314021647  E_corr = -0.01850108554830156
UCCSD(T) correction = -2.36850060078462e-06

******** CASCI flags ********
CAS (4e+3e, 5o), ncore = 0, nvir = 0
natorb = False
canonicalization = True
sorting_mo_energy = False
max_memory 4000 (MB)
******** <class 'pyscf.fci.direct_spin1.FCISolver'> ********
max. cycles = 200
conv_tol = 1e-08
davidson only = False
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 400
spin = None
Density matrix diagonal elements [1.99391313 1.98438571 1.99952439 1.         0.02217677]
CASCI converged
CASCI E = -75.4346076545364  E(CI) = -19.6032145952246  S^2 = 0.7500000
Hartree-Fock    -75.41610205466816
Moller-Plesset  -75.42778315877662
CISD            -75.43460367834628
CCSD            -75.43460314021647
CCSD(T)         -75.43460550871707
CASCI           -75.43460765453645
#####################################################
END: aug-cc-pvtz
#####################################################
