/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf/lib/misc.py:46: H5pyDeprecationWarning: Using default_file_mode other than 'r' is deprecated. Pass the mode to h5py.File() instead.
  h5py.get_config().default_file_mode = 'a'
#####################################################
START: sto-6g
#####################################################
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:31 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 10
[INPUT] charge = -1
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry True subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.964000000000 AA    0.000000000000   0.000000000000   1.821695984081 Bohr

nuclear repulsion = 4.39151212381743
point group symmetry = Coov
num. orbitals of irrep A1 = 4
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 4
number of NR pGTOs = 36
number of NR cGTOs = 6
basis = sto-6g
ecp = {}
CPU time:         0.80


******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpok3n0hd0
max_memory 4000 MB (current use 67 MB)
Freeze 0 electrons in irreps []
    10 free electrons in irreps A1 E1x E1y
Set gradient conv threshold to 3.16228e-05
init E= -74.7125429053795
HOMO (E1y) = -0.343519774593137  LUMO (A1) = 0.486589449657007
cycle= 1 E= -74.6525976932403  delta_E= 0.0599  |g|= 0.525  |ddm|= 1.49
HOMO (E1y) = 0.405907811506412  LUMO (A1) = 1.24311134792945
cycle= 2 E= -74.7765855566749  delta_E= -0.124  |g|= 0.0543  |ddm|= 0.862
HOMO (E1y) = 0.245094684620433  LUMO (A1) = 1.24197373904294
cycle= 3 E= -74.7779775583363  delta_E= -0.00139  |g|= 0.00481  |ddm|= 0.113
HOMO (E1x) = 0.244506804426582  LUMO (A1) = 1.23950533337028
cycle= 4 E= -74.7779868949144  delta_E= -9.34e-06  |g|= 0.000414  |ddm|= 0.0101
HOMO (E1y) = 0.244107718941279  LUMO (A1) = 1.24007187533205
cycle= 5 E= -74.7779869615676  delta_E= -6.67e-08  |g|= 3.02e-06  |ddm|= 0.000856
HOMO (E1x) = 0.244112216518229  LUMO (A1) = 1.24005958395772
cycle= 6 E= -74.7779869615721  delta_E= -4.49e-12  |g|= 1.56e-09  |ddm|= 7.74e-06
HOMO (E1x) = 0.244112216110238  LUMO (A1) = 1.24005957289221
Extra cycle  E= -74.7779869615721  delta_E=    0  |g|= 1.51e-10  |ddm|= 1.42e-09
converged SCF energy = -74.7779869615721
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:32 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         2.27

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Overwritten attributes  get_ovlp get_hcore  of <class 'pyscf.soscf.newton_ah.newton.<locals>.SecondOrderRHF'>
Overwritten attributes  get_ovlp get_hcore  of <class 'pyscf.scf.hf.RHF'>




******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpkx7uvg9d
max_memory 4000 MB (current use 84 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpkx7uvg9d
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 84 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = 0.244112215838384  LUMO = 1.24005957282382
Initial guess E= -74.7779869615721  |g|= 2.27154e-11
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf/gto/mole.py:1089: UserWarning: Function mol.dumps drops attribute nao_nr because it is not JSON-serializable
  warnings.warn(msg)
/home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf/gto/mole.py:1089: UserWarning: Function mol.dumps drops attribute energy_nuc because it is not JSON-serializable
  warnings.warn(msg)
macro= 0  E= -74.777986961572  delta_E= 2.84217e-14  |g|= 2.27153e-11  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-74.777986961572  |g|= 2.27153e-11  total 2 KF 4 JK
converged SCF energy = -74.777986961572
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:32 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         2.32

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmp8kvo_9ux
max_memory 4000 MB (current use 86 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmp8kvo_9ux
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 86 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.205857611469319  LUMO = 0.769292204007681
Initial guess E= -74.7535608697318  |g|= 0.244242
macro= 0  E= -74.7779826106063  delta_E= -0.0244217  |g|= 0.244242  1 KF 4 JK
macro= 1  E= -74.7779869615705  delta_E= -4.35096e-06  |g|= 0.00293237  1 KF 4 JK
macro= 2  E= -74.7779869615707  delta_E= -1.7053e-13  |g|= 1.87734e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-74.7779869615707  |g|= 1.87734e-06  total 4 KF 14 JK
converged SCF energy = -74.7779869615707
-----------------------------------------------------
number of orbitals   6
number of electrons  (5, 5)
energy offset        4.391512123817428
irreps of orbitals   ['A1', 'A1', 'A1', 'E1y', 'E1x', 'A1']
-----------------------------------------------------
reconstruction of HF energy  -74.77798696157208 -74.77798696157066
-----------------------------------------------------
number of orbitals   5
number of electrons  (4, 4)
energy offset        -55.77922907541118
irreps of orbitals   ['A1', 'A1', 'E1y', 'E1x', 'A1']
-----------------------------------------------------
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:32 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         2.35

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpyfv5q1t_
max_memory 4000 MB (current use 86 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpyfv5q1t_
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 86 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.205857611469321  LUMO = 0.769289695911655
Initial guess E= -74.7535675553617  |g|= 0.243663
macro= 0  E= -74.7779826240868  delta_E= -0.0244151  |g|= 0.243663  1 KF 4 JK
macro= 1  E= -74.7779869615705  delta_E= -4.33748e-06  |g|= 0.00292174  1 KF 3 JK
macro= 2  E= -74.7779869615714  delta_E= -8.3844e-13  |g|= 1.85628e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-74.7779869615714  |g|= 1.85628e-06  total 4 KF 13 JK
converged SCF energy = -74.7779869615714
reconstruction of HF energy  -74.77798696157208 -74.77798696157136
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:32 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         2.37

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmp7tiyy9sh
max_memory 4000 MB (current use 86 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmp7tiyy9sh
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 86 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.205857611469321  LUMO = 0.769289695911655
Initial guess E= -74.7535675553617  |g|= 0.243663
macro= 0  E= -74.7779826240868  delta_E= -0.0244151  |g|= 0.243663  1 KF 4 JK
macro= 1  E= -74.7779869615705  delta_E= -4.33748e-06  |g|= 0.00292174  1 KF 3 JK
macro= 2  E= -74.7779869615714  delta_E= -8.3844e-13  |g|= 1.85628e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-74.7779869615714  |g|= 1.85628e-06  total 4 KF 13 JK
converged SCF energy = -74.7779869615714

******** <class 'pyscf.mp.mp2.MP2'> ********
nocc = 4, nmo = 5
frozen orbitals 0
max_memory 4000 MB (current use 86 MB)
E(MP2) = -74.7945016917096  E_corr = -0.0165147301382258

******** <class 'pyscf.ci.cisd.RCISD'> ********
CISD nocc = 4, nmo = 5
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-09
max_cycle = 50
max_space = 12
lindep = 0
nroots = 1
max_memory 4000 MB (current use 86 MB)
Init t2, MP2 energy = -0.0165147301382258
RCISD converged
E(RCISD) = -74.80225115278957  E_corr = -0.02426419121820976

******** <class 'pyscf.cc.ccsd.CCSD'> ********
CC2 = 0
CCSD nocc = 4, nmo = 5
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-07
conv_tol_normt = 1e-05
diis_space = 6
diis_start_cycle = 0
diis_start_energy_diff = 1e+09
max_memory 4000 MB (current use 86 MB)
Init t2, MP2 energy = -74.7945016917096  E_corr(MP2) -0.0165147301382258
Init E_corr(CCSD) = -0.0165147301387582
cycle = 1  E_corr(CCSD) = -0.0216401550242439  dE = -0.00512542489  norm(t1,t2) = 0.0256746
cycle = 2  E_corr(CCSD) = -0.0233238961506974  dE = -0.00168374113  norm(t1,t2) = 0.00922656
cycle = 3  E_corr(CCSD) = -0.024269124266938  dE = -0.000945228116  norm(t1,t2) = 0.00356304
cycle = 4  E_corr(CCSD) = -0.0242653035365711  dE = 3.82073037e-06  norm(t1,t2) = 0.000251424
cycle = 5  E_corr(CCSD) = -0.0242643192093411  dE = 9.8432723e-07  norm(t1,t2) = 3.03002e-05
cycle = 6  E_corr(CCSD) = -0.024264070857571  dE = 2.4835177e-07  norm(t1,t2) = 4.06317e-06
cycle = 7  E_corr(CCSD) = -0.0242642624514661  dE = -1.91593895e-07  norm(t1,t2) = 1.03631e-06
cycle = 8  E_corr(CCSD) = -0.0242641909738045  dE = 7.14776616e-08  norm(t1,t2) = 2.68184e-07
CCSD converged
E(CCSD) = -74.80225115254517  E_corr = -0.02426419097380445
CCSD(T) correction = 2.34635116001532e-19
<class 'pyscf.mcscf.casci.CASCI'> does not have attributes  frozen

******** CASCI flags ********
CAS (4e+4e, 5o), ncore = 0, nvir = 0
natorb = False
canonicalization = True
sorting_mo_energy = False
max_memory 4000 (MB)
******** <class 'pyscf.fci.direct_spin1.FCISolver'> ********
max. cycles = 200
conv_tol = 1e-08
davidson only = False
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 400
spin = None
Density matrix diagonal elements [1.99645997 1.97784924 1.99837002 1.99837002 0.02895075]
CASCI converged
CASCI E = -74.8022511527916  E(CI) = -19.0230220773804  S^2 = 0.0000000
Hartree-Fock    -74.77798696157136
Moller-Plesset  -74.79450169170958
CISD            -74.80225115278957
CCSD            -74.80225115254517
CCSD(T)         -74.80225115254517
CASCI           -74.8022511527916
#####################################################
END: sto-6g
#####################################################
#####################################################
START: 6-31g
#####################################################
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:32 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 10
[INPUT] charge = -1
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry True subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.964000000000 AA    0.000000000000   0.000000000000   1.821695984081 Bohr

nuclear repulsion = 4.39151212381743
point group symmetry = Coov
num. orbitals of irrep A1 = 7
num. orbitals of irrep E1x = 2
num. orbitals of irrep E1y = 2
number of shells = 7
number of NR pGTOs = 26
number of NR cGTOs = 11
basis = 6-31g
ecp = {}
CPU time:         2.50


******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmprbtbub8k
max_memory 4000 MB (current use 86 MB)
Freeze 0 electrons in irreps []
    10 free electrons in irreps A1 E1x E1y
Set gradient conv threshold to 3.16228e-05
init E= -75.0186667995278
HOMO (E1x) = -0.431211088691039  LUMO (A1) = 0.174109915805088
cycle= 1 E= -75.1871729169201  delta_E= -0.169  |g|= 0.787  |ddm|= 1.02
HOMO (E1y) = 0.142681685549651  LUMO (A1) = 0.572907766482941
cycle= 2 E= -75.2679427965918  delta_E= -0.0808  |g|= 0.493  |ddm|= 0.971
HOMO (E1y) = -0.0359482043557904  LUMO (A1) = 0.548416862302635
cycle= 3 E= -75.3111318756373  delta_E= -0.0432  |g|= 0.0244  |ddm|= 0.349
HOMO (E1x) = -0.0375151748629378  LUMO (A1) = 0.561024204152171
cycle= 4 E= -75.3115031434284  delta_E= -0.000371  |g|= 0.00592  |ddm|= 0.051
HOMO (E1y) = -0.0386773546475091  LUMO (A1) = 0.56091241512465
cycle= 5 E= -75.3115284798724  delta_E= -2.53e-05  |g|= 0.000514  |ddm|= 0.016
HOMO (E1x) = -0.0389280876740883  LUMO (A1) = 0.561020272339766
cycle= 6 E= -75.3115286390327  delta_E= -1.59e-07  |g|= 7e-05  |ddm|= 0.00135
HOMO (E1x) = -0.0389403611644207  LUMO (A1) = 0.561005867384435
cycle= 7 E= -75.311528640772  delta_E= -1.74e-09  |g|= 5.84e-06  |ddm|= 0.000122
HOMO (E1y) = -0.0389421785398257  LUMO (A1) = 0.561007978241405
cycle= 8 E= -75.3115286407806  delta_E= -8.58e-12  |g|= 5.42e-07  |ddm|= 7.78e-06
HOMO (E1x) = -0.0389422063284613  LUMO (A1) = 0.561007952141831
Extra cycle  E= -75.3115286407806  delta_E= -2.84e-14  |g|= 1.16e-07  |ddm|= 6.62e-07
converged SCF energy = -75.3115286407806
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:32 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         2.64

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpi3ox8vnb
max_memory 4000 MB (current use 87 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpi3ox8vnb
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 87 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.0389422057950799  LUMO = 0.865452982410958
Initial guess E= -75.3115286407806  |g|= 4.70554e-09
macro= 0  E= -75.3115286407806  delta_E= -2.84217e-14  |g|= 4.70554e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3115286407806  |g|= 4.70554e-09  total 2 KF 4 JK
converged SCF energy = -75.3115286407806
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:32 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         2.68

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpytrsvf7w
max_memory 4000 MB (current use 87 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpytrsvf7w
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 87 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.040483801246034  LUMO = 0.863790224043359
Initial guess E= -75.3115283059755  |g|= 0.000872709
macro= 0  E= -75.3115286407806  delta_E= -3.34805e-07  |g|= 0.000872709  1 KF 4 JK
macro= 1  E= -75.3115286407806  delta_E= 2.84217e-14  |g|= 1.07949e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3115286407806  |g|= 1.07949e-08  total 3 KF 9 JK
converged SCF energy = -75.3115286407806
-----------------------------------------------------
number of orbitals   6
number of electrons  (5, 5)
energy offset        4.391512123817428
irreps of orbitals   ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
-----------------------------------------------------
reconstruction of HF energy  -75.31152864078064 -75.31152864078058
-----------------------------------------------------
number of orbitals   5
number of electrons  (4, 4)
energy offset        -55.807594090882354
irreps of orbitals   ['A1', 'A1', 'E1x', 'E1y', 'A1']
-----------------------------------------------------
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:32 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         2.71

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpdfxgb3ha
max_memory 4000 MB (current use 87 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpdfxgb3ha
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 87 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.040483801246034  LUMO = 0.863790224007163
Initial guess E= -75.31152830606  |g|= 0.000870757
macro= 0  E= -75.3115286407806  delta_E= -3.34721e-07  |g|= 0.000870757  1 KF 3 JK
macro= 1  E= -75.3115286407806  delta_E= 0  |g|= 1.07328e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3115286407806  |g|= 1.07328e-08  total 3 KF 8 JK
converged SCF energy = -75.3115286407806
reconstruction of HF energy  -75.31152864078064 -75.31152864078064
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:32 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         2.74

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpwdeonxkx
max_memory 4000 MB (current use 87 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpwdeonxkx
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 87 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.040483801246034  LUMO = 0.863790224007163
Initial guess E= -75.31152830606  |g|= 0.000870757
macro= 0  E= -75.3115286407806  delta_E= -3.34721e-07  |g|= 0.000870757  1 KF 3 JK
macro= 1  E= -75.3115286407806  delta_E= 0  |g|= 1.07328e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3115286407806  |g|= 1.07328e-08  total 3 KF 8 JK
converged SCF energy = -75.3115286407806

******** <class 'pyscf.mp.mp2.MP2'> ********
nocc = 4, nmo = 5
frozen orbitals 0
max_memory 4000 MB (current use 87 MB)
E(MP2) = -75.3261829615684  E_corr = -0.0146543207878002

******** <class 'pyscf.ci.cisd.RCISD'> ********
CISD nocc = 4, nmo = 5
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-09
max_cycle = 50
max_space = 12
lindep = 0
nroots = 1
max_memory 4000 MB (current use 87 MB)
Init t2, MP2 energy = -0.0146543207878002
RCISD converged
E(RCISD) = -75.33362469373681  E_corr = -0.02209605295616513

******** <class 'pyscf.cc.ccsd.CCSD'> ********
CC2 = 0
CCSD nocc = 4, nmo = 5
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-07
conv_tol_normt = 1e-05
diis_space = 6
diis_start_cycle = 0
diis_start_energy_diff = 1e+09
max_memory 4000 MB (current use 87 MB)
Init t2, MP2 energy = -75.3261829615684  E_corr(MP2) -0.0146543207878002
Init E_corr(CCSD) = -0.0146543207878002
cycle = 1  E_corr(CCSD) = -0.0194762504138621  dE = -0.00482192963  norm(t1,t2) = 0.0256354
cycle = 2  E_corr(CCSD) = -0.0211408079619435  dE = -0.00166455755  norm(t1,t2) = 0.00948015
cycle = 3  E_corr(CCSD) = -0.0221080316372498  dE = -0.000967223675  norm(t1,t2) = 0.00367939
cycle = 4  E_corr(CCSD) = -0.0220975015608207  dE = 1.05300764e-05  norm(t1,t2) = 0.000235474
cycle = 5  E_corr(CCSD) = -0.0220962746747734  dE = 1.22688605e-06  norm(t1,t2) = 2.69341e-05
cycle = 6  E_corr(CCSD) = -0.0220959755259573  dE = 2.99148816e-07  norm(t1,t2) = 3.69754e-06
cycle = 7  E_corr(CCSD) = -0.022096103934023  dE = -1.28408066e-07  norm(t1,t2) = 6.38154e-07
cycle = 8  E_corr(CCSD) = -0.0220960521173807  dE = 5.18166423e-08  norm(t1,t2) = 2.05614e-07
CCSD converged
E(CCSD) = -75.33362469289801  E_corr = -0.02209605211738069
CCSD(T) correction = 7.61874782626566e-20

******** CASCI flags ********
CAS (4e+4e, 5o), ncore = 0, nvir = 0
natorb = False
canonicalization = True
sorting_mo_energy = False
max_memory 4000 (MB)
******** <class 'pyscf.fci.direct_spin1.FCISolver'> ********
max. cycles = 200
conv_tol = 1e-08
davidson only = False
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 400
spin = None
Density matrix diagonal elements [1.99472394 1.97756701 1.99931741 1.99931741 0.02907425]
CASCI converged
CASCI E = -75.3336246937373  E(CI) = -19.5260306028549  S^2 = 0.0000000
Hartree-Fock    -75.31152864078064
Moller-Plesset  -75.32618296156843
CISD            -75.33362469373681
CCSD            -75.33362469289801
CCSD(T)         -75.33362469289801
CASCI           -75.33362469373728
#####################################################
END: 6-31g
#####################################################
#####################################################
START: 6-31++g
#####################################################
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:32 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 10
[INPUT] charge = -1
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry True subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.964000000000 AA    0.000000000000   0.000000000000   1.821695984081 Bohr

nuclear repulsion = 4.39151212381743
point group symmetry = Coov
num. orbitals of irrep A1 = 10
num. orbitals of irrep E1x = 3
num. orbitals of irrep E1y = 3
number of shells = 10
number of NR pGTOs = 31
number of NR cGTOs = 16
basis = 6-31++g
ecp = {}
CPU time:         2.86


******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmp7yjy5_7q
max_memory 4000 MB (current use 87 MB)
Freeze 0 electrons in irreps []
    10 free electrons in irreps A1 E1x E1y
Set gradient conv threshold to 3.16228e-05
init E= -75.028652402298
HOMO (E1y) = -0.428957984056289  LUMO (A1) = 0.0399292141616556
cycle= 1 E= -75.2349542725499  delta_E= -0.206  |g|= 0.738  |ddm|= 0.981
HOMO (E1x) = 0.0904032815093622  LUMO (A1) = 0.220618230740982
cycle= 2 E= -75.2681275885647  delta_E= -0.0332  |g|= 0.694  |ddm|= 1.15
HOMO (E1x) = -0.0986254148697313  LUMO (A1) = 0.219080715725299
cycle= 3 E= -75.3629648821216  delta_E= -0.0948  |g|= 0.0162  |ddm|= 0.458
HOMO (E1y) = -0.106263286507881  LUMO (A1) = 0.220977384006453
cycle= 4 E= -75.3630917954477  delta_E= -0.000127  |g|= 0.00353  |ddm|= 0.0485
HOMO (E1y) = -0.107035989740696  LUMO (A1) = 0.221057694575123
cycle= 5 E= -75.3630991941665  delta_E= -7.4e-06  |g|= 0.000916  |ddm|= 0.0109
HOMO (E1x) = -0.106996935675166  LUMO (A1) = 0.221092174774963
cycle= 6 E= -75.3630997762859  delta_E= -5.82e-07  |g|= 0.000269  |ddm|= 0.00181
HOMO (E1y) = -0.106929479557552  LUMO (A1) = 0.221102871112634
cycle= 7 E= -75.3630998254672  delta_E= -4.92e-08  |g|= 2.04e-05  |ddm|= 0.000678
HOMO (E1x) = -0.106935958468841  LUMO (A1) = 0.221104441659192
cycle= 8 E= -75.3630998259536  delta_E= -4.86e-10  |g|= 4.8e-06  |ddm|= 6.02e-05
HOMO (E1y) = -0.106936545265694  LUMO (A1) = 0.221104586194615
Extra cycle  E= -75.3630998259712  delta_E= -1.76e-11  |g|= 1.8e-06  |ddm|= 9.46e-06
converged SCF energy = -75.3630998259712
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:32 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         3.01

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmp668h2zu2
max_memory 4000 MB (current use 87 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmp668h2zu2
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 87 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.10693659616936  LUMO = 0.793910678323371
Initial guess E= -75.3630998259715  |g|= 1.59285e-07
macro= 0  E= -75.3630998259715  delta_E= 0  |g|= 1.59285e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3630998259715  |g|= 1.59285e-07  total 2 KF 4 JK
converged SCF energy = -75.3630998259715
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:32 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         3.05

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmp7db5yhcz
max_memory 4000 MB (current use 87 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmp7db5yhcz
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 87 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.357887541500868  LUMO = 0.523325898666615
Initial guess E= -75.3548044316217  |g|= 0.137935
macro= 0  E= -75.3630982706306  delta_E= -0.00829384  |g|= 0.137935  1 KF 4 JK
macro= 1  E= -75.3630998259713  delta_E= -1.55534e-06  |g|= 0.0017584  1 KF 4 JK
macro= 2  E= -75.3630998259713  delta_E= 0  |g|= 2.78099e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-75.3630998259713  |g|= 2.78099e-07  total 4 KF 14 JK
converged SCF energy = -75.3630998259713
-----------------------------------------------------
number of orbitals   6
number of electrons  (5, 5)
energy offset        4.391512123817428
irreps of orbitals   ['A1', 'A1', 'A1', 'E1y', 'E1x', 'A1']
-----------------------------------------------------
reconstruction of HF energy  -75.36309982597123 -75.36309982597129
-----------------------------------------------------
number of orbitals   5
number of electrons  (4, 4)
energy offset        -55.80759475425
irreps of orbitals   ['A1', 'A1', 'E1y', 'E1x', 'A1']
-----------------------------------------------------
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:32 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         3.08

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpwy9pcgn1
max_memory 4000 MB (current use 87 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpwy9pcgn1
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 87 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.357887541500868  LUMO = 0.523324948268847
Initial guess E= -75.3548064134977  |g|= 0.137625
macro= 0  E= -75.3630982820462  delta_E= -0.00829187  |g|= 0.137625  1 KF 3 JK
macro= 1  E= -75.3630998259713  delta_E= -1.54393e-06  |g|= 0.00175412  1 KF 3 JK
macro= 2  E= -75.3630998259713  delta_E= 0  |g|= 2.71904e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-75.3630998259713  |g|= 2.71904e-07  total 4 KF 12 JK
converged SCF energy = -75.3630998259713
reconstruction of HF energy  -75.36309982597123 -75.36309982597126
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:32 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         3.11

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmp9p4k4mvk
max_memory 4000 MB (current use 87 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmp9p4k4mvk
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 87 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.357887541500868  LUMO = 0.523324948268847
Initial guess E= -75.3548064134977  |g|= 0.137625
macro= 0  E= -75.3630982820462  delta_E= -0.00829187  |g|= 0.137625  1 KF 3 JK
macro= 1  E= -75.3630998259713  delta_E= -1.54393e-06  |g|= 0.00175412  1 KF 3 JK
macro= 2  E= -75.3630998259713  delta_E= 0  |g|= 2.71904e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-75.3630998259713  |g|= 2.71904e-07  total 4 KF 12 JK
converged SCF energy = -75.3630998259713

******** <class 'pyscf.mp.mp2.MP2'> ********
nocc = 4, nmo = 5
frozen orbitals 0
max_memory 4000 MB (current use 87 MB)
E(MP2) = -75.3770817467264  E_corr = -0.0139819207551535

******** <class 'pyscf.ci.cisd.RCISD'> ********
CISD nocc = 4, nmo = 5
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-09
max_cycle = 50
max_space = 12
lindep = 0
nroots = 1
max_memory 4000 MB (current use 87 MB)
Init t2, MP2 energy = -0.0139819207551534
RCISD converged
E(RCISD) = -75.38416083805369  E_corr = -0.02106101208242064

******** <class 'pyscf.cc.ccsd.CCSD'> ********
CC2 = 0
CCSD nocc = 4, nmo = 5
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-07
conv_tol_normt = 1e-05
diis_space = 6
diis_start_cycle = 0
diis_start_energy_diff = 1e+09
max_memory 4000 MB (current use 87 MB)
Init t2, MP2 energy = -75.3770817467264  E_corr(MP2) -0.0139819207551534
Init E_corr(CCSD) = -0.0139819207551827
cycle = 1  E_corr(CCSD) = -0.0185673893383977  dE = -0.00458546858  norm(t1,t2) = 0.0245515
cycle = 2  E_corr(CCSD) = -0.0201534847209114  dE = -0.00158609538  norm(t1,t2) = 0.00909697
cycle = 3  E_corr(CCSD) = -0.021074498380566  dE = -0.00092101366  norm(t1,t2) = 0.00352242
cycle = 4  E_corr(CCSD) = -0.021062183798071  dE = 1.23145825e-05  norm(t1,t2) = 0.000224331
cycle = 5  E_corr(CCSD) = -0.0210611567092249  dE = 1.02708885e-06  norm(t1,t2) = 2.36655e-05
cycle = 6  E_corr(CCSD) = -0.0210609578727805  dE = 1.98836444e-07  norm(t1,t2) = 2.9875e-06
cycle = 7  E_corr(CCSD) = -0.0210610389379139  dE = -8.10651333e-08  norm(t1,t2) = 4.81681e-07
CCSD converged
E(CCSD) = -75.38416086490918  E_corr = -0.02106103893791386
CCSD(T) correction = -6.80083369127455e-20

******** CASCI flags ********
CAS (4e+4e, 5o), ncore = 0, nvir = 0
natorb = False
canonicalization = True
sorting_mo_energy = False
max_memory 4000 (MB)
******** <class 'pyscf.fci.direct_spin1.FCISolver'> ********
max. cycles = 200
conv_tol = 1e-08
davidson only = False
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 400
spin = None
Density matrix diagonal elements [1.99454492 1.97926887 1.99945633 1.99945633 0.02727354]
CASCI converged
CASCI E = -75.3841608380542  E(CI) = -19.5765660838042  S^2 = 0.0000000
Hartree-Fock    -75.36309982597126
Moller-Plesset  -75.37708174672642
CISD            -75.38416083805369
CCSD            -75.38416086490918
CCSD(T)         -75.38416086490918
CASCI           -75.38416083805421
#####################################################
END: 6-31++g
#####################################################
#####################################################
START: 6-31g**
#####################################################
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:32 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 10
[INPUT] charge = -1
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry True subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.964000000000 AA    0.000000000000   0.000000000000   1.821695984081 Bohr

nuclear repulsion = 4.39151212381743
point group symmetry = Coov
num. orbitals of irrep A1 = 9
num. orbitals of irrep E1x = 4
num. orbitals of irrep E1y = 4
num. orbitals of irrep E2x = 1
num. orbitals of irrep E2y = 1
number of shells = 9
number of NR pGTOs = 34
number of NR cGTOs = 19
basis = 6-31g**
ecp = {}
CPU time:         3.22


******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpu9jiobdo
max_memory 4000 MB (current use 87 MB)
Freeze 0 electrons in irreps []
    10 free electrons in irreps A1 E1x E1y E2x E2y
Set gradient conv threshold to 3.16228e-05
init E= -75.0212804442375
HOMO (E1y) = -0.432906787042104  LUMO (A1) = 0.174164788372713
cycle= 1 E= -75.2091390679429  delta_E= -0.188  |g|= 0.792  |ddm|= 1.01
HOMO (E1y) = 0.140971466168021  LUMO (A1) = 0.574721078572679
cycle= 2 E= -75.2876195077692  delta_E= -0.0785  |g|= 0.492  |ddm|= 0.896
HOMO (E1y) = -0.0352112694421789  LUMO (A1) = 0.555512084818373
cycle= 3 E= -75.3303695996464  delta_E= -0.0428  |g|= 0.0264  |ddm|= 0.339
HOMO (E1x) = -0.0333279173593422  LUMO (A1) = 0.564906843313643
cycle= 4 E= -75.330683868398  delta_E= -0.000314  |g|= 0.00725  |ddm|= 0.0373
HOMO (E1x) = -0.0348902820643187  LUMO (A1) = 0.565518984585037
cycle= 5 E= -75.3307208833303  delta_E= -3.7e-05  |g|= 0.00138  |ddm|= 0.0177
HOMO (E1y) = -0.0352334167179918  LUMO (A1) = 0.565555390879712
cycle= 6 E= -75.3307221750644  delta_E= -1.29e-06  |g|= 0.000172  |ddm|= 0.00378
HOMO (E1x) = -0.0353035414097359  LUMO (A1) = 0.565621084455335
cycle= 7 E= -75.3307221940796  delta_E= -1.9e-08  |g|= 1.14e-05  |ddm|= 0.000523
HOMO (E1x) = -0.0352995107709293  LUMO (A1) = 0.565618539991341
cycle= 8 E= -75.3307221941196  delta_E= -4e-11  |g|= 2.11e-06  |ddm|= 1.66e-05
HOMO (E1x) = -0.0353003172025994  LUMO (A1) = 0.565618660589721
Extra cycle  E= -75.3307221941205  delta_E= -8.81e-13  |g|= 7.57e-07  |ddm|= 1.61e-06
converged SCF energy = -75.3307221941205
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:32 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         3.38

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmphkk62hez
max_memory 4000 MB (current use 87 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmphkk62hez
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 87 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.0352999086669106  LUMO = 0.883369556072306
Initial guess E= -75.3307221941207  |g|= 8.11207e-08
macro= 0  E= -75.3307221941207  delta_E= -2.84217e-14  |g|= 8.11207e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3307221941207  |g|= 8.11207e-08  total 2 KF 4 JK
converged SCF energy = -75.3307221941207
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:32 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         3.43

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmp5knmipaj
max_memory 4000 MB (current use 87 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmp5knmipaj
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 87 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.0867884289798598  LUMO = 0.827901843070416
Initial guess E= -75.3303740628851  |g|= 0.0281653
macro= 0  E= -75.3307221939841  delta_E= -0.000348131  |g|= 0.0281653  1 KF 4 JK
macro= 1  E= -75.3307221941206  delta_E= -1.36481e-10  |g|= 1.5819e-05  1 KF 3 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3307221941206  |g|= 1.5819e-05  total 3 KF 10 JK
converged SCF energy = -75.3307221941206
-----------------------------------------------------
number of orbitals   6
number of electrons  (5, 5)
energy offset        4.391512123817428
irreps of orbitals   ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
-----------------------------------------------------
reconstruction of HF energy  -75.33072219412048 -75.33072219412063
-----------------------------------------------------
number of orbitals   5
number of electrons  (4, 4)
energy offset        -55.8076068115003
irreps of orbitals   ['A1', 'A1', 'E1x', 'E1y', 'A1']
-----------------------------------------------------
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:32 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         3.46

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmp18abrkli
max_memory 4000 MB (current use 87 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmp18abrkli
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 87 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.0867884289798597  LUMO = 0.827901807211892
Initial guess E= -75.3303741396462  |g|= 0.0281102
macro= 0  E= -75.3307221939852  delta_E= -0.000348054  |g|= 0.0281102  1 KF 3 JK
macro= 1  E= -75.3307221941207  delta_E= -1.35458e-10  |g|= 1.57102e-05  1 KF 3 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3307221941207  |g|= 1.57102e-05  total 3 KF 9 JK
converged SCF energy = -75.3307221941207
reconstruction of HF energy  -75.33072219412048 -75.33072219412068
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:33 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         3.48

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpypqlxkj9
max_memory 4000 MB (current use 87 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpypqlxkj9
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 87 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.0867884289798597  LUMO = 0.827901807211892
Initial guess E= -75.3303741396462  |g|= 0.0281102
macro= 0  E= -75.3307221939852  delta_E= -0.000348054  |g|= 0.0281102  1 KF 3 JK
macro= 1  E= -75.3307221941207  delta_E= -1.35458e-10  |g|= 1.57102e-05  1 KF 3 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3307221941207  |g|= 1.57102e-05  total 3 KF 9 JK
converged SCF energy = -75.3307221941207

******** <class 'pyscf.mp.mp2.MP2'> ********
nocc = 4, nmo = 5
frozen orbitals 0
max_memory 4000 MB (current use 87 MB)
E(MP2) = -75.3444173422935  E_corr = -0.0136951481727678

******** <class 'pyscf.ci.cisd.RCISD'> ********
CISD nocc = 4, nmo = 5
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-09
max_cycle = 50
max_space = 12
lindep = 0
nroots = 1
max_memory 4000 MB (current use 87 MB)
Init t2, MP2 energy = -0.0136951481727678
RCISD converged
E(RCISD) = -75.35137397300657  E_corr = -0.02065177888589777

******** <class 'pyscf.cc.ccsd.CCSD'> ********
CC2 = 0
CCSD nocc = 4, nmo = 5
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-07
conv_tol_normt = 1e-05
diis_space = 6
diis_start_cycle = 0
diis_start_energy_diff = 1e+09
max_memory 4000 MB (current use 87 MB)
Init t2, MP2 energy = -75.3444173422935  E_corr(MP2) -0.0136951481727678
Init E_corr(CCSD) = -0.0136951481727678
cycle = 1  E_corr(CCSD) = -0.0181973518308795  dE = -0.00450220366  norm(t1,t2) = 0.0245307
cycle = 2  E_corr(CCSD) = -0.0197553350449718  dE = -0.00155798321  norm(t1,t2) = 0.00909787
cycle = 3  E_corr(CCSD) = -0.0206635592963785  dE = -0.000908224251  norm(t1,t2) = 0.00353305
cycle = 4  E_corr(CCSD) = -0.0206530311205789  dE = 1.05281758e-05  norm(t1,t2) = 0.000220098
cycle = 5  E_corr(CCSD) = -0.0206519549443246  dE = 1.07617625e-06  norm(t1,t2) = 2.38268e-05
cycle = 6  E_corr(CCSD) = -0.0206517118771744  dE = 2.4306715e-07  norm(t1,t2) = 3.44698e-06
cycle = 7  E_corr(CCSD) = -0.0206518177675483  dE = -1.05890374e-07  norm(t1,t2) = 5.41604e-07
cycle = 8  E_corr(CCSD) = -0.0206517778637481  dE = 3.99038002e-08  norm(t1,t2) = 1.67388e-07
CCSD converged
E(CCSD) = -75.35137397198443  E_corr = -0.02065177786374807
CCSD(T) correction = -3.04201847214573e-20

******** CASCI flags ********
CAS (4e+4e, 5o), ncore = 0, nvir = 0
natorb = False
canonicalization = True
sorting_mo_energy = False
max_memory 4000 (MB)
******** <class 'pyscf.fci.direct_spin1.FCISolver'> ********
max. cycles = 200
conv_tol = 1e-08
davidson only = False
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 400
spin = None
Density matrix diagonal elements [1.99504991 1.97962883 1.99928015 1.99928015 0.02676096]
CASCI converged
CASCI E = -75.351373973007  E(CI) = -19.5437671615067  S^2 = 0.0000000
Hartree-Fock    -75.33072219412068
Moller-Plesset  -75.34441734229345
CISD            -75.35137397300657
CCSD            -75.35137397198443
CCSD(T)         -75.35137397198443
CASCI           -75.35137397300699
#####################################################
END: 6-31g**
#####################################################
#####################################################
START: 6-31++g**
#####################################################
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:33 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 10
[INPUT] charge = -1
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry True subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.964000000000 AA    0.000000000000   0.000000000000   1.821695984081 Bohr

nuclear repulsion = 4.39151212381743
point group symmetry = Coov
num. orbitals of irrep A1 = 12
num. orbitals of irrep E1x = 5
num. orbitals of irrep E1y = 5
num. orbitals of irrep E2x = 1
num. orbitals of irrep E2y = 1
number of shells = 12
number of NR pGTOs = 39
number of NR cGTOs = 24
basis = 6-31++g**
ecp = {}
CPU time:         3.60


******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmph5zynf5k
max_memory 4000 MB (current use 87 MB)
Freeze 0 electrons in irreps []
    10 free electrons in irreps A1 E1x E1y E2x E2y
Set gradient conv threshold to 3.16228e-05
init E= -75.0318184353899
HOMO (E1y) = -0.431001542249016  LUMO (A1) = 0.039543462052779
cycle= 1 E= -75.2572951206288  delta_E= -0.225  |g|= 0.743  |ddm|= 0.962
HOMO (E1y) = 0.0884572166600359  LUMO (A1) = 0.221851748703672
cycle= 2 E= -75.290754149183  delta_E= -0.0335  |g|= 0.688  |ddm|= 1.08
HOMO (E1y) = -0.10028828026899  LUMO (A1) = 0.220570519038383
cycle= 3 E= -75.3835029940475  delta_E= -0.0927  |g|= 0.0187  |ddm|= 0.448
HOMO (E1y) = -0.10317934464338  LUMO (A1) = 0.222033676115547
cycle= 4 E= -75.3836346538847  delta_E= -0.000132  |g|= 0.00479  |ddm|= 0.0298
HOMO (E1x) = -0.105042315128101  LUMO (A1) = 0.222030746667492
cycle= 5 E= -75.3836450560988  delta_E= -1.04e-05  |g|= 0.000565  |ddm|= 0.0133
HOMO (E1x) = -0.104896085388552  LUMO (A1) = 0.222025471811327
cycle= 6 E= -75.3836452451687  delta_E= -1.89e-07  |g|= 0.00016  |ddm|= 0.00139
HOMO (E1x) = -0.104873733073644  LUMO (A1) = 0.222034865243742
cycle= 7 E= -75.3836452635854  delta_E= -1.84e-08  |g|= 4.91e-05  |ddm|= 0.000439
HOMO (E1y) = -0.104868343300992  LUMO (A1) = 0.222036810645441
cycle= 8 E= -75.3836452653247  delta_E= -1.74e-09  |g|= 7.17e-06  |ddm|= 0.000119
HOMO (E1y) = -0.104869847489216  LUMO (A1) = 0.222037064491933
cycle= 9 E= -75.3836452653725  delta_E= -4.78e-11  |g|= 1.12e-06  |ddm|= 2e-05
HOMO (E1y) = -0.104869457543796  LUMO (A1) = 0.222037113606796
Extra cycle  E= -75.3836452653735  delta_E= -9.66e-13  |g|= 4.54e-07  |ddm|= 1.97e-06
converged SCF energy = -75.3836452653735
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:33 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         3.79

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpp46om4u2
max_memory 4000 MB (current use 87 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpp46om4u2
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 87 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.104869526539655  LUMO = 0.808250708626212
Initial guess E= -75.3836452653734  |g|= 5.57917e-08
macro= 0  E= -75.3836452653735  delta_E= -2.84217e-14  |g|= 5.57917e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3836452653735  |g|= 5.57917e-08  total 2 KF 4 JK
converged SCF energy = -75.3836452653735
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:33 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         3.85

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmphyc6cmad
max_memory 4000 MB (current use 87 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmphyc6cmad
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 87 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.123995620553034  LUMO = 0.787228309236167
Initial guess E= -75.3835981941379  |g|= 0.010427
macro= 0  E= -75.383645265365  delta_E= -4.70712e-05  |g|= 0.010427  1 KF 4 JK
macro= 1  E= -75.3836452653654  delta_E= -3.69482e-13  |g|= 4.1706e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3836452653654  |g|= 4.1706e-06  total 3 KF 9 JK
converged SCF energy = -75.3836452653654
-----------------------------------------------------
number of orbitals   6
number of electrons  (5, 5)
energy offset        4.391512123817428
irreps of orbitals   ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
-----------------------------------------------------
reconstruction of HF energy  -75.38364526537347 -75.3836452653654
-----------------------------------------------------
number of orbitals   5
number of electrons  (4, 4)
energy offset        -55.80761203991108
irreps of orbitals   ['A1', 'A1', 'E1x', 'E1y', 'A1']
-----------------------------------------------------
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:33 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         3.87

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpkqx7r53_
max_memory 4000 MB (current use 87 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpkqx7r53_
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 87 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.123995620553035  LUMO = 0.787228303865903
Initial guess E= -75.383598205464  |g|= 0.0104051
macro= 0  E= -75.3836452653649  delta_E= -4.70599e-05  |g|= 0.0104051  1 KF 3 JK
macro= 1  E= -75.3836452653666  delta_E= -1.69109e-12  |g|= 4.16299e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3836452653666  |g|= 4.16299e-06  total 3 KF 8 JK
converged SCF energy = -75.3836452653666
reconstruction of HF energy  -75.38364526537347 -75.38364526536661
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:33 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         3.90

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpu347ai9d
max_memory 4000 MB (current use 87 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpu347ai9d
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 87 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.123995620553035  LUMO = 0.787228303865903
Initial guess E= -75.383598205464  |g|= 0.0104051
macro= 0  E= -75.3836452653649  delta_E= -4.70599e-05  |g|= 0.0104051  1 KF 3 JK
macro= 1  E= -75.3836452653666  delta_E= -1.69109e-12  |g|= 4.16299e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3836452653666  |g|= 4.16299e-06  total 3 KF 8 JK
converged SCF energy = -75.3836452653666

******** <class 'pyscf.mp.mp2.MP2'> ********
nocc = 4, nmo = 5
frozen orbitals 0
max_memory 4000 MB (current use 87 MB)
E(MP2) = -75.3965990404156  E_corr = -0.0129537750490096

******** <class 'pyscf.ci.cisd.RCISD'> ********
CISD nocc = 4, nmo = 5
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-09
max_cycle = 50
max_space = 12
lindep = 0
nroots = 1
max_memory 4000 MB (current use 87 MB)
Init t2, MP2 energy = -0.0129537750490096
RCISD converged
E(RCISD) = -75.4031375752654  E_corr = -0.01949230989879987

******** <class 'pyscf.cc.ccsd.CCSD'> ********
CC2 = 0
CCSD nocc = 4, nmo = 5
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-07
conv_tol_normt = 1e-05
diis_space = 6
diis_start_cycle = 0
diis_start_energy_diff = 1e+09
max_memory 4000 MB (current use 87 MB)
Init t2, MP2 energy = -75.3965990404156  E_corr(MP2) -0.0129537750490096
Init E_corr(CCSD) = -0.0129537750546309
cycle = 1  E_corr(CCSD) = -0.0171825798130988  dE = -0.00422880476  norm(t1,t2) = 0.0234118
cycle = 2  E_corr(CCSD) = -0.0186479024413147  dE = -0.00146532263  norm(t1,t2) = 0.00872657
cycle = 3  E_corr(CCSD) = -0.0195053931748289  dE = -0.000857490734  norm(t1,t2) = 0.0033979
cycle = 4  E_corr(CCSD) = -0.0194932826671448  dE = 1.21105077e-05  norm(t1,t2) = 0.000215112
cycle = 5  E_corr(CCSD) = -0.0194923971972456  dE = 8.85469899e-07  norm(t1,t2) = 2.13699e-05
cycle = 6  E_corr(CCSD) = -0.0194922644301029  dE = 1.32767143e-07  norm(t1,t2) = 2.5413e-06
cycle = 7  E_corr(CCSD) = -0.0194923295123292  dE = -6.50822263e-08  norm(t1,t2) = 4.20465e-07
CCSD converged
E(CCSD) = -75.40313759487894  E_corr = -0.01949232951232923
CCSD(T) correction = 4.43102020860025e-20

******** CASCI flags ********
CAS (4e+4e, 5o), ncore = 0, nvir = 0
natorb = False
canonicalization = True
sorting_mo_energy = False
max_memory 4000 (MB)
******** <class 'pyscf.fci.direct_spin1.FCISolver'> ********
max. cycles = 200
conv_tol = 1e-08
davidson only = False
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 400
spin = None
Density matrix diagonal elements [1.99498342 1.98123419 1.99942965 1.99942965 0.0249231 ]
CASCI converged
CASCI E = -75.4031375752656  E(CI) = -19.5955255353545  S^2 = 0.0000000
Hartree-Fock    -75.38364526536661
Moller-Plesset  -75.39659904041562
CISD            -75.4031375752654
CCSD            -75.40313759487894
CCSD(T)         -75.40313759487894
CASCI           -75.40313757526559
#####################################################
END: 6-31++g**
#####################################################
#####################################################
START: cc-pvdz
#####################################################
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:33 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 10
[INPUT] charge = -1
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry True subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.964000000000 AA    0.000000000000   0.000000000000   1.821695984081 Bohr

nuclear repulsion = 4.39151212381743
point group symmetry = Coov
num. orbitals of irrep A1 = 9
num. orbitals of irrep E1x = 4
num. orbitals of irrep E1y = 4
num. orbitals of irrep E2x = 1
num. orbitals of irrep E2y = 1
number of shells = 8
number of NR pGTOs = 33
number of NR cGTOs = 19
basis = cc-pvdz
ecp = {}
CPU time:         4.01


******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmp_vy99b44
max_memory 4000 MB (current use 87 MB)
Freeze 0 electrons in irreps []
    10 free electrons in irreps A1 E1x E1y E2x E2y
Set gradient conv threshold to 3.16228e-05
init E= -75.0334789365024
HOMO (E1x) = -0.432373886495973  LUMO (A1) = 0.143737682787396
cycle= 1 E= -75.2095247943397  delta_E= -0.176  |g|= 0.797  |ddm|= 1.08
HOMO (E1y) = 0.146787835017134  LUMO (A1) = 0.512711851440248
cycle= 2 E= -75.2896171605074  delta_E= -0.0801  |g|= 0.486  |ddm|= 0.803
HOMO (E1x) = -0.0264719647257753  LUMO (A1) = 0.500608524550472
cycle= 3 E= -75.330517168512  delta_E= -0.0409  |g|= 0.0249  |ddm|= 0.303
HOMO (E1y) = -0.0253681784046148  LUMO (A1) = 0.507791968449465
cycle= 4 E= -75.3308135811419  delta_E= -0.000296  |g|= 0.00735  |ddm|= 0.033
HOMO (E1y) = -0.0268704345278042  LUMO (A1) = 0.50836337680164
cycle= 5 E= -75.3308535462252  delta_E= -4e-05  |g|= 0.0015  |ddm|= 0.0175
HOMO (E1y) = -0.0272623340121826  LUMO (A1) = 0.508364461137353
cycle= 6 E= -75.330855373328  delta_E= -1.83e-06  |g|= 0.000225  |ddm|= 0.00451
HOMO (E1x) = -0.0273677252556437  LUMO (A1) = 0.508415718493496
cycle= 7 E= -75.3308554089436  delta_E= -3.56e-08  |g|= 1.61e-05  |ddm|= 0.000691
HOMO (E1y) = -0.0273625662274135  LUMO (A1) = 0.508413879219046
cycle= 8 E= -75.330855409044  delta_E= -1e-10  |g|= 2.58e-06  |ddm|= 2.62e-05
HOMO (E1x) = -0.0273634814474356  LUMO (A1) = 0.508414033880317
Extra cycle  E= -75.3308554090465  delta_E= -2.53e-12  |g|= 7.52e-07  |ddm|= 3.68e-06
converged SCF energy = -75.3308554090465
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:33 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         4.17

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmp4j444ql_
max_memory 4000 MB (current use 87 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmp4j444ql_
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 87 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.0273632908196811  LUMO = 0.883106797602561
Initial guess E= -75.3308554090467  |g|= 1.27268e-07
macro= 0  E= -75.3308554090467  delta_E= 0  |g|= 1.27268e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3308554090467  |g|= 1.27268e-07  total 2 KF 4 JK
converged SCF energy = -75.3308554090467
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:33 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         4.22

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmphbj_kif0
max_memory 4000 MB (current use 85 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmphbj_kif0
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 85 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.0286702650024898  LUMO = 0.881691666902865
Initial guess E= -75.3308551828581  |g|= 0.000716525
macro= 0  E= -75.3308554090466  delta_E= -2.26189e-07  |g|= 0.000716525  1 KF 4 JK
macro= 1  E= -75.3308554090466  delta_E= 0  |g|= 2.83006e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3308554090466  |g|= 2.83006e-09  total 3 KF 9 JK
converged SCF energy = -75.3308554090466
-----------------------------------------------------
number of orbitals   6
number of electrons  (5, 5)
energy offset        4.391512123817428
irreps of orbitals   ['A1', 'A1', 'A1', 'E1y', 'E1x', 'A1']
-----------------------------------------------------
reconstruction of HF energy  -75.33085540904653 -75.33085540904665
-----------------------------------------------------
number of orbitals   5
number of electrons  (4, 4)
energy offset        -55.81157722510272
irreps of orbitals   ['A1', 'A1', 'E1y', 'E1x', 'A1']
-----------------------------------------------------
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:33 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         4.25

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmptrgbi8er
max_memory 4000 MB (current use 87 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmptrgbi8er
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 87 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.0286702650024898  LUMO = 0.881691666879674
Initial guess E= -75.3308551829081  |g|= 0.000715135
macro= 0  E= -75.3308554090467  delta_E= -2.26139e-07  |g|= 0.000715135  1 KF 3 JK
macro= 1  E= -75.3308554090467  delta_E= 0  |g|= 2.57177e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3308554090467  |g|= 2.57177e-09  total 3 KF 8 JK
converged SCF energy = -75.3308554090467
reconstruction of HF energy  -75.33085540904653 -75.3308554090467
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:33 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         4.27

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmp4ulj2yni
max_memory 4000 MB (current use 87 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmp4ulj2yni
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 87 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.0286702650024898  LUMO = 0.881691666879674
Initial guess E= -75.3308551829081  |g|= 0.000715135
macro= 0  E= -75.3308554090467  delta_E= -2.26139e-07  |g|= 0.000715135  1 KF 3 JK
macro= 1  E= -75.3308554090467  delta_E= 0  |g|= 2.57177e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3308554090467  |g|= 2.57177e-09  total 3 KF 8 JK
converged SCF energy = -75.3308554090467

******** <class 'pyscf.mp.mp2.MP2'> ********
nocc = 4, nmo = 5
frozen orbitals 0
max_memory 4000 MB (current use 87 MB)
E(MP2) = -75.3445777594051  E_corr = -0.0137223503584126

******** <class 'pyscf.ci.cisd.RCISD'> ********
CISD nocc = 4, nmo = 5
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-09
max_cycle = 50
max_space = 12
lindep = 0
nroots = 1
max_memory 4000 MB (current use 87 MB)
Init t2, MP2 energy = -0.0137223503584126
RCISD converged
E(RCISD) = -75.35160603985362  E_corr = -0.02075063080691972

******** <class 'pyscf.cc.ccsd.CCSD'> ********
CC2 = 0
CCSD nocc = 4, nmo = 5
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-07
conv_tol_normt = 1e-05
diis_space = 6
diis_start_cycle = 0
diis_start_energy_diff = 1e+09
max_memory 4000 MB (current use 87 MB)
Init t2, MP2 energy = -75.3445777594051  E_corr(MP2) -0.0137223503584126
Init E_corr(CCSD) = -0.0137223503584126
cycle = 1  E_corr(CCSD) = -0.0182571668515989  dE = -0.00453481649  norm(t1,t2) = 0.0247752
cycle = 2  E_corr(CCSD) = -0.0198339096641989  dE = -0.00157674281  norm(t1,t2) = 0.00925391
cycle = 3  E_corr(CCSD) = -0.0207629341983267  dE = -0.000929024534  norm(t1,t2) = 0.00362512
cycle = 4  E_corr(CCSD) = -0.0207519468173979  dE = 1.09873809e-05  norm(t1,t2) = 0.000233045
cycle = 5  E_corr(CCSD) = -0.0207508219396673  dE = 1.12487773e-06  norm(t1,t2) = 2.55283e-05
cycle = 6  E_corr(CCSD) = -0.0207505537749758  dE = 2.68164691e-07  norm(t1,t2) = 3.7958e-06
cycle = 7  E_corr(CCSD) = -0.020750677845476  dE = -1.240705e-07  norm(t1,t2) = 6.08678e-07
cycle = 8  E_corr(CCSD) = -0.0207506297040956  dE = 4.81413804e-08  norm(t1,t2) = 1.99221e-07
CCSD converged
E(CCSD) = -75.3516060387508  E_corr = -0.02075062970409559
CCSD(T) correction = -1.11257154202257e-20

******** CASCI flags ********
CAS (4e+4e, 5o), ncore = 0, nvir = 0
natorb = False
canonicalization = True
sorting_mo_energy = False
max_memory 4000 (MB)
******** <class 'pyscf.fci.direct_spin1.FCISolver'> ********
max. cycles = 200
conv_tol = 1e-08
davidson only = False
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 400
spin = None
Density matrix diagonal elements [1.99496703 1.97942203 1.99923713 1.99923713 0.02713666]
CASCI converged
CASCI E = -75.3516060398541  E(CI) = -19.5400288147514  S^2 = 0.0000000
Hartree-Fock    -75.3308554090467
Moller-Plesset  -75.34457775940511
CISD            -75.35160603985362
CCSD            -75.3516060387508
CCSD(T)         -75.3516060387508
CASCI           -75.35160603985412
#####################################################
END: cc-pvdz
#####################################################
#####################################################
START: cc-pvtz
#####################################################
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:33 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 10
[INPUT] charge = -1
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry True subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.964000000000 AA    0.000000000000   0.000000000000   1.821695984081 Bohr

nuclear repulsion = 4.39151212381743
point group symmetry = Coov
num. orbitals of irrep A1 = 16
num. orbitals of irrep E1x = 9
num. orbitals of irrep E1y = 9
num. orbitals of irrep E2x = 4
num. orbitals of irrep E2y = 4
num. orbitals of irrep E3x = 1
num. orbitals of irrep E3y = 1
number of shells = 15
number of NR pGTOs = 58
number of NR cGTOs = 44
basis = cc-pvtz
ecp = {}
CPU time:         4.40


******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpo7dvo2uj
max_memory 4000 MB (current use 87 MB)
Freeze 0 electrons in irreps []
    10 free electrons in irreps A1 E1x E1y E2x E2y E3x E3y
Set gradient conv threshold to 3.16228e-05
init E= -75.0548776925501
HOMO (E1x) = -0.433440504399662  LUMO (A1) = 0.115803199428338
cycle= 1 E= -75.2603989080183  delta_E= -0.206  |g|= 0.785  |ddm|= 0.826
HOMO (E1x) = 0.116133795007208  LUMO (A1) = 0.430081972926784
cycle= 2 E= -75.3255855782081  delta_E= -0.0652  |g|= 0.596  |ddm|= 0.723
HOMO (E1x) = -0.0597608498520649  LUMO (A1) = 0.421653179454305
cycle= 3 E= -75.3826631621323  delta_E= -0.0571  |g|= 0.0195  |ddm|= 0.278
HOMO (E1x) = -0.0622548245303352  LUMO (A1) = 0.425438122500792
cycle= 4 E= -75.3828029740534  delta_E= -0.00014  |g|= 0.00615  |ddm|= 0.0162
HOMO (E1y) = -0.0633516658380317  LUMO (A1) = 0.42564578008637
cycle= 5 E= -75.3828255731761  delta_E= -2.26e-05  |g|= 0.0016  |ddm|= 0.0104
HOMO (E1x) = -0.0631140160843343  LUMO (A1) = 0.425789723561605
cycle= 6 E= -75.3828274657016  delta_E= -1.89e-06  |g|= 0.000282  |ddm|= 0.00358
HOMO (E1y) = -0.0632357039652889  LUMO (A1) = 0.425819365800484
cycle= 7 E= -75.3828275393662  delta_E= -7.37e-08  |g|= 4.31e-05  |ddm|= 0.000807
HOMO (E1y) = -0.0632466919043917  LUMO (A1) = 0.425818654787589
cycle= 8 E= -75.3828275405142  delta_E= -1.15e-09  |g|= 5.83e-06  |ddm|= 0.000106
HOMO (E1y) = -0.0632479564662301  LUMO (A1) = 0.425818954176738
cycle= 9 E= -75.3828275405358  delta_E= -2.15e-11  |g|= 1.18e-06  |ddm|= 1.55e-05
HOMO (E1x) = -0.0632474201437687  LUMO (A1) = 0.425819025428397
Extra cycle  E= -75.3828275405363  delta_E= -5.12e-13  |g|= 6.32e-07  |ddm|= 1e-06
converged SCF energy = -75.3828275405363
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:33 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         4.77

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmp_elisn97
max_memory 4000 MB (current use 94 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmp_elisn97
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 94 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.0632477129844163  LUMO = 0.849756045866533
Initial guess E= -75.3828275405361  |g|= 1.59225e-08
macro= 0  E= -75.3828275405362  delta_E= -2.84217e-14  |g|= 1.59225e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3828275405362  |g|= 1.59225e-08  total 2 KF 4 JK
converged SCF energy = -75.3828275405362
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:33 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         4.90

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpo8r7mnm9
max_memory 4000 MB (current use 101 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpo8r7mnm9
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 101 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.946167586707321  LUMO = -0.0599673542952118
Initial guess E= -75.3038103820199  |g|= 0.410322
macro= 0  E= -75.3817792687026  delta_E= -0.0779689  |g|= 0.410322  2 KF 6 JK
macro= 1  E= -75.3828275272602  delta_E= -0.00104826  |g|= 0.0557676  1 KF 4 JK
macro= 2  E= -75.3828275405361  delta_E= -1.32758e-08  |g|= 0.000151572  1 KF 3 JK
macro= 3  E= -75.3828275405361  delta_E= 0  |g|= 3.30656e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 4  E=-75.3828275405361  |g|= 3.30656e-06  total 6 KF 20 JK
converged SCF energy = -75.3828275405361
-----------------------------------------------------
number of orbitals   6
number of electrons  (5, 5)
energy offset        4.391512123817428
irreps of orbitals   ['A1', 'A1', 'A1', 'E1y', 'E1x', 'A1']
-----------------------------------------------------
reconstruction of HF energy  -75.38282754053628 -75.38282754053608
-----------------------------------------------------
number of orbitals   5
number of electrons  (4, 4)
energy offset        -55.811883676070586
irreps of orbitals   ['A1', 'A1', 'E1y', 'E1x', 'A1']
-----------------------------------------------------
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:33 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         4.93

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmp6_m4bkv8
max_memory 4000 MB (current use 101 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmp6_m4bkv8
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 101 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.946167586707321  LUMO = -0.0599754142942839
Initial guess E= -75.3038222088036  |g|= 0.409525
macro= 0  E= -75.381694852058  delta_E= -0.0778726  |g|= 0.409525  1 KF 4 JK
macro= 1  E= -75.3828275305837  delta_E= -0.00113268  |g|= 0.0496689  1 KF 3 JK
macro= 2  E= -75.3828275405364  delta_E= -9.95263e-09  |g|= 0.000130855  1 KF 3 JK
macro= 3  E= -75.3828275405364  delta_E= 1.42109e-14  |g|= 3.1525e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 4  E=-75.3828275405364  |g|= 3.1525e-09  total 5 KF 17 JK
converged SCF energy = -75.3828275405364
reconstruction of HF energy  -75.38282754053628 -75.38282754053635
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:33 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         4.96

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpzpn_gu87
max_memory 4000 MB (current use 101 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpzpn_gu87
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 101 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.946167586707321  LUMO = -0.0599754142942839
Initial guess E= -75.3038222088036  |g|= 0.409525
macro= 0  E= -75.381694852058  delta_E= -0.0778726  |g|= 0.409525  1 KF 4 JK
macro= 1  E= -75.3828275305837  delta_E= -0.00113268  |g|= 0.0496689  1 KF 3 JK
macro= 2  E= -75.3828275405364  delta_E= -9.95263e-09  |g|= 0.000130855  1 KF 3 JK
macro= 3  E= -75.3828275405364  delta_E= 1.42109e-14  |g|= 3.1525e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 4  E=-75.3828275405364  |g|= 3.1525e-09  total 5 KF 17 JK
converged SCF energy = -75.3828275405364

******** <class 'pyscf.mp.mp2.MP2'> ********
nocc = 4, nmo = 5
frozen orbitals 0
max_memory 4000 MB (current use 101 MB)
E(MP2) = -75.3962334290205  E_corr = -0.013405888484177

******** <class 'pyscf.ci.cisd.RCISD'> ********
CISD nocc = 4, nmo = 5
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-09
max_cycle = 50
max_space = 12
lindep = 0
nroots = 1
max_memory 4000 MB (current use 101 MB)
Init t2, MP2 energy = -0.013405888484177
RCISD converged
E(RCISD) = -75.4030841876633  E_corr = -0.02025664712694589

******** <class 'pyscf.cc.ccsd.CCSD'> ********
CC2 = 0
CCSD nocc = 4, nmo = 5
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-07
conv_tol_normt = 1e-05
diis_space = 6
diis_start_cycle = 0
diis_start_energy_diff = 1e+09
max_memory 4000 MB (current use 101 MB)
Init t2, MP2 energy = -75.3962334290205  E_corr(MP2) -0.013405888484177
Init E_corr(CCSD) = -0.013405888484177
cycle = 1  E_corr(CCSD) = -0.0178272949663677  dE = -0.00442140648  norm(t1,t2) = 0.0242664
cycle = 2  E_corr(CCSD) = -0.0193653820141205  dE = -0.00153808705  norm(t1,t2) = 0.00906337
cycle = 3  E_corr(CCSD) = -0.0202695967308  dE = -0.000904214717  norm(t1,t2) = 0.0035393
cycle = 4  E_corr(CCSD) = -0.0202577828726016  dE = 1.18138582e-05  norm(t1,t2) = 0.000224681
cycle = 5  E_corr(CCSD) = -0.0202567863265154  dE = 9.96546086e-07  norm(t1,t2) = 2.38965e-05
cycle = 6  E_corr(CCSD) = -0.0202565830778768  dE = 2.03248639e-07  norm(t1,t2) = 3.26523e-06
cycle = 7  E_corr(CCSD) = -0.0202566801126857  dE = -9.70348088e-08  norm(t1,t2) = 5.37468e-07
CCSD converged
E(CCSD) = -75.40308422064903  E_corr = -0.02025668011268567
CCSD(T) correction = -3.15117640980404e-20

******** CASCI flags ********
CAS (4e+4e, 5o), ncore = 0, nvir = 0
natorb = False
canonicalization = True
sorting_mo_energy = False
max_memory 4000 (MB)
******** <class 'pyscf.fci.direct_spin1.FCISolver'> ********
max. cycles = 200
conv_tol = 1e-08
davidson only = False
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 400
spin = None
Density matrix diagonal elements [1.99494442 1.98008904 1.99932854 1.99932854 0.02630945]
CASCI converged
CASCI E = -75.4030841876636  E(CI) = -19.591200511593  S^2 = 0.0000000
Hartree-Fock    -75.38282754053635
Moller-Plesset  -75.39623342902053
CISD            -75.4030841876633
CCSD            -75.40308422064903
CCSD(T)         -75.40308422064903
CASCI           -75.40308418766362
#####################################################
END: cc-pvtz
#####################################################
#####################################################
START: cc-pvqz
#####################################################
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:33 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 10
[INPUT] charge = -1
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry True subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.964000000000 AA    0.000000000000   0.000000000000   1.821695984081 Bohr

nuclear repulsion = 4.39151212381743
point group symmetry = Coov
num. orbitals of irrep A1 = 25
num. orbitals of irrep E1x = 16
num. orbitals of irrep E1y = 16
num. orbitals of irrep E2x = 9
num. orbitals of irrep E2y = 9
num. orbitals of irrep E3x = 4
num. orbitals of irrep E3y = 4
num. orbitals of irrep E4x = 1
num. orbitals of irrep E4y = 1
number of shells = 24
number of NR pGTOs = 100
number of NR cGTOs = 85
basis = cc-pvqz
ecp = {}
CPU time:         5.09


******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpt4c9hjid
max_memory 4000 MB (current use 101 MB)
Freeze 0 electrons in irreps []
    10 free electrons in irreps A1 E1x E1y E2x E2y E3x E3y E4x E4y
Set gradient conv threshold to 3.16228e-05
init E= -75.0617559966076
HOMO (E1y) = -0.434397066057616  LUMO (A1) = 0.0975185716937335
cycle= 1 E= -75.2745469689371  delta_E= -0.213  |g|= 0.784  |ddm|= 0.845
HOMO (E1y) = 0.105167296659952  LUMO (A1) = 0.378792358517016
cycle= 2 E= -75.3304581841841  delta_E= -0.0559  |g|= 0.654  |ddm|= 0.694
HOMO (E1y) = -0.0764958470431491  LUMO (A1) = 0.372199088595192
cycle= 3 E= -75.4013934456766  delta_E= -0.0709  |g|= 0.0182  |ddm|= 0.278
HOMO (E1y) = -0.0799197686303419  LUMO (A1) = 0.374826810274894
cycle= 4 E= -75.4014973380577  delta_E= -0.000104  |g|= 0.00525  |ddm|= 0.0137
HOMO (E1y) = -0.0813597962445439  LUMO (A1) = 0.374772206005348
cycle= 5 E= -75.4015109737246  delta_E= -1.36e-05  |g|= 0.00145  |ddm|= 0.00686
HOMO (E1y) = -0.0810508312897063  LUMO (A1) = 0.374858978173721
cycle= 6 E= -75.4015123490987  delta_E= -1.38e-06  |g|= 0.000328  |ddm|= 0.00248
HOMO (E1y) = -0.0810812538278491  LUMO (A1) = 0.374896694395651
cycle= 7 E= -75.4015124398219  delta_E= -9.07e-08  |g|= 6.12e-05  |ddm|= 0.000684
HOMO (E1y) = -0.0810997126028832  LUMO (A1) = 0.374898960192897
cycle= 8 E= -75.4015124429373  delta_E= -3.12e-09  |g|= 9e-06  |ddm|= 0.000164
HOMO (E1y) = -0.0811019270224296  LUMO (A1) = 0.374899139007335
cycle= 9 E= -75.4015124429925  delta_E= -5.52e-11  |g|= 1.62e-06  |ddm|= 3.25e-05
HOMO (E1y) = -0.0811011123260249  LUMO (A1) = 0.374899230621185
Extra cycle  E= -75.401512442993  delta_E= -4.83e-13  |g|= 8.98e-07  |ddm|= 1.56e-06
converged SCF energy = -75.401512442993
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:34 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         9.06

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpabsqp8yw
max_memory 4000 MB (current use 169 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpabsqp8yw
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 169 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.0811015098647688  LUMO = 0.832761394584056
Initial guess E= -75.4015124429929  |g|= 2.21332e-08
macro= 0  E= -75.4015124429929  delta_E= 0  |g|= 2.21332e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.4015124429929  |g|= 2.21332e-08  total 2 KF 4 JK
converged SCF energy = -75.4015124429929
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:34 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        10.04

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpkkr5tz5p
max_memory 4000 MB (current use 167 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpkkr5tz5p
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 167 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.0816492461950753  LUMO = 0.832162362419078
Initial guess E= -75.4015124042406  |g|= 0.000298426
macro= 0  E= -75.4015124429928  delta_E= -3.87522e-08  |g|= 0.000298426  1 KF 4 JK
macro= 1  E= -75.4015124429929  delta_E= -2.84217e-14  |g|= 2.37652e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.4015124429929  |g|= 2.37652e-09  total 3 KF 9 JK
converged SCF energy = -75.4015124429929
-----------------------------------------------------
number of orbitals   6
number of electrons  (5, 5)
energy offset        4.391512123817428
irreps of orbitals   ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
-----------------------------------------------------
reconstruction of HF energy  -75.40151244299295 -75.40151244299287
-----------------------------------------------------
number of orbitals   5
number of electrons  (4, 4)
energy offset        -55.81317349768615
irreps of orbitals   ['A1', 'A1', 'E1x', 'E1y', 'A1']
-----------------------------------------------------
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:34 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        10.06

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpi8p84wmn
max_memory 4000 MB (current use 167 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpi8p84wmn
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 167 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.0816492461950753  LUMO = 0.8321623624147
Initial guess E= -75.4015124042498  |g|= 0.000297817
macro= 0  E= -75.4015124429929  delta_E= -3.87431e-08  |g|= 0.000297817  1 KF 3 JK
macro= 1  E= -75.4015124429929  delta_E= 0  |g|= 2.36576e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.4015124429929  |g|= 2.36576e-09  total 3 KF 8 JK
converged SCF energy = -75.4015124429929
reconstruction of HF energy  -75.40151244299295 -75.40151244299287
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:34 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        10.08

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpe2t_0db6
max_memory 4000 MB (current use 167 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpe2t_0db6
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 167 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.0816492461950753  LUMO = 0.8321623624147
Initial guess E= -75.4015124042498  |g|= 0.000297817
macro= 0  E= -75.4015124429929  delta_E= -3.87431e-08  |g|= 0.000297817  1 KF 3 JK
macro= 1  E= -75.4015124429929  delta_E= 0  |g|= 2.36576e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.4015124429929  |g|= 2.36576e-09  total 3 KF 8 JK
converged SCF energy = -75.4015124429929

******** <class 'pyscf.mp.mp2.MP2'> ********
nocc = 4, nmo = 5
frozen orbitals 0
max_memory 4000 MB (current use 167 MB)
E(MP2) = -75.4147479691125  E_corr = -0.0132355261196152

******** <class 'pyscf.ci.cisd.RCISD'> ********
CISD nocc = 4, nmo = 5
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-09
max_cycle = 50
max_space = 12
lindep = 0
nroots = 1
max_memory 4000 MB (current use 167 MB)
Init t2, MP2 energy = -0.0132355261196152
RCISD converged
E(RCISD) = -75.42148216238482  E_corr = -0.01996971939194517

******** <class 'pyscf.cc.ccsd.CCSD'> ********
CC2 = 0
CCSD nocc = 4, nmo = 5
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-07
conv_tol_normt = 1e-05
diis_space = 6
diis_start_cycle = 0
diis_start_energy_diff = 1e+09
max_memory 4000 MB (current use 167 MB)
Init t2, MP2 energy = -75.4147479691125  E_corr(MP2) -0.0132355261196152
Init E_corr(CCSD) = -0.0132355261196152
cycle = 1  E_corr(CCSD) = -0.0175853228881611  dE = -0.00434979677  norm(t1,t2) = 0.023935
cycle = 2  E_corr(CCSD) = -0.0190963985714599  dE = -0.00151107568  norm(t1,t2) = 0.00893277
cycle = 3  E_corr(CCSD) = -0.0199828219840553  dE = -0.000886423413  norm(t1,t2) = 0.00348263
cycle = 4  E_corr(CCSD) = -0.0199707674153699  dE = 1.20545687e-05  norm(t1,t2) = 0.000220012
cycle = 5  E_corr(CCSD) = -0.0199698343024281  dE = 9.33112942e-07  norm(t1,t2) = 2.28001e-05
cycle = 6  E_corr(CCSD) = -0.0199696627733189  dE = 1.71529109e-07  norm(t1,t2) = 2.94396e-06
cycle = 7  E_corr(CCSD) = -0.0199697463497172  dE = -8.35763983e-08  norm(t1,t2) = 4.88427e-07
CCSD converged
E(CCSD) = -75.42148218934257  E_corr = -0.01996974634971724
CCSD(T) correction = 1.97104644161651e-20

******** CASCI flags ********
CAS (4e+4e, 5o), ncore = 0, nvir = 0
natorb = False
canonicalization = True
sorting_mo_energy = False
max_memory 4000 (MB)
******** <class 'pyscf.fci.direct_spin1.FCISolver'> ********
max. cycles = 200
conv_tol = 1e-08
davidson only = False
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 400
spin = None
Density matrix diagonal elements [1.99493323 1.98055748 1.99936239 1.99936239 0.02578452]
CASCI converged
CASCI E = -75.421482162385  E(CI) = -19.6083086646989  S^2 = 0.0000000
Hartree-Fock    -75.40151244299287
Moller-Plesset  -75.41474796911248
CISD            -75.42148216238482
CCSD            -75.42148218934258
CCSD(T)         -75.42148218934258
CASCI           -75.42148216238505
#####################################################
END: cc-pvqz
#####################################################
#####################################################
START: aug-cc-pvdz
#####################################################
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:34 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 10
[INPUT] charge = -1
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry True subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.964000000000 AA    0.000000000000   0.000000000000   1.821695984081 Bohr

nuclear repulsion = 4.39151212381743
point group symmetry = Coov
num. orbitals of irrep A1 = 14
num. orbitals of irrep E1x = 7
num. orbitals of irrep E1y = 7
num. orbitals of irrep E2x = 2
num. orbitals of irrep E2y = 2
number of shells = 13
number of NR pGTOs = 46
number of NR cGTOs = 32
basis = aug-cc-pvdz
ecp = {}
CPU time:        10.20


******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmp81husbbs
max_memory 4000 MB (current use 167 MB)
Freeze 0 electrons in irreps []
    10 free electrons in irreps A1 E1x E1y E2x E2y
Set gradient conv threshold to 3.16228e-05
init E= -75.0448651600982
HOMO (E1y) = -0.431336573499369  LUMO (A1) = 0.0321817058030589
cycle= 1 E= -75.2665147782316  delta_E= -0.222  |g|= 0.748  |ddm|= 1.11
HOMO (E1y) = 0.0875144952969744  LUMO (A1) = 0.198112790173994
cycle= 2 E= -75.2895970741643  delta_E= -0.0231  |g|= 0.733  |ddm|= 0.924
HOMO (E1y) = -0.101805755210748  LUMO (A1) = 0.197478541151726
cycle= 3 E= -75.3957642772503  delta_E= -0.106  |g|= 0.0172  |ddm|= 0.405
HOMO (E1x) = -0.105926651447786  LUMO (A1) = 0.198285688915988
cycle= 4 E= -75.3958774378353  delta_E= -0.000113  |g|= 0.00517  |ddm|= 0.0235
HOMO (E1x) = -0.108454412089083  LUMO (A1) = 0.198172929886874
cycle= 5 E= -75.3958892336578  delta_E= -1.18e-05  |g|= 0.000662  |ddm|= 0.0105
HOMO (E1y) = -0.108226422125524  LUMO (A1) = 0.198136271725803
cycle= 6 E= -75.3958895410598  delta_E= -3.07e-07  |g|= 0.000153  |ddm|= 0.00172
HOMO (E1y) = -0.108222218597164  LUMO (A1) = 0.198133796013852
cycle= 7 E= -75.3958895565577  delta_E= -1.55e-08  |g|= 1.52e-05  |ddm|= 0.00041
HOMO (E1y) = -0.108221914511319  LUMO (A1) = 0.198133745525716
cycle= 8 E= -75.3958895566894  delta_E= -1.32e-10  |g|= 2.47e-06  |ddm|= 5.03e-05
HOMO (E1x) = -0.108221826934836  LUMO (A1) = 0.198133784383083
Extra cycle  E= -75.3958895566927  delta_E= -3.3e-12  |g|= 1.31e-06  |ddm|= 4.77e-06
converged SCF energy = -75.3958895566927
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:35 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        10.42

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpu393eebw
max_memory 4000 MB (current use 167 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpu393eebw
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 167 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.108222451229116  LUMO = 0.802487058276907
Initial guess E= -75.3958895566927  |g|= 5.40392e-08
macro= 0  E= -75.3958895566927  delta_E= 2.84217e-14  |g|= 5.40392e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.3958895566927  |g|= 5.40392e-08  total 2 KF 4 JK
converged SCF energy = -75.3958895566927
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:35 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        10.49

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpyo2qk2ez
max_memory 4000 MB (current use 113 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpyo2qk2ez
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 113 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.113376523960092  LUMO = 0.796787021636038
Initial guess E= -75.3958861420525  |g|= 0.00280985
macro= 0  E= -75.3958895566927  delta_E= -3.41464e-06  |g|= 0.00280985  1 KF 4 JK
macro= 1  E= -75.3958895566928  delta_E= -2.84217e-14  |g|= 2.94735e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3958895566928  |g|= 2.94735e-07  total 3 KF 9 JK
converged SCF energy = -75.3958895566928
-----------------------------------------------------
number of orbitals   6
number of electrons  (5, 5)
energy offset        4.391512123817428
irreps of orbitals   ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
-----------------------------------------------------
reconstruction of HF energy  -75.39588955669268 -75.39588955669277
-----------------------------------------------------
number of orbitals   5
number of electrons  (4, 4)
energy offset        -55.81158178665593
irreps of orbitals   ['A1', 'A1', 'E1x', 'E1y', 'A1']
-----------------------------------------------------
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:35 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        10.52

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpalxb47sr
max_memory 4000 MB (current use 113 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpalxb47sr
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 113 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.113376523960091  LUMO = 0.796787021248312
Initial guess E= -75.3958861428574  |g|= 0.00280411
macro= 0  E= -75.3958895566928  delta_E= -3.41384e-06  |g|= 0.00280411  1 KF 3 JK
macro= 1  E= -75.3958895566928  delta_E= -1.42109e-14  |g|= 2.94083e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3958895566928  |g|= 2.94083e-07  total 3 KF 8 JK
converged SCF energy = -75.3958895566928
reconstruction of HF energy  -75.39588955669268 -75.39588955669277
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:35 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        10.55

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpmnh2w89f
max_memory 4000 MB (current use 113 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpmnh2w89f
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 113 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.113376523960091  LUMO = 0.796787021248312
Initial guess E= -75.3958861428574  |g|= 0.00280411
macro= 0  E= -75.3958895566928  delta_E= -3.41384e-06  |g|= 0.00280411  1 KF 3 JK
macro= 1  E= -75.3958895566928  delta_E= -1.42109e-14  |g|= 2.94083e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 2  E=-75.3958895566928  |g|= 2.94083e-07  total 3 KF 8 JK
converged SCF energy = -75.3958895566928

******** <class 'pyscf.mp.mp2.MP2'> ********
nocc = 4, nmo = 5
frozen orbitals 0
max_memory 4000 MB (current use 113 MB)
E(MP2) = -75.408835475092  E_corr = -0.0129459183992289

******** <class 'pyscf.ci.cisd.RCISD'> ********
CISD nocc = 4, nmo = 5
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-09
max_cycle = 50
max_space = 12
lindep = 0
nroots = 1
max_memory 4000 MB (current use 113 MB)
Init t2, MP2 energy = -0.0129459183992289
RCISD converged
E(RCISD) = -75.41537153262888  E_corr = -0.01948197593611654

******** <class 'pyscf.cc.ccsd.CCSD'> ********
CC2 = 0
CCSD nocc = 4, nmo = 5
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-07
conv_tol_normt = 1e-05
diis_space = 6
diis_start_cycle = 0
diis_start_energy_diff = 1e+09
max_memory 4000 MB (current use 113 MB)
Init t2, MP2 energy = -75.408835475092  E_corr(MP2) -0.0129459183992289
Init E_corr(CCSD) = -0.0129459183992574
cycle = 1  E_corr(CCSD) = -0.0171725982139636  dE = -0.00422667981  norm(t1,t2) = 0.0234206
cycle = 2  E_corr(CCSD) = -0.0186374220679278  dE = -0.00146482385  norm(t1,t2) = 0.00873949
cycle = 3  E_corr(CCSD) = -0.0194952546765733  dE = -0.000857832609  norm(t1,t2) = 0.00340532
cycle = 4  E_corr(CCSD) = -0.0194829008037224  dE = 1.23538729e-05  norm(t1,t2) = 0.000215356
cycle = 5  E_corr(CCSD) = -0.019482057815524  dE = 8.42988198e-07  norm(t1,t2) = 2.13167e-05
cycle = 6  E_corr(CCSD) = -0.0194819298470995  dE = 1.27968425e-07  norm(t1,t2) = 2.49048e-06
cycle = 7  E_corr(CCSD) = -0.0194819956019711  dE = -6.57548716e-08  norm(t1,t2) = 4.22139e-07
CCSD converged
E(CCSD) = -75.41537155229473  E_corr = -0.01948199560197111
CCSD(T) correction = 3.04950776701675e-21

******** CASCI flags ********
CAS (4e+4e, 5o), ncore = 0, nvir = 0
natorb = False
canonicalization = True
sorting_mo_energy = False
max_memory 4000 (MB)
******** <class 'pyscf.fci.direct_spin1.FCISolver'> ********
max. cycles = 200
conv_tol = 1e-08
davidson only = False
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 400
spin = None
Density matrix diagonal elements [1.99498404 1.98124008 1.99942114 1.99942114 0.02493361]
CASCI converged
CASCI E = -75.415371532629  E(CI) = -19.6037897459731  S^2 = 0.0000000
Hartree-Fock    -75.39588955669277
Moller-Plesset  -75.40883547509199
CISD            -75.41537153262888
CCSD            -75.41537155229473
CCSD(T)         -75.41537155229473
CASCI           -75.41537153262902
#####################################################
END: aug-cc-pvdz
#####################################################
#####################################################
START: aug-cc-pvtz
#####################################################
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:35 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 10
[INPUT] charge = -1
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry True subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.964000000000 AA    0.000000000000   0.000000000000   1.821695984081 Bohr

nuclear repulsion = 4.39151212381743
point group symmetry = Coov
num. orbitals of irrep A1 = 23
num. orbitals of irrep E1x = 14
num. orbitals of irrep E1y = 14
num. orbitals of irrep E2x = 7
num. orbitals of irrep E2y = 7
num. orbitals of irrep E3x = 2
num. orbitals of irrep E3y = 2
number of shells = 22
number of NR pGTOs = 83
number of NR cGTOs = 69
basis = aug-cc-pvtz
ecp = {}
CPU time:        10.66


******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmp9rid6p65
max_memory 4000 MB (current use 113 MB)
Freeze 0 electrons in irreps []
    10 free electrons in irreps A1 E1x E1y E2x E2y E3x E3y
Set gradient conv threshold to 3.16228e-05
init E= -75.0593047675777
HOMO (E1x) = -0.4340067669394  LUMO (A1) = 0.0270893163707817
cycle= 1 E= -75.2776841252315  delta_E= -0.218  |g|= 0.776  |ddm|= 0.68
HOMO (E1y) = 0.0914070044114887  LUMO (A1) = 0.178566971353092
cycle= 2 E= -75.2954165072629  delta_E= -0.0177  |g|= 0.797  |ddm|= 0.726
HOMO (E1y) = -0.103349669763729  LUMO (A1) = 0.178130775463111
cycle= 3 E= -75.4120372996548  delta_E= -0.117  |g|= 0.0203  |ddm|= 0.336
HOMO (E1y) = -0.106707641704757  LUMO (A1) = 0.17874561873179
cycle= 4 E= -75.4121657306875  delta_E= -0.000128  |g|= 0.00522  |ddm|= 0.0207
HOMO (E1y) = -0.109047443027476  LUMO (A1) = 0.178693104105128
cycle= 5 E= -75.4121766215513  delta_E= -1.09e-05  |g|= 0.000927  |ddm|= 0.00723
HOMO (E1x) = -0.108905978231048  LUMO (A1) = 0.178670589693458
cycle= 6 E= -75.4121771248401  delta_E= -5.03e-07  |g|= 0.000187  |ddm|= 0.00191
HOMO (E1x) = -0.108874487780349  LUMO (A1) = 0.178669173616001
cycle= 7 E= -75.4121771524647  delta_E= -2.76e-08  |g|= 4.34e-05  |ddm|= 0.000558
HOMO (E1x) = -0.10887839855485  LUMO (A1) = 0.17866940700379
cycle= 8 E= -75.4121771542864  delta_E= -1.82e-09  |g|= 1.34e-05  |ddm|= 0.000117
HOMO (E1x) = -0.108878573934534  LUMO (A1) = 0.178669681336614
cycle= 9 E= -75.4121771544721  delta_E= -1.86e-10  |g|= 2.59e-06  |ddm|= 2.76e-05
HOMO (E1x) = -0.108877566258507  LUMO (A1) = 0.178669723395355
Extra cycle  E= -75.4121771544743  delta_E= -2.22e-12  |g|= 1.42e-06  |ddm|= 6.4e-06
converged SCF energy = -75.4121771544743
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:35 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        13.64

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpuquyddxe
max_memory 4000 MB (current use 141 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpuquyddxe
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 141 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.108878190614207  LUMO = 0.802484617548489
Initial guess E= -75.4121771544745  |g|= 4.80382e-08
macro= 0  E= -75.4121771544746  delta_E= -2.84217e-14  |g|= 4.80382e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.4121771544746  |g|= 4.80382e-08  total 2 KF 4 JK
converged SCF energy = -75.4121771544746
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:35 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        14.08

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpl3uoep_5
max_memory 4000 MB (current use 141 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmpl3uoep_5
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 141 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.108918791677302  LUMO = 0.802439718333253
Initial guess E= -75.4121771542618  |g|= 2.21558e-05
macro= 0  E= -75.412177154474  delta_E= -2.12196e-10  |g|= 2.21558e-05  1 KF 3 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.412177154474  |g|= 2.21558e-05  total 2 KF 5 JK
converged SCF energy = -75.412177154474
-----------------------------------------------------
number of orbitals   6
number of electrons  (5, 5)
energy offset        4.391512123817428
irreps of orbitals   ['A1', 'A1', 'A1', 'E1y', 'E1x', 'A1']
-----------------------------------------------------
reconstruction of HF energy  -75.41217715447434 -75.41217715447402
-----------------------------------------------------
number of orbitals   5
number of electrons  (4, 4)
energy offset        -55.81200102553253
irreps of orbitals   ['A1', 'A1', 'E1y', 'E1x', 'A1']
-----------------------------------------------------
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:35 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        14.10

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmphrp7y1nm
max_memory 4000 MB (current use 141 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmphrp7y1nm
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 141 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.108918791677301  LUMO = 0.802439718333231
Initial guess E= -75.412177154262  |g|= 2.211e-05
macro= 0  E= -75.4121771544624  delta_E= -2.00416e-10  |g|= 2.211e-05  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.4121771544624  |g|= 2.211e-05  total 2 KF 4 JK
converged SCF energy = -75.4121771544624
reconstruction of HF energy  -75.41217715447434 -75.41217715446238
#INFO: **** input file is /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/iao_anion.py ****
import numpy as np
from   pyscf import gto,scf,ao2mo,lo
from   scipy import linalg as LA
import sys
sys.path.append('../source/')
from BO_class import Born_Oppenheimer

# STO-6G < IAO < Alessandro < 6-31G

res = {}
res['basis'] = ['sto-6g','6-31g','6-31++g','6-31g**','6-31++g**','cc-pvdz','cc-pvtz','cc-pvqz','aug-cc-pvdz','aug-cc-pvtz']
res['E_HF_anion'] = []
res['E_MP_anion'] = []
res['E_CISD_anion'] = []
res['E_CCSD_anion'] = []
res['E_CCSD(T)_anion'] = []
res['E_CASCI_anion'] = []
res['E_CASSCF_anion'] = []

for i in res['basis']:
    
    print("#"*53)
    print("START:", i)
    print("#"*53)

    mol = gto.M(verbose=4,atom=[['O',(0,0,0)],['H',(0,0,0.964)]],charge=-1,spin=0,basis=i,symmetry=True)
    if(mol.spin==0): mf = scf.RHF(mol)
    else:            mf = scf.ROHF(mol) 
    E   = mf.kernel()
    iao = lo.iao.iao(mol,mf.mo_coeff[:,mf.mo_occ>0.0]) # data una molecola e un insieme di orbitali occupati a livello 
                                                       # RHF costruzione degli IAO

    # ---------------------------------------------------------------------------------------------------------------------

    # get Hamiltonian coefficients in the mo basis
    BO = Born_Oppenheimer(mol,mf,C=iao,n=mf.mo_occ)


    E2 = BO.do_scf()[0]
    BO.print_mol_data()
    print("reconstruction of HF energy ",E,E2)


    # construct an active space freezing/downfolding certain orbitals
    # la base minimale ha 6 orbitali, con indici 0,1,2,3,4,5
    # noi vogliamo eliminare 0 (che e' l'1s dell'ossigeno, quello a piu' bassa energia)
    # quindi tenere [1,2,3,4,5]
    # a volte puo' essere utile rimuovere gli orbitali non cilindro-simmetrici ['A1', 'A1', 'A1', 'E1x', 'E1y', 'A1']
    # qui, E1x ed E1y sono ai posti 3 e 4

    BO.build_active_space(to_keep=[1,2,3,4,5])
    BO.print_mol_data()
    E3 = BO.do_scf()[0]
    print("reconstruction of HF energy ",E,E3)


    BO.do_electronic_structure()

    for k in BO._res:
        res[k+'_anion'].append(BO._res[k])
        
    print("#"*53)
    print("END:", i)
    print("#"*53)

try :
    data = np.load('../iao_oh_data.npy',allow_pickle=True).item()
    for i in res:
        data[i] = res[i]
    np.save('../iao_oh_data',data,allow_pickle=True)
except:
    np.save('../iao_oh_data',res,allow_pickle=True)#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='Precision-3520', release='4.4.0-210-generic', version='#242-Ubuntu SMP Fri Apr 16 09:57:56 UTC 2021', machine='x86_64')  Threads 8
Python 3.9.5 (default, Jun  4 2021, 12:28:51) 
[GCC 7.5.0]
numpy 1.21.1  scipy 1.7.0
Date: Wed Sep  8 21:37:35 2021
PySCF version 1.7.6
PySCF path  /home/alessandro/miniconda3/envs/IBM/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 0
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:        14.12

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.





******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmphynldlph
max_memory 4000 MB (current use 141 MB)
******** <class 'pyscf.scf.hf.RHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/alessandro/Scrivania/Università/Master Thesis/git/test/Esercizio/OH_anion/tmphynldlph
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 141 MB)
Set conv_tol_grad to 3.16228e-05
  HOMO = -0.108918791677301  LUMO = 0.802439718333231
Initial guess E= -75.412177154262  |g|= 2.211e-05
macro= 0  E= -75.4121771544624  delta_E= -2.00416e-10  |g|= 2.211e-05  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-75.4121771544624  |g|= 2.211e-05  total 2 KF 4 JK
converged SCF energy = -75.4121771544624

******** <class 'pyscf.mp.mp2.MP2'> ********
nocc = 4, nmo = 5
frozen orbitals 0
max_memory 4000 MB (current use 141 MB)
E(MP2) = -75.4251092990282  E_corr = -0.0129321445658199

******** <class 'pyscf.ci.cisd.RCISD'> ********
CISD nocc = 4, nmo = 5
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-09
max_cycle = 50
max_space = 12
lindep = 0
nroots = 1
max_memory 4000 MB (current use 141 MB)
Init t2, MP2 energy = -0.0129321445658199
RCISD converged
E(RCISD) = -75.43164897087668  E_corr = -0.01947181641429647

******** <class 'pyscf.cc.ccsd.CCSD'> ********
CC2 = 0
CCSD nocc = 4, nmo = 5
frozen orbitals 0
max_cycle = 50
direct = 0
conv_tol = 1e-07
conv_tol_normt = 1e-05
diis_space = 6
diis_start_cycle = 0
diis_start_energy_diff = 1e+09
max_memory 4000 MB (current use 141 MB)
Init t2, MP2 energy = -75.4251092990282  E_corr(MP2) -0.0129321445658199
Init E_corr(CCSD) = -0.0129321445744815
cycle = 1  E_corr(CCSD) = -0.0171585391945099  dE = -0.00422639462  norm(t1,t2) = 0.0234386
cycle = 2  E_corr(CCSD) = -0.0186248173798811  dE = -0.00146627819  norm(t1,t2) = 0.00875775
cycle = 3  E_corr(CCSD) = -0.0194851990767266  dE = -0.000860381697  norm(t1,t2) = 0.00341735
cycle = 4  E_corr(CCSD) = -0.0194727395855086  dE = 1.24594912e-05  norm(t1,t2) = 0.000217273
cycle = 5  E_corr(CCSD) = -0.0194718974749854  dE = 8.42110523e-07  norm(t1,t2) = 2.14215e-05
cycle = 6  E_corr(CCSD) = -0.0194717699156857  dE = 1.275593e-07  norm(t1,t2) = 2.49607e-06
cycle = 7  E_corr(CCSD) = -0.0194718362221219  dE = -6.63064362e-08  norm(t1,t2) = 4.2775e-07
CCSD converged
E(CCSD) = -75.43164899068451  E_corr = -0.01947183622212191
CCSD(T) correction = -4.9226433120374e-20

******** CASCI flags ********
CAS (4e+4e, 5o), ncore = 0, nvir = 0
natorb = False
canonicalization = True
sorting_mo_energy = False
max_memory 4000 (MB)
******** <class 'pyscf.fci.direct_spin1.FCISolver'> ********
max. cycles = 200
conv_tol = 1e-08
davidson only = False
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 400
spin = None
Density matrix diagonal elements [1.99498164 1.98123321 1.99941426 1.99941426 0.02495663]
CASCI converged
CASCI E = -75.4316489708768  E(CI) = -19.6196479453443  S^2 = 0.0000000
Hartree-Fock    -75.41217715446238
Moller-Plesset  -75.42510929902821
CISD            -75.43164897087668
CCSD            -75.43164899068451
CCSD(T)         -75.43164899068451
CASCI           -75.43164897087681
#####################################################
END: aug-cc-pvtz
#####################################################
